boolean	runs all the specified validations and returns +true+ if no errors were added otherwise +false+.    class person     include activemodel::validations      attr_accessor :name     validates_presence_of :name   end    person = person.new   person.name = ''   person.valid? # => false   person.name = 'david'   person.valid? # => true  context can optionally be supplied to define which callbacks to test against (the context is defined on the validations using <tt>:on</tt>).    class person     include activemodel::validations      attr_accessor :name     validates_presence_of :name, on: :new   end    person = person.new   person.valid?       # => true   person.valid?(:new) # => false
boolean	runs all the validations within the specified context. returns +true+ if no errors are found, +false+ otherwise.  aliased as #validate.  if the argument is +false+ (default is +nil+), the context is set to <tt>:create</tt> if {new_record?}[rdoc-ref:persistence#new_record?] is +true+, and to <tt>:update</tt> if it is not.  \validations with no <tt>:on</tt> option will run no matter the context. \validations with some <tt>:on</tt> option will only run in the specified context.
boolean	returns true if the current time is within daylight savings time for the specified time zone.    time.zone = 'eastern time (us & canada)'    # => 'eastern time (us & canada)'   time.zone.parse("2012-5-30").dst?           # => true   time.zone.parse("2012-11-30").dst?          # => false
object	returns the receiver if it's present otherwise returns +nil+. <tt>object.presence</tt> is equivalent to     object.present? ? object : nil  for example, something like    state   = params[:state]   if params[:state].present?   country = params[:country] if params[:country].present?   region  = state || country || 'us'  becomes    region = params[:state].presence || params[:country].presence || 'us'
object	returns the receiver if it's included in the argument otherwise returns +nil+. argument must be any object which responds to +#include?+. usage:    params[:bucket_type].presence_in %w( project calendar )  this will throw an +argumenterror+ if the argument doesn't respond to +#include?+.
string	moves over the binary and dsym file to the output directory
integer	upload binary apk and obb and corresponding change logs with client
string	return the session cookie.
string	open up the team selection for the user (if necessary).  if the user is in multiple teams, a team selection is shown. the user can then select a team by entering the number  additionally, the team id is shown next to each team name so that the user can use the environment variable `fastlane_team_id` for future user.
string	@examples:   external, internal, inactive, expired
array	path to the project or workspace as parameter this will also include the scheme (if given)
array	identifies the resolution of a video using `ffmpeg`
string	used to produce a shell command string from a list of arguments that may be passed to methods such as kernel#system, kernel#spawn and open3.popen2e in order to print the command to the terminal. the same *args are passed directly to a system call (open3.popen2e). this interpretation is not used when executing a command.
string	open up the team selection for the user (if necessary).  if the user is in multiple teams, a team selection is shown. the user can then select a team by entering the number  additionally, the team id is shown next to each team name so that the user can use the environment variable `fastlane_team_id` for future user.
hash	as subscription pricing, intro offers, etc.
hash	as subscription pricing, intro offers, etc.
hash	@example: {   'de-de': {     name: "name shown in appstore",     description: "description of the in app purchase"    } }
array	@example:  [    {      country: "ww",      begin_date: nil,      end_date: nil,      tier: 1    }  ]
string	trade representative contact information
string	trade representative contact information
string	app review information
string	app review information
hash	testflight: a reference to all the build trains
array	the numbers of all build trains that were uploaded
array	does not include invalid builds.  i never got this to work to properly try and debug this
string	indicates the type of this certificate which is automatically used to determine the class of the certificate. available values listed in certificate_type_ids
string	indicates the type of this certificate which is automatically used to determine the class of the certificate. available values listed in certificate_type_ids
hash	{  "latestinstalledappadamid": "1222374686",  "latestinstalledbuildid": "20739770",  "latestinstalleddate": "1496866405755",  "latestinstalledshortversion": "1.0",  "latestinstalledversion": "68" }
hash	{  "latestinstalledappadamid": "1222374686",  "latestinstalledbuildid": "20739770",  "latestinstalleddate": "1496866405755",  "latestinstalledshortversion": "1.0",  "latestinstalledversion": "68" }
array	returns an array of all available pricing tiers  [{   "tierstem": "0",   "tiername": "free",   "pricinginfo": [{       "country": "united states",       "countrycode": "us",       "currencysymbol": "$",       "currencycode": "usd",       "wholesaleprice": 0.0,       "retailprice": 0.0,       "fretailprice": "$0.00",       "fwholesaleprice": "$0.00"     }, {     ... }, { ...
array	returns an array of all supported territories
string	must be after attr_mapping
boolean	<b>deprecated:</b> use <tt>add_id_info_uses_idfa</tt> instead.
boolean	<b>deprecated:</b> use <tt>add_id_info_uses_idfa</tt> instead.
array	path to the project or workspace as parameter this will also include the scheme (if given)
array	path to the project or workspace as parameter this will also include the scheme (if given)
string	download the current provisioning profile. this will *not* store the provisioning profile on the file system. instead this method will return the content of the profile.
string	retrieve gitlab shell secret token
string	returns required gitlab shell version
boolean	initialize a new project repository using a project model
boolean	initialize a new wiki repository using a project model
boolean	init new repository
boolean	import wiki repository from external service
boolean	import project repository from external service
boolean	import repository
boolean	move or rename a repository
boolean	add new key to authorized_keys
boolean	batch-add keys to authorized_keys
boolean	remove ssh key from authorized_keys
boolean	remove all ssh keys from gitlab shell
string	return a ssh url for a given project path
string	return gitlab shell version
string	return hooks folder path used by projects
boolean	tries to set repository as read_only, checking for existing git transfers in progress beforehand
boolean	this is used by `to_hash` and `init_from_hash`.
array	returns a list of all files that have been added, modified or renamed. `git.modified_files` might contain paths that already have been renamed, so we need to remove them from the list.  considering these changes:  - a new_file.rb - d deleted_file.rb - m modified_file.rb - r renamed_file_before.rb -> renamed_file_after.rb  it will return ``` [ 'new_file.rb', 'modified_file.rb', 'renamed_file_after.rb' ] ```
hash	takes in an array of models and returns a hash for the approximate counts for them.  various count strategies can be specified that are executed in sequence until all tables have an approximate count attached or we run out of strategies.  note that not all strategies are available on all supported rdbms.
boolean	creates the authorized_keys file if it doesn't exist
boolean	add id and its key to the authorized_keys file
boolean	atomically add all the keys to the authorized_keys file
boolean	remove key by id from the authorized_keys file
boolean	clear the authorized_keys file
string	term to be displayed when check passed
string	term to be displayed when check failed
string	name of the systemcheck defined by the subclass
string	skip reason defined during runtime  this value have precedence over the one defined in the subclass
hash	execute the given block in an exclusive lock. if there is the other thread has already working on the block, it enqueues the items without processing the block.  note: if an exception is raised in the block, the poppped items will not be recovered.       we should not re-enqueue the items in this case because it could end up in an infinite loop.
string	base directory
string	disk path is used to build repository and project's wiki path on disk
string	base directory
string	disk path is used to build repository and project's wiki path on disk
integer	increments the given cache key and increments the value by 1 with the expiration interval defined in `.rate_limits`.
hash	returns a formatted dashboard packed with db info.
hash	returns a dashboard without any supplemental info. returns only full, yml-defined dashboards.
hash	returns a new dashboard hash with the results of running transforms on the dashboard.
array	returns a list of the full_paths of every project which has an embed in the doc
hash	returns a new dashboard with only the matching metrics from the system dashboard, stripped of groups.
hash	returns a new dashboard with only the matching metrics from the system dashboard, stripped of groups.
hash	returns a new dashboard with only the matching metrics from the system dashboard, stripped of group info.  note: this overrides the method #raw_dashboard, which means the result will not be cached. this is because we are inserting db info into the dashboard before post-processing. this ensures we aren't acting on deleted or out-of-date metrics.
string	returns a symbol representing the group that the dashboard's group title belongs to. it will be one of the keys found under prometheusmetricenums.custom_groups.
hash	returns a representation of a promtheusmetric as a dashboard panel. as the panel is generated on the fly, we're using default values for info not represented in the db.
boolean	a boolean indicating whether this formula should be considered outdated if the target of the alias it was installed with has since changed. defaults to true.
boolean	a boolean indicating whether this formula should be considered outdated if the target of the alias it was installed with has since changed. defaults to true.
string	warn the user about any homebrew-specific issues or quirks for this package these should not contain setup instructions that would apply to installation through a different package manager on a different os. <pre>def caveats   <<~eos     are optional. something the user must be warned about?   eos end</pre>  <pre>def caveats   s = <<~eos     print some important notice to the user when `brew info [formula]` is     called or when brewing a formula.     this is optional. you can use all the vars like #{version} here.   eos   s += "some issue only on older systems" if macos.version < :el_capitan   s end</pre>
boolean	a test is required for new formulae and makes us happy. the block will create, run in and delete a temporary directory.  we are fine if the executable does not error out, so we know linking and building the software was ok. <pre>system bin/"foobar", "--version"</pre>  <pre>(testpath/"test.file").write <<~eos   writing some test file, if you need to eos assert_equal "ok", shell_output("test_command test.file").strip</pre>  need complete control over stdin, stdout? <pre>require "open3" open3.popen3("#{bin}/example", "argument") do |stdin, stdout, _|   stdin.write("some text")   stdin.close   assert_equal "result", stdout.read end</pre>  the test will fail if it returns false, or if an exception is raised. failed assertions and failed `system` commands will raise exceptions.
array	performs a `select` on the underlying database.
hash	lazily loaded database in read/write mode. if this method is called, a database file with be created in the `homebrew_cache` with name corresponding to the `@type` instance variable
string	the path where the database resides in the `homebrew_cache` for the given `@type`
void	obtains a copy of the virtualenv library and creates a new virtualenv on disk.
void	installs packages represented by `targets` into the virtualenv.
void	installs packages represented by `targets` into the virtualenv, but   unlike {#pip_install} also links new scripts to {formula#bin}.
string	generates a zip file.
string	clears the dynamic_base flag for a windows executable
string	self.to_win32pe
string	splits a string into a number of assembly push operations
string	self.exe_sub_method
string	self.to_win32pe_exe_sub
string	self.to_win64pe
string	embeds shellcode within a windows pe file implementing the windows service control methods.
string	self.to_win64pe_service
string	self.to_win32pe_dll
string	self.to_win64pe_dll
string	self.to_win32pe_dll
string	self.to_win64pe_dll
string	wraps an executable inside a windows .msi file for auto execution when run
string	self.replace_msi_buffer
string	self.to_osx_arm_macho
string	self.to_osx_ppc_macho
string	self.to_osx_x86_macho
string	self.to_osx_x64_macho
string	self.to_osx_app
string	create an elf executable containing the payload provided in +code+  for the default template, this method just appends the payload, checks if the template is 32 or 64 bit and adjusts the offsets accordingly for user-provided templates, modifies the header to mark all executable segments as writable and overwrites the entrypoint (usually _start) with the payload.
string	create a 32-bit linux elf containing the payload provided in +code+
string	create a 32-bit bsd (test on freebsd) elf containing the payload provided in +code+
string	create a 64-bit linux elf containing the payload provided in +code+
string	create a 32-bit solaris elf containing the payload provided in +code+
string	create a 64-bit linux elf containing the payload provided in +code+
string	create a 32-bit linux elf_dyn containing the payload provided in +code+
string	create a 64-bit linux elf_dyn containing the payload provided in +code+
string	self.to_linux_armle_elf
string	self.to_linux_armle_elf_dll
string	self.to_linux_aarch64_elf
string	self.to_linux_mipsle_elf little endian
string	self.to_linux_mipsbe_elf big endian
string	creates a web archive (war) file containing a jsp page and hexdump of a payload.  the jsp page converts the hexdump back to a normal binary file and places it in the temp directory. the payload file is then executed.
string	creates a web archive (war) file from the provided jsp code.  on tomcat, war files will be deployed into a directory with the same name as the archive, e.g. +foo.war+ will be extracted into +foo/+. if the server is in a default configuration, deoployment will happen automatically. see {http://tomcat.apache.org/tomcat-5.5-doc/config/host.html the tomcat documentation} for a description of how this works.
string	creates a .net dll which loads data into memory at a specified location with read/execute permissions    - the data will be loaded at: base+0x2065    - default max size is 0x8000 (32768)
array	fmt formats self.to_executable_fmt_formats
string	self.get_file_contents
integer	self.find_payload_tag
integer	this method returns the id of the mdm::session that the post module is currently running against.
string	determines the base configuration directory.
string	returns the installation root directory
string	returns the configuration directory default.
string	return the directory that logo files should be loaded from.
string	returns the global module directory.
string	returns the path that scripts can be loaded from.
string	returns the directory that log files should be stored in.
string	returns the directory that plugins are stored in.
string	returns the user-specific plugin base path
string	returns the directory in which session log files are to reside.
string	returns the directory in which captured data will reside.
string	returns the directory in which locally-generated data will reside.
string	return the user-specific directory that logo files should be loaded from.
string	returns the user-specific module base path
string	returns the user-specific script base path
string	returns the data directory
string	returns the full path to the configuration file.
string	returns the full path to the history file.
string	returns the full path to the handler file.
void	initializes configuration, creating directories as necessary.
void	saves configuration to the path specified in the configfile hash key or the default path if one isn't specified.  the options should be group references that have named value pairs.
void	deletes the specified config group from the ini file
boolean	parses {author} details from the supplied string which may be of the form `name` or `name <a@b.com>`
string	an optional email associated with this {author}.
string	serialize the {author} instance to a string of the form `name` or `name <a@b.com>`
void	extends self with the constant list in the datastore
void	@param[constant] one or more ruby constants
void	raises a runtimeerror failure message. this is meant to be used for all non-exploits, and allows specific classes to override.
void	initialize logging.
void	enables a log source of name src. creates the .log file in the configured directory if logging is not already enabled for this source.
boolean	stops logging for a given log source.
void	sets whether or not session logging is to be enabled.
void	starts logging for a given session.
boolean	stops logging for a given session.
array	returns an array of all of the exploit mixins.  lame algorithm right now. we search the msf::exploit namespace for all modules that do not have any constants in them.  in the future we can replace this with a better algorithm.  it's just important that it returns an array of all of the mixin modules.
string	generates a nop sled using the #make_nops method. the difference between this and #make_nops is this method is much faster, good for exploit developers that actually want huge chunks of nops. the downside of using this is the nop sled is less randomized.
void	raises a msf::exploit::failed exception. it overrides the fail_with method in lib/msf/core/module.rb
string	if the payload has assembly that needs to be compiled, do so now.  blobs will be cached in the framework's payloadset
string	performs an export of the workspace's `metasploit::credential::login` objects in pwdump format
string	performs an export of the workspace's `metasploit::credential::login` objects in xml format
void	writes a module_detail element to the report_file for each mdm::module::detail.
hash	options passed to {#initialize}
void	change directory in the remote session to +path+, which may be relative or absolute.
string	returns the current working directory in the remote session
array	returns a list of the contents of the specified directory
array	returns a list of the contents of the specified directory
string	expand any environment variables to return the full path specified by +path+.
void	writes a given string to a given local file
string	returns a md5 checksum of a given remote file
string	returns a sha1 checksum of a given remote file
string	returns a sha2 checksum of a given remote file
array	platform-agnostic file read.  returns contents of remote file +file_name+ as a string.
void	platform-agnostic file write. writes given object content to a remote file.  note: *this is not binary-safe on windows shell sessions!*
void	platform-agnostic file append. appends given object content to a remote file. returns boolean true if successful  note: *this is not binary-safe on windows shell sessions!*
void	read a local file +local+ and write it as +remote+ on the remote file system
void	delete remote files
void	delete remote directories
void	delete remote files
void	delete remote directories
string	meterpreter-specific file read.  returns contents of remote file +file_name+ as a string or nil if there was an error  you should never call this method directly.  instead, call {#read_file} which will call this if it is appropriate for the given session.
void	write +data+ to the remote file +file_name+.  truncates if +append+ is false, appends otherwise.  you should never call this method directly.  instead, call {#write_file} or {#append_file} which will call this if it is appropriate for the given session.
integer	calculate the maximum line length for a unix shell.
string	it returns the username of the current user
void	overrides the builtin 'each' operator to avoid the following exception on ruby 1.9.2+ "can't add a new key into hash during iteration"
void	enumerates each module class in the set.
void	enumerates each module class in the set based on their relative ranking to one another.  modules that are ranked higher are shown first.
void	forces all modules in this set to be loaded.
void	gives the module set an opportunity to handle a module reload event
void	dummy placeholder to recalculate aliases and other fun things.
void	load all modules that are marked as being symbolic.
void	enumerates the modules in the supplied array with possible limiting factors.
integer	retrieves the rank from a loaded, not-yet-loaded, or unloadable metasploit module.
hash	cached sysinfo, returns nil for non-meterpreter sessions
array	return a (possibly empty) list of all compatible sessions
boolean	true when this module is passive, false when active
array	a list of compatible session types
string	returns an executable.
string	reads (and possibly decodes) from the socket and sends an ack to verify receipt
string	implements decoding of gdbserver's run-length-encoding that is applied on some hex values to collapse repeated characters.  https://sourceware.org/gdb/current/onlinedocs/gdb/overview.html#binary-data
string	the two-digit checksum is computed as the modulo 256 sum of all characters between the leading ‘$’ and the trailing ‘#’ (an eight bit unsigned checksum).
boolean	verifies a response's checksum
hash	steps execution and finds $pc pointer and architecture
string	executes one instruction on the remote process  the results of running "step" will look like: x86: $t0505:00000000;04:a0f7ffbf;08:d2f0fdb7;thread:p2d39.2d39;core:0;#53 x64: $t0506:0000000000000000;07:b0587f9fff7f0000;10:d3e29d03057f0000;thread:p8bf9.8bf9;core:0;#df the third comma-separated field will contain eip, and the register index will let us deduce the remote architecture (through pc_registers lookup)
hash	connect and perform fingerprinting of the rdp service  note: nla is required to detect the product_version
boolean	negotiate security protocol and begin session building
string	parse rdp negotiation data - 2.2.1.2 reference: https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/13757f8f-66db-4273-9d2c-385c33b1e483
string	outputs jsp that spawns a bind tcp shell
string	outputs jsp code that spawns a reverse tcp shell
string	outputs java code to assign the system shell path to a variable.  it uses the datastore if a value has been provided, otherwise tries to guess the system shell path bad on the os target.
string	generate a chunk of php code that should be eval'd before #php_system_block.  the generated code will initialize
string	generate a chunk of php code that tries to run a command.
void	this method is called when a new payload module class is loaded up.  for the payload set we simply create an instance of the class and do some magic to figure out if it's a single, stager, or stage.  depending on which it is, we add it to the appropriate list.
string	returns the webcam interface
string	returns the webcam api
array	similar to {classmethods#get_alerts}, but executes each registered block in the context of this module instance and returns a flattened list of strings. (see {classmethods#get_alerts})
string	generate a raw 16-byte payload uuid given a seed, platform, architecture, and timestamp
hash	parse a raw 16-byte payload uuid and return the payload id, platform, architecture, and timestamp
string	generate a 8-byte payload id given a seed string
hash	filter out uuids with obviously invalid fields and return either a validated uuid or a uuid with the arch, platform, and timestamp fields strippped out.
hash	parse a 22-byte base64url-encoded payload uuid and return the hash
integer	look up the numeric platform id given a string or platformlist as input
integer	look up the numeric architecture id given a string as input
hash	initializes a uuid object given a raw 16+ byte blob
hash	initializes a uuid object given a 22+ byte uri
string	provides a string representation of a uuid
hash	provides a hash representation of a uuid
string	provides a raw byte representation of a uuid
string	provides a uri-encoded representation of a uuid
string	provides a hex representation of the payload uid of the uuid
void	require the appropriate readline library based on the user's preference.
void	sends an mms message to multiple numbers of the same service provider (carrier).
void	sends a text message to multiple numbers of the same service provider (carrier).
string	generate a realistic-looking but obstensibly fake ssl certificate. use faker gem to mimic other self-signed certificates on the web to reduce the chance of sig identification by nids and the like.
void	this method automatically subscribes a module to whatever event providers it wishes to monitor.  this can be used to allow modules to automatically execute or perform other tasks when certain events occur.  for instance, when a new host is detected, other auxiliary modules may wish to run such that they can collect more information about the host that was detected.
string	outputs a javascript snippet that spawns a bind tcp shell
string	outputs a javascript snippet that spawns a reverse tcp shell
string	wraps the javascript code param in a "node" command invocation
string	encode the given python command in base64 and wrap it with a stub that will decode and execute it on the fly. the code will be condensed to one line and compatible with all python versions supported by the python meterpreter stage.
string	return the stager payload's raw payload.  can be nil if the stager is not pre-assembled.
string	return the stager payload's assembly text, if any.
hash	return the stager payload's offsets.  these will be used for substitutions during stager generation.
string	returns the raw stage payload.  can be nil if the final stage is not pre-assembled.
string	returns the assembly text of the stage payload.
hash	returns variable offsets within the stage payload.  these will be used for substitutions during generation of the final stage.
string	generates the stage payload and substitutes all offsets.
string	encodes the stage prior to transmission
string	return the stager payload's raw payload.  can be nil if the stager is not pre-assembled. aliases
hash	return the stager payload's offsets.  these will be used for substitutions during stager generation.
hash	calls an api.
void	closes the client.
hash	creates a credential.
void	sets the status of a login credential to a failure.
hash	returns login credentials from a specific workspace.
hash	returns information about hosts.
hash	returns information about services.
hash	returns information about reported vulnerabilities.
hash	returns information about workspaces.
hash	returns the current workspace.
hash	returns the current workspace.
hash	sets a workspace.
hash	deletes a workspace.
hash	adds a new workspace.
hash	returns information about a host.
hash	returns analysis of module suggestions for known data about a host.
hash	reports a new host to the database.
hash	reports a service to the database.
hash	returns information about a service.
hash	returns a note.
hash	returns information about a client connection.
hash	reports a client connection.
hash	reports a note.
hash	returns notes from the database.
string	returns an external vulnerability reference.
hash	deletes vulnerabilities.
hash	deletes notes.
hash	deletes services.
hash	deletes hosts.
hash	reports a vulnerability.
hash	returns framework events.
hash	reports a framework event.
hash	reports a looted item.
hash	returns all the looted items.
hash	imports file to the database.
hash	returns vulnerabilities from services or from a host.
hash	returns browser clients information.
hash	deletes browser information from a client.
hash	sets the driver for the database or returns the current one.
hash	connects to the database.  this must contain :driver and driver specific options.
hash	returns the database status.
hash	disconnects the database.
string	returns a formatted string that contains information about the supplied module instance.
array	dumps an exploit's targets.
array	dumps a module's actions
array	dumps the module's selected action
string	dumps information about an exploit module.
string	dumps information about an auxiliary module.
string	dumps information about a post module.
string	dumps information about a payload module.
array	returns an array of all authors
string	dumps information about a module, just the basics.
array	dumps the list of options associated with the supplied module.
array	dumps the references associated with the supplied module.
array	deletes host entries based on the ids passed in.
array	deletes loot entries based on the ids passed in.
array	deletes note entries based on the ids passed in.
array	deletes user entries based on the ids passed in.
boolean	authenticates the user.
string	creates a new api token for the user.  the opts parameter must contain: the opts parameter can contain:
array	deletes vuln entries based on the ids passed in.
string	this method generates the full encoded payload and returns the encoded payload buffer.
string	generates the raw payload from the payload instance.  this populates the {#raw} attribute.
string	generate a first-stage php payload.  for arch_php targets, simply returns payload.encoded wrapped in <?php ?> markers.  for target architectures other than arch_php, this will base64 encode an appropriate executable and drop it on the target system.  after running it, the generated code will attempt to unlink the dropped executable which will certainly fail on windows.
array	a list of addresses to attempt to bind, in preferred order.
string	javascript source code of settimeout(fn, delay)
string	javascript source of readuntiltoken(s) continues reading the stream as data is available, until a pair of   command tokens like [[abcd123ffh]] [[abcd123ffh]] is consumed.  returns a function that can be passed to the #ondataavailable callback of   nsiinputstreampump that will buffer until a second token is read, or, in   the absence of any tokens, a newline character is read.
string	javascript source code of readfile(path) - synchronously reads a file and returns its contents. the file is deleted immediately afterwards.
string	javascript source code of runcmd(str,cb) - runs a shell command on the os  because of a limitation of firefox, we cannot retrieve the shell output so the stdout/err are instead redirected to a temp file, which is read and destroyed after the command completes.  on posix, the command is double wrapped in "/bin/sh -c" calls, the outer of which redirects stdout.  on windows, the command is wrapped in two "cmd /c" calls, the outer of which redirects stdout. a jscript "launch" file is dropped and invoked with wscript to run the command without displaying the cmd.exe prompt.  when the command contains the pattern "[javascript] ... [/javascript]", the javascript code between the tags is eval'd and returned.
string	this file is dropped on the windows platforms to a temp file in order to prevent the cmd.exe prompt from appearing. it is executed and then deleted.  note: we should totally add a powershell replacement here.  base64 and runs it as a shell command.
hash	returns a list of jobs.
hash	stops a job.
hash	returns information about a job.
array	will return or yield a string based on the presense of a block
array	modifies each byte of the string from beginning to end, packing each element as an 8 bit character.
array	modifies each byte of the string from beginning to end, packing each element as an 8 bit character.
array	useful generators (many derived from axman)
array	reserved filename array useful generators (many derived from axman)
array	fuzzer numbers by powers of two
array	powers of two by some fuzzing factor.
string	generates a fuzz string if no block is set, it will retrive characters from the fuzzchar datastore option.
array	creates a smaller fuzz string starting from length 16 -> 512 bytes long
array	creates a longer fuzz string from length 64 -> 8192 bytes long
array	creates a giant fuzz string from length 512 -> 131,064 bytes long
array	various uri types
array	generator for common uri dividers
array	generator for common path prefixes
array	generates various small uri string types
array	generates various long uri string types
array	generates various giant uri string types
array	format for the uri string generator
array	generates various small strings
array	generates various small strings
array	generates various small strings
array	generates various giant strings
array	format for the path generator
array	generates fuzzer strings using path prefixes
integer	this method safely get the workspace id. it handles if the db is not active
string	return the datastore value of the same name
integer	return the datastore value of the same name
string	return the datastore value of the same name
string	return the datastore value of the same name
string	return the datastore value of the same name
boolean	return the datastore value of the same name
void	logs out of a database instance and sets {#postgres_conn} to nil
hash	if not currently connected, attempt to connect. if an error is encountered while executing the query, it will return with :error ; otherwise, it will return with :complete.
hash	attempts to fingerprint a remote postgresql instance, inferring version number from the failed authentication messages or simply returning the result of "select version()" if authentication was successful.
hash	ask the server what its version is
hash	matches up filename, line number, and routine with a version. these all come from source builds of postgres. todo: check in on the binary distros, see if they're different.
string	uploads the given local file to the remote server
string	writes data to disk on the target server.  this is accomplished in 5 steps: 1. create a new object with "select lo_create(-1)" 2. delete any resulting rows in pg_largeobject table.    on 8.x and older, postgres inserts rows as a result of the call to    lo_create. deleting them here approximates the state on 9.x where no    such insert happens. 3. break the data into loblocksize-byte chunks. 4. insert each of the chunks as a row in pg_largeobject 5. select lo_export to write the file to disk
string	calls {#postgres_base64_data} with the contents of file +fname+
string	converts data to base64 with no newlines
string	a string suitable for displaying to the user
string	a string suitable for displaying to the user
integer	generates a random id.
hash	handles client authentication. the authentication token will expire 5 minutes after the last request was made.
hash	handles client deauthentication.
hash	returns a list of authentication tokens, including the ones that are temporary, permanent, or stored in the backend.
hash	adds a new token to the database.
hash	generates a random 32-byte authentication token. the token is added to the database as a side-effect.
hash	removes a token from the database. similar to what #rpc_logout does internally, except this can remove tokens stored in the database backend (mdm).
void	raises an msf::rpc exception.
hash	returns the rpc service versions.
void	stops the rpc service.
hash	returns a global datastore option.
hash	sets a global datastore option.
hash	unsets a global datastore option.
hash	saves current framework settings.
hash	reloads framework modules. this will take some time to complete.
hash	adds a new local file system path (local to the server) as a module path. the module must be accessible to the user running the metasploit service, and contain a top-level directory for each module type such as: exploits, nop, encoder, payloads, auxiliary, post. also note that this will not unload modules that were deleted from the file system that were previously loaded.
hash	returns the module stats.
hash	returns a list of framework threads.
hash	kills a framework thread.
integer	creates a report based on passed parameters. does not handle child artifacts.
void	executes the command stager while showing the progress. this method should be called from exploits using this mixin.
array	generates a cmd stub based on the current target's architecture and platform.
void	show the progress of the upload while cmd staging
void	selects the correct cmd stager and decoder stub to use
hash	returns a hash with the :decoder option if possible
array	returns all the compatible stager flavors specified by the module and each of its targets.
void	mark this module as deprecated  any time this module is run it will print warnings to that effect.
string	this method takes the shellcode generated so far and adds shellcode from a supplied file. the added shellcode is executed in a separate thread from the main payload.
string	this method takes the shellcode generated so far and iterates through the chosen or compatible encoders. it attempts to encode the payload with each encoder until it finds one that works.
hash	this returns a hash for the exe format generation of payloads
string	this method takes the payload shellcode and formats it appropriately based on the selected output format.
string	this method generates java payloads which are a special case. they can be generated in raw or war formats, which respectively produce a jar or war file for the java payload.
string	this method is a wrapper around all of the other methods. it calls the correct methods in order based on the supplied options and returns the finished payload.
string	this method generates the raw form of the payload as generated by the payload module itself.
string	this method takes an encoded payload and prepends a nop sled to it with a size based on the nops value given to the generator.
string	this method runs a specified encoder, for a number of defined iterations against the shellcode.
string	returns uname output
string	returns the kernel release
string	returns the kernel version
string	returns the kernel name
string	returns the kernel hardware
array	returns the kernel boot config
array	returns the kernel modules
array	returns a list of cpu flags
integer	returns mmap minimum address
array	gathers all suid files on the filesystem. note: this uses the linux `find` command. it will most likely take a while to get all files. consider specifying a more narrow find path.
string	gets the $path environment variable
hash	gets basic information about the system's cpu.
string	gets the hostname of the system
string	gets the name of the current shell
string	gets the pid of the current shell
string	gets the pid of the current session
array	gets the process id(s) of `program`
string	gets the uid of a pid
string	gets the version of glibc
string	gets the mount point of `filepath`
array	gets all the ip directions of the device
array	gets all the interfaces of the device
array	gets all the macs of the device
array	parsing information based on: https://github.com/sensu-plugins/sensu-plugins-network-checks/blob/master/bin/check-netstat-tcp.rb  gets all the listening tcp ports in the device
array	parsing information based on: https://github.com/sensu-plugins/sensu-plugins-network-checks/blob/master/bin/check-netstat-tcp.rb  gets all the listening udp ports in the device
string	converts a distinguished name to dns name
hash	performs an ldap query
string	performs a query to retrieve the default naming context
hash	performs a query on the ldap session
array	gets the ldap entry
string	get ber element data structure from ldapmessage
array	search through the ber data structure for our attribute. this doesn't attempt to parse the ber structure correctly instead it finds the first occurance of our field name tries to check the length of that value.
object	shortcut to the wldap32 railgun object
boolean	steals a token for a user.
string	decrypts lsa encrypted data
string	decrypts "secret" encrypted data  ruby implementation of systemfunction005. the original python code has been taken from credump
void	this methods stores all or part of the current state of the supplied framework instance to whatever medium the derived class implements. if the derived class does not implement this method, the notimplementederror is raised.
void	this method initializes the supplied framework instance with the state that is stored in the persisted backing that the derived class implements.  if the derived class does not implement this method, the notimplementederror is raised.
void	this method adds a new storage class to the hash of storage classes that can be created through create.
array	performs a set of asynchronous lookups for an array of domain,type pairs
string	detect if target has wildcards enabled for a record type
array	process static entries
string	return an encoded powershell script will invoke psh modifiers as enabled
string	return an decoded powershell script
string	return a gzip compressed powershell script will invoke psh modifiers as enabled
string	return a decompressed powershell sript
string	generate a powershell command line, options are passed on to generate_psh_args
string	generate arguments for the powershell command the format will be have no space at the start and have a space afterwards e.g. "-arg1 x -arg -arg x "
string	wraps the powershell code to launch a hidden window and detect the execution environment and spawn the appropriate powershell executable for the payload architecture.
string	creates a powershell command line string which will execute the payload in a hidden window in the appropriate execution environment for the payload architecture. opts are passed through to run_hidden_psh, generate_psh_command_line and generate_psh_args
void	establishes an smb session over the default socket and connects to the ipc$ share.  you should call {#connect} before calling this
void	remove remote file
hash	identifies the windows service matching the sql server instance name
string	identifies a valid sql server command line client on the host and sets sql_client
boolean	attempts to run the osql command line tool
boolean	attempts to run the sqlcmd command line tool
string	runs a sql query using the identified command line tool
string	executes a hidden command
boolean	attempts to impersonate the user of the supplied service if the process has the appropriate privileges it will attempt to steal a token to impersonate, otherwise it will attempt to migrate into the service process.
boolean	attempts to escalate the meterpreter session to system
string	create a startup_info struct for use with createprocessa  this struct will cause the process to be hidden
hash	call createprocesswithlogonw to start a process with the supplier user credentials
hash	call createprocessasuser to start a process with the supplier user credentials  can be used by system processes with the se_increase_quota_name and se_assignprimarytoken_name privileges.  this will normally error with 0xc000142 on later os's (vista+?) for gui apps but is ok for firing off cmd.exe...  with unexpected arguments          expected: ("testphtoken")                        got: (n be run, can be   nil
hash	parse the process_information struct
hash	returns a list of exploit names. the 'exploit/' prefix will not be included.
hash	returns a list of evasion module names. the 'evasion/' prefix will not be included.
hash	returns a list of auxiliary module names. the 'auxiliary/' prefix will not be included.
hash	returns a list of payload module names or a hash with payload module names as keys to hashes that contain the module information fields requested. the 'payload/' prefix will not be included.  if this is nil, then only module names are returned. default: nil the module must support. the module need only support one of the architectures to be included, not all architectures. default: nil  if module_info is not nil, payload module names as keys to hashes that contain the requested module information fields. it contains the following key:  * 'modules' [hash] for example:    {"windows/x64/shell_reverse_tcp"=>{"name"=>"windows x64 command shell, reverse tcp inline"}
hash	returns a list of encoder module names or a hash with encoder module names as keys to hashes that contain the module information fields requested. the 'encoder/' prefix will not be included.  if this is nil, then only module names are returned. default: nil the module must support. the module need only support one of the architectures to be included, not all architectures. default: nil  if module_info is not nil, encoder module names as keys to hashes that contain the requested module information fields. it contains the following key:  * 'modules' [hash] for example:    {"x86/unicode_upper"=>{"name"=>"alpha2 alphanumeric unicode uppercase encoder", "rank"=>"manual"}}
hash	returns a list of nop module names or a hash with nop module names as keys to hashes that contain the module information fields requested. the 'nop/' prefix will not be included.  if this is nil, then only module names are returned. default: nil the module must support. the module need only support one of the architectures to be included, not all architectures. default: nil  if module_info is not nil, nop module names as keys to hashes that contain the requested module information fields. it contains the following key:  * 'modules' [hash] for example:    {"x86/single_byte"=>{"name"=>"single byte", "rank"=>"normal"}}
hash	returns a list of post module names. the 'post/' prefix will not be included.
string	returns detailed information about a module in html.
hash	returns the metadata for a module.
hash	returns the compatible payloads for a specific exploit.
hash	returns the compatible payloads for a specific exploit.
hash	returns the compatible payloads for a specific evasion module.
hash	returns the compatible sessions for a specific post module.
hash	returns the compatible target-specific payloads for an exploit.
hash	returns the compatible target-specific payloads for an exploit.
hash	returns the compatible target-specific payloads for an evasion module.
hash	returns the module's datastore options.
hash	executes a module.
array	returns a list of executable format names.
array	returns a list of transform format names.
array	returns a list of encryption format names.
array	returns a list of platform names.
array	returns a list of architecture names.
array	returns a list of encoding formats.
hash	loads a plugin.
hash	unloads a plugin.
hash	returns a list of loaded plugins.
void	spawns a module document with a browser locally.
void	returns a module document in html.
void	modifies the http request options for a redirection.
string	record various things about an http server that we can glean from the response to a single request.  if this method is passed a response, it will use it directly, otherwise it will check the database for a previous fingerprint.  failing that, it will make a request for /.  other options are passed directly to {#connect} if :response is not given
string	return changelog.txt
boolean	check changelog.txt for patch level
void	set {#on_request_uri} to handle the given +uri+ in addition to the one specified by the developer in opts['path'] or by the user in uripath.  up but we have not yet entered the listen/accept loop.
string	an address to which the client can route.  if available, return lhost which should be the right thing since it already has to be an address the client can route to for the payload to work.  however, lhost will only be available if we're using a reverse_* payload, so if we don't have it, try to use the client's peerhost address.  failing that, fall back to the addr with the default gateway. all of this will be for naught in the case of a user behind nat using a bind payload but there's nothing we can do about it.  note: the address will be *incorrect* in the following two situations: 1. lhost is pointed at a exploit/multi/handler on some other box. 2. srvhost has a value of '0.0.0.0', the user is behind nat, and we're    using a bind payload.  in that case, we don't have an lhost and    the source address will be internal.  this can potentially be dealt with in a module by using the host header from a request if such a header exists.
string	a string suitable for displaying to the user
string	a uri describing where we are listening
string	a string suitable for displaying to the user
string	a uri describing where we are listening
void	yields module reference names under path.
void	records the load error to {msf::modulemanager::loading#module_load_error_by_path} and the log.
void	records the load warning to {msf::modulemanager::loading#module_load_warnings} and the log.
string	returns path to module that can be used for reporting errors in evaluating the {#read_module_content module_content}.
string	changes a file name path to a canonical module reference name.
string	returns the fully-qualified name to the {#create_namespace_module} that wraps the module with the given module reference name.
array	returns an array of names to make a fully qualified module name to wrap the metasploitmodule class so that it doesn't overwrite other (metasploit) module's classes.
string	this reverses a namespace module's relative name to a module full name
string	read the content of the module from under path.
void	restores the namespace module to its original name under its original parent module if there was a previous namespace module.
string	the path to the module qualified by the type directory.
hash	returns system information from build.prop.
string	checks some directories that usually are writable in devices running busybox
boolean	writes data to a file
string	returns uname output
string	returns the kernel release
string	returns the kernel version
string	returns the kernel name
string	returns the kernel hardware
array	gathers all suid files on the filesystem. note: this uses the linux `find` command. it will most likely take a while to get all files. consider specifying a more narrow find path.
hash	gets basic information about the system's cpu.
string	gets the hostname of the system
string	gets the name of the current shell
array	gets the process id(s) of `program`
string	gets the mount point of `filepath`
string	process the json-rpc request. if successful; otherwise, a json-rpc error response.
string	serialize data as json string.
hash	creates a new framework console instance.
hash	returns a list of framework consoles.
hash	deletes a framework console instance.
hash	returns the framework console output in raw form.
hash	sends an input (such as a command) to the framework console.
hash	returns the tab-completed version of your input (such as a module path).
hash	kills a framework session. this serves the same purpose as [ctrl]+[c] to abort an interactive session. you might also want to considering using the session api calls instead of this.
hash	detaches a framework session. this serves the same purpose as [ctrl]+[z] to background an interactive session.
hash	returns a list of sessions that belong to the framework instance used by the rpc service.
hash	stops a session.
hash	reads the output of a shell session (such as a command output).
hash	writes to a shell session (such as a command). note that you will to manually add a newline at the enf of your input so the system will process it. you may want to use #rpc_shell_read to retrieve the output.
hash	upgrades a shell to a meterpreter.
hash	reads the output from a meterpreter session (such as a command output).
hash	reads from a session (such as a command output).
hash	sends an input to a session (such as a command).
hash	returns the last sequence (last issued readpointer) for a shell session.
hash	clears a shell session. this may be useful to reclaim memory for idle background sessions.
hash	sends an input to a meterpreter prompt. you may want to use #rpc_meterpreter_read to retrieve the output.
hash	detaches from a meterpreter session. serves the same purpose as [ctrl]+[z].
hash	kills a meterpreter session. serves the same purpose as [ctrl]+[c].   * 'result' [string] either 'success' or 'failure'.
hash	returns a tab-completed version of your meterpreter prompt input.
hash	runs a meterpreter command even if interacting with a shell or other channel. you will want to use the #rpc_meterpreter_read to retrieve the output.
hash	runs a meterpreter script.
boolean	changes the transport of a given meterpreter session
hash	returns the separator used by the meterpreter.
hash	returns all the compatible post modules for this session.
string	insert a new cachedsize value into the text of a payload module
void	insert a new cachedsize value into a payload module file
void	updates the payload module specified with the current cachedsize
integer	calculates the cachedsize value for a payload module
void	loads metasploit data models and adds its migrations to migrations paths.
boolean	flag to indicate database migration has completed
boolean	flag to indicate database migration has completed
void	resets the column information for all descendants of activerecord::base since some of the migrations may have cached column information that has been updated by later migrations.
void	record file as needing to be cleaned up
void	record directory as needing to be cleaned up
void	record file as needing to be cleaned up singular versions
void	record directory as needing to be cleaned up
void	when a new session is created, attempt to delete any paths that the exploit created.
boolean	sends a file deletion command to the remote +session+
boolean	sends a directory deletion command to the remote +session+
string	converts a path to use the windows separator '\'
string	a uri describing where we are listening
string	return a uri suitable for placing in a payload.  host will be properly wrapped in square brackets, +[]+, for ipv6 addresses.
string	uri scheme
string	the local uri for the handler.
void	create an http listener
void	updates the in-memory cache so that {#file_changed?} will report +false+ if the module is loaded again.
void	refreshes the in-memory cache from the database cache.
string	generates a uri with a given checksum and optionally with an embedded uuid if the desired length can accommodate it.
boolean	injects shellcode to a process, and executes it.
void	finishes {#connect} after `activerecord::base.establish_connection` has succeeded by {#migrate migrating database} and setting {#workspace}.
integer	calculates a method hash to make rmi calls as defined by the jdk 1.2
integer	calculates an interface hash to make rmi calls as defined by the jdk 1.1
string	extracts an string from an io
integer	extracts an int from an io
integer	extracts a long from an io
hash	extract an rmi interface reference from an io
integer	gets an impersonation token from the primary token.  fails
string	gets the permissions granted from the security descriptor of a directory to an access token.
integer	open the service manager with advapi32.dll!openscmanagera on the given host or the local machine if :host option is nil. if called with a block, yields the manager and closes it when the block returns.
integer	open the service with advapi32.dll!openservicea on the target manager
hash	get windows service information.  information returned in a hash with display name, startup mode and command executed by the service. service name is case sensitive.  hash keys are name, start, command and credentials.  if extapi is available we return the dacl, logroup, and interactive values otherwise these values are nil
integer	start a service.
integer	stop a service.
boolean	performs an aggressive service (re)start if service is disabled it will re-enable if service is running it will stop and restart
hash	parses out a service_status struct from the lpservicestatus out parameter
array	load a reflectively-injectable dll from disk and find the offset to the reflectiveloader function inside the dll.
integer	load a reflectively-injectable dll from a string and find the offset to the reflectiveloader function inside the dll.
void	called when a module is initially loaded such that it can be categorized accordingly.
string	returns the file version information such as: major, minor, build, revision, branch.
void	destroys all mdm::module::details in the database.
void	destroys mdm::module::detail if one exists for the given mdm::module::detail#mtype and mdm::module::detail#refname.
void	destroys the old mdm::module::detail and creates a new mdm::module::detail for any module with an mdm::module::detail where the modification time of the mdm::module::detail#file differs from the mdm::module::detail#mtime.  if the mdm::module::detail#file no only exists on disk, then the mdm::module::detail is just destroyed without a new one being created.
void	creates an mdm::module::detail from a module instance.
string	provides the http verb used
string	try to autodetect the target platform
string	try to autodetect the target architecture
string	returns the typo3 login url
string	returns the typo3 backend url
integer	returns the timeout to wait for data between read iterations
string	returns the target host
integer	returns the target port
integer	sends a rmi header stream
integer	sends a rmi call stream
integer	sends a rmi dgcack stream
string	helper method to read fragmented data from a ```rex::socket::tcp```
string	returns the target host
integer	returns the remote port
integer	returns the tcp timeout
string	returns the kdc peer
string	a string suitable for displaying to the user
string	returns a formatted string that contains information about the supplied module instance.
string	dumps an exploit's targets.
string	dumps the exploit's selected target
string	dumps the evasion module's selected target
string	dumps a module's actions
string	dumps the module's selected action
string	dumps the table of payloads that are compatible with the supplied exploit.
string	dumps information about an exploit module.
string	dumps information about an auxiliary module.
string	dumps information about a post module.
string	dumps information about an evasion module.
string	dumps information about a payload module.
string	dumps information about a module, just the basics.
string	dumps the list of options associated with the supplied module.
string	dumps the advanced options associated with the supplied module.
string	dumps the evasion options associated with the supplied module.
string	dumps the references associated with the supplied module.
string	dumps the notes associated with the supplied module.
string	dumps the contents of a datastore.
string	dumps the list of sessions.
array	creates a table row that represents the specified session.
array	creates a table row that represents the specified session.
string	dumps the list of active sessions in verbose mode
string	dumps the list of running jobs.
string	jacked from ernest ellingson <erne [at] powernav.com>, modified a bit to add indention
void	returns all the found exploit modules that support browserexploitserver by going through all the exploits from the framework object. all the usable exploits will be stored in #bap_exploits.
string	returns a prefix type that's unique to this bap (based on a timestamp & module uuid). this overrides msf::exploit::remote::browserprofilemanager#browser_profile_prefix so that bap and all of its child exploits can share target information with each other. if bap is active but there are other standalone bes exploits running, this allows them not to use (or cleanup) each other's data. also, once requested, the method will not generate another profile prefix again, it will just return whatever's been stored in the @browser_profile_prefix instance variable.
void	removes background exploit jobs that belong to bap.
void	removes background payload jobs that belong to bap.
void	cleans up everything such as profiles and jobs.
void	modifies an exploit's default datastore options. some of them are user-configurable, some must be defined by bap.
string	returns a unique resource path.
void	modifies @bap_exploits by sorting. the newest and with the highest ranking goes on top. this method is part of what makes bap smarter. however, the list rearranged by this exploit will not actually be the same exploit list served to every client. when a client a request, #get_suitable_exploits will generate another list that will actually be used by the client by going through what we have here, and filter out all the exploit modules that don't match the target's requirements.
hash	sorts a grouped module list by disclosure date.
hash	sorts a module list by ranking.
hash	breaks @bap_exploits into groups for sorting purposes.
void	modifies @bap_exploit by replacing it with the rearranged module list.
string	returns a payload name. either this will be the user's choice, or falls back to a default one.
integer	returns the selected payload's lport.
string	returns the selected payload's lhost. if no lhost is set by the user (via the datastore option), then the method automatically generates one by rex.
void	creates payload listeners. the active job ids will be tracked in #payload_job_ids so that we know how to find them and then clean them up.
string	returns the human-readable version of the rank.
array	returns an appropriate payload that's compatible with the module.
void	starts exploits.
void	sets up bapv2. this is like our main function.
void	configures the output of sub-jobs
void	prints all the exploits that bap will consider using. but this isn't the actual list of exploits that bap will use for each target.
void	prints information such as what exploits will be used, and the bap url.
array	returns a list of suitable exploits for the current client based on what #sort_bap_exploits gives us. it will do a global exploitable requirement check (the best it can do). there's actually a target-specific exploitable requirement check too, but that is performed in browserexploitserver while the exploit is being served. in other words, it is possible #get_suitable_exploits might not be 100% accurate (but pretty good, it depends on how the exploit dev accurately defines his/her global requirements), but the exploit always has a choice to bail at the last second if it decides it is actually not suitable for the client. that way we don't risk being too wreckless with our attack.
void	logs a click that includes the suitable exploit list.
void	prints a list of suitable exploits for the current list.
array	returns a list of exploit urls. this is used by #build_html so the client can load our exploits one by one.
void	handles client requests specific for bap.
integer	returns a number of sessions obtained by bap's payload handlers.
string	returns the custom 404 url set by the user
string	returns the html that serves our exploits.
string	performs a typo3 backend login
string	encrypts the password with the public key for login
string	returns the file contents for the requested file
string	builds the server address.
hash	new connection handler, executed when there is a new connection.
integer	main dispatcher function. takes the client data and performs a case switch on the command (e.g. negotiate, session setup, read file, etc.)
void	yields the module_reference_name for each module file found under the directory path.
string	returns the full path to the module file on disk.
string	loads the module content from the on disk file.
array	generate an array of job or session ids from a given range string. always returns an array.
string	remove lines with specific substring
string	retrieve the service_name option, generate a random one if not already set.
string	retrieve the service_display_name option, generate a random one if not already set.
string	retrieve the service_description option
string	retrives output from the executed command
boolean	executes a single windows command.  if you want to retrieve the output of your command you'll have to echo it to a .txt file and then use the {#smb_read_file} method to retrieve it.  make sure to remove the files manually or use {exploit::filedropper#register_files_for_cleanup} to have the {exploit::filedropper#cleanup} and {exploit::filedropper#on_new_session} handlers do it for you.
void	yields the module_reference_name for each module file found under the directory path.
string	returns the full path to the module file on disk.
string	loads the module content from the on disk file.
void	create an `mdm::exploitattempt` (and possibly an `mdm::vulnattempt`, if the `vuln` option is passed).
void	create an `mdm::exploitattempt` (and possibly an `mdm::vulnattempt`, if the `vuln` option is passed).
void	create a metasploitdatamodels::automaticexploitation::match result for the given vuln
void	create a metasploitdatamodels::automaticexploitation::match result with a success or failure state
string	wrapper method for generating powershell code to compile .net code
string	wrapper to execute in alternate .net environment
boolean	executes a single windows command.  if you want to retrieve the output of your command you'll have to echo it to a .txt file and then use the {#smb_read_file} method to retrieve it.  make sure to remove the files manually or use {exploit::filedropper#register_files_for_cleanup} to have the {exploit::filedropper#cleanup} and {exploit::filedropper#on_new_session} handlers do it for you.
string	a string suitable for displaying to the user
string	a string suitable for displaying to the user
boolean	verify if a device has been specified.
string	retrieves the target zigbee device.  this is typically set by the user via the interactive hwbridge command line
string	recieves data from the zigbee device
hash	breaks up the packet into different sections.  also provides some decoding information.  this method relates to killerbee's pktchop method and returns a similar array structure pktchop.  if it's a beacon data you will also have a beacondata array of raw beacon related packets.  you can pull other decoded portions from the returned hash such as  fsf  seq  span_id  source  superframe  gts  pending_address_count  protocol_id  stack_profile  capability  ext_pan_id  tx_offset  update_id
void	this method stores the current state of the framework in human readable form to a flatfile.  this can be used as a reporting mechanism.
void	this method stores general information about the current state of the framework instance.
string	returns the wordpress login url
string	returns the wordpress post url
string	returns the wordpress author url
string	returns the wordpress rss feed url
string	returns the wordpress rdf feed url
string	returns the wordpress atom feed url
string	returns the wordpress readme file url
string	returns the wordpress sitemap url
string	returns the wordpress opml url
string	returns the wordpress backend url
string	returns the wordpress admin ajax url
string	returns the wordpress admin posts url
string	returns the wordpress admin update url
string	returns the wordpress wp-content dir url
string	returns the wordpress plugins dir url
string	returns the wordpress themes dir url
string	returns the wordpress uploads dir url
string	returns the wordpress xmlrpc url
string	returns the wordpress rest api url
hash	sinatra injects extra parameters for some reason: https://github.com/sinatra/sinatra/issues/453 this method cleans those up so we don't have any unexpected values before passing on. it also inspects the query string for any invalid parameters.
hash	get warden options hash from the rack environment.
boolean	uploads a plugin using a valid admin session.
string	performs a wordpress login
string	posts a comment as an authenticated user
string	posts a comment as an unauthenticated user
string	wordpress shows moderated comments to the unauthenticated posting user users are identified by their cookie
integer	tries to bruteforce a valid post_id
integer	tries to bruteforce a valid post_id with comments enabled
string	gets the post_id from a post body
array	tries to get some blog posts via the rss feed
string	generate token stealing shellcode suitable for use when overwriting the haliquerysysteminformation pointer. the shellcode preserves the edx and ebx registers.
array	helper method to take client.automotive response hashes and return a single array in order, this takes the iso-tp packets and assembles them in order, strips out the iso-tp/uds related info and returns just the data section as an array
hash	shows the vehicles current data
array	get all supported pids for current data
hash	mode $01 pid $01 gets and parses the monitor status
hash	gets the engine coolant temprature in both celcious and fahrenheit
hash	gets the engine's current rpms
hash	gets the engine's current vehicle speed in km/h and mph
string	return which obd standard this bus confirms to.  this method could utilizes bitmasks but currently creates a human readable string instead.  this may change in the future.
hash	shows the vehicles freeze frame data, use the same pids as supported from mode $01 #get_current_data_pids.  you must specify which freeze frame you want to recall data from.
array	retrieves the diagnostic trouble codes (dtcs)
hash	clears the dtcs and resets the mil light back to the off position
array	retrieves the frozen diagnostic trouble codes (dtcs)
hash	requests diagnostics 0x09 vehicle information for any given mode no formatting is done on the response
array	get all the supported pids by mode 0x09 vehicle info returns them as an array of ints
string	requests a vin and formats the response as ascii
string	gets the vehicle calibration id and returns it as an ascii string
string	get the vehicles ecu name pid 0x0a
hash	set the diagnostic session code
hash	issues a reset of the ecu
array	reads data from a memory region given a lookup id value
hash	retrieves the security access token
hash	sends a security access tokens response to the seed request
hash	writes data by id
hash	executes a builtin routine. routines are a series of pre-programmed acutions setup by the manufacturer.  param id [array] 2 byte array for the routine identifier
hash	sends a testpresent message.  this message maintains previously set dscs or security access levels so they don't timeout and revert back to normal.  testerpresent is typically transmitted on 2-3 second intervals
void	initialize the module paths
array	extract directories `engine.paths['modules']` from `engine`.
string	deploys a bean shell script with a set of jboss default packages
boolean	deploys a bean shell script using the specified package
string	greps the output of another console command, usage is similar the shell grep command grep [options] pattern other_cmd [other command's args], similar to the shell's grep [options] pattern file however it also includes -k to keep lines and -s to skip lines.  grep -k 5 is useful for keeping table headers
boolean	determines if we're a metasploit pro/community/express installation or a tarball/git checkout  xxx this will need to be update when we embed framework as a gem in commercial packages
array	returns an array of lines at the provided line number plus any before and/or after lines requested from all_lines by supplying the +before+ and/or +after+ parameters which are always positive
string	returns the module document in html form.
string	returns the css code for the html document.
string	returns the html document.
string	returns the markdown format for pull requests.
string	returns the markdown format for module datastore options.
string	returns the markdown format for module description.
string	returns the markdown format for module authors.
string	returns the markdown format for module targets.
string	returns the markdown format for module references.
string	returns the markdown format for module platforms.
string	returns the markdown format for module rank.
string	returns the markdown format for module side effects.
string	returns the markdown format for module reliability.
string	returns a parsed demo erb template.
string	returns a demo template suitable for the module. currently supported templates: browserexploitserver modules, httpserver modules, local exploit modules, post modules, payloads, auxiliary scanner modules.
hash	returns the post data for a wordpress login request
hash	returns the post data for a wordpress register request
string	helper method to post a comment to wordpress
integer	helper method for bruteforcing a valid post id
string	helper method to check if a post is valid an has comments enabled
string	helper method parse a location header and returns only the path and query. returns nil on error
string	helper method to retrieve a valid plugin upload nonce.
string	extracts the wordpress version information from various sources
string	generates the xml post body for a xmlrpc call
string	a string suitable for displaying to the user
boolean	parse +arg+ into a {rex::socket::rangewalker} and append the result into +host_ranges+
string	the php include url (pre-encoded)  does not take ssl into account.  for the reasoning behind this, see {#exploit}.
array	check named pipes, returning the first optionally
boolean	parse +arg+ into a {rex::socket::rangewalker} and append the result into +host_ranges+
hash	sends a registry lookup call to the rmi endpoint. simulates a call to the java java/rmi/registry/registryimpl_stub#lookup() method.
array	sends a registry list call to the rmi endpoint. simulates a call to the java java/rmi/registry/registryimpl_stub#list() method
integer	calculates the hash to make rmi calls for the java/rmi/registry/registryimpl_stub interface
hash	sends a call to the jmxrmi endpoint to retrieve an mbean instance. simulates a call to the java javax/management/remote/rmi/rmiserver_stub#newclient() method.
integer	extracts the logon time from a kerberos as response
string	generates a bean shell script.
string	generate a stager jsp to write a war file to the deploy/ directory. this is used to bypass the size limit for get/head requests.
string	generate a bean shell script which creates files inside the jboss's deploy   directory.
string	generate a bean shell script to delete files from the jboss's /deploy   directory.
string	returns the custom 404 url set by the user
string	returns the resource (uri) to the module to allow access to on_request_exploit
string	returns the absolute url to the module's resource that points to on_request_exploit
hash	returns a hash of recognizable requirements
array	returns an array of items that do not meet the requirements
string	returns the code for client-side detection
string	generates a target-specific payload, should be called by the module
integer	inject the given shellcode into a target process.
array	inject a reflectively-injectable dll into the given process using reflective injection.
array	inject a reflectively-injectable dll into the given process using reflective injection.
array	builds an an array of arguments o build a call to javax/management/remote/rmi/rmiconnectionimpl_stub#invoke()
hash	storage backend for browser profiles
integer	handles an smb_com_close command, used by the client to close an instance of an object associated with a valid fid.
integer	builds and sends an smb_com_close response.
hash	returns pull requests associated with a particular metasploit module.
string	returns the normalized module full name.
string	returns the author for the commit.
hash	returns unique pull requests for a collection of commits.
hash	returns unique pull requests for a commit.
hash	parses a java/rmi/registry/registryimpl_stub#lookup() return value to find out the remote reference information.
array	parses a java/rmi/registry/registryimpl_stub#list() return value to find out the list of names registered.
integer	handles an smb_com_transaction2 command, used to provide support for a richer set of server-side file system handling.
integer	builds and sends an smb_com_transaction2 response.
string	converts the path to ascii from unicode and normalizes.
string	expands a path with wildcards, and returns the set of matching files.
hash	parses a javax/management/remote/rmi/rmiserver_stub#newclient() return value to find out the remote reference information.
boolean	validates success of a function call
array	returns a list of supported usb indexes by relay
boolean	sets the frequency
boolean	sets the mode tx, rx or idle
array	gets supported modulations
boolean	sets the modulation
boolean	sets packet's fixed length
boolean	sets packet's variable length
boolean	transmits a rf packet.  all data is base64 encoded before transmition to relay
string	receive a packet
boolean	enable packet crc
boolean	enable manchester encoding
boolean	sets the channel
boolean	sets the channel bandwidth
boolean	calculates the appropriate exponent and mantissa and updates the correct registers chanspc is in khz.  if you prefer, you may set the chanspc_m and chanspc_e settings directly. only use one or the other:      * chanspc      * chanspc_m and chanspc_e
boolean	sets the baud rate
boolean	sets the deviation
boolean	sets sync word
boolean	sets the sync mode
boolean	sets the number of preamble bits
boolean	sets the power to max.  ensure you set the frequency first before using this
boolean	sets lowball.  ensure you set the frequency first before using this
boolean	set power level
void	imports `mdm::note` objects from the xml element.
void	imports web_form element using msf::dbmanager#report_web_form.
void	imports web_page element using msf::dbmanager#report_web_page.
void	imports web_vuln element using msf::dbmanager#report_web_vuln.
void	imports web_form, web_page, or web_vuln element using msf::dbmanager#report_web_form, msf::dbmanager#report_web_page, and msf::dbmanager#report_web_vuln, respectively.  {msf::dbmanager}.
integer	handles an smb_com_negotiate command, used by the client to initiate an smb connection between the client and the server.
integer	builds and sends an smb_com_close response.
integer	handles an smb_com_read_andx command, used by the client to read data from a file.
integer	builds and sends an smb_com_nt_create_andx response.
string	sends the +js+ code to the remote session, which executes it in firefox's privileged javascript context. the code will be obfuscated if the jsobfuscate datastore option is set to 1 or higher.
string	puts the shellcode into memory, adds x flag, and calls it the js function throws on error
string	for a javascript payload, this simply returns the payload source for a native payload, this calls the correct methods to alloc rwx memory and execute shellcode
array	builds an an array of arguments o build a call to javax/management/remote/rmi/rmiconnectionimpl_stub#getobjectinstance()
array	builds an an array of arguments o build a call to javax/management/remote/rmi/rmiconnectionimpl_stub#creatembean()
integer	handles an smb_com_nt_create_andx command, used by the client to create and open a new file.
integer	builds and sends an smb_com_nt_create_andx response.
integer	handles a trans2_find_first2 transaction request with smb_find_file_both_directory_info information level.
integer	handles a trans2_find_first2 transaction request with smb_find_file_names_info information level.
integer	handles a trans2_find_first2 transaction request with smb_find_file_full_directory_info information level.
integer	builds and sends an trans2_find_first2 response with smb_find_file_both_directory_info information level.
integer	builds and sends an trans2_find_first2 response with smb_find_file_names_info information level.
integer	builds and sends an trans2_find_first2 response with smb_find_file_full_directory_info information level.
integer	handles a trans2_query_file_information transaction request with smb_query_file_basic_info information level.
integer	handles a trans2_query_file_information transaction request with smb_query_file_standard_info information level.
integer	handles a trans2_query_path_information transaction request with smb_query_file_basic_info information level.
integer	handles a trans2_query_path_information transaction request with smb_query_file_standard_info information level.
integer	handles a trans2_query_path_information transaction request with smb_query_file_network_info information level.
integer	builds and sends an trans2_query_path_information response with smb_query_file_basic_info information level.
integer	builds and sends an trans2_query_path_information response with smb_query_file_standard_info information level.
integer	builds and sends an trans2_query_path_information response with smb_query_file_network_info information level.
hash	validates the user associated with the api token.
void	import credentials given a path to a valid manifest file
void	import credentials given a path to a valid manifest file
integer	handles an smb_com_session_setup_andx command, used by the client to configure an smb session.
integer	builds and sends an smb_com_nt_create_andx response.
integer	handles an trans2_find_first2 subcommand, used to begin a search for file(s) within a directory or for a directory.
string	generate a stager jsp to write the second stager to the deploy/management directory. it is only used with head/get requests to overcome the size limit in those requests
string	generate a stager jsp to write a war file to the deploy/ directory. this is used to bypass the size limit for get/head requests.
hash	validates the user associated with the api token is an admin.
integer	handles an trans2_query_file_information subcommand, used to get information about an specific file or directory, using its fid.
integer	handles an trans2_query_path_information subcommand, used to get information about an specific file or directory, using its path.
void	tries to require `name`.  if a `loaderror` occurs, then `without_warning` is printed to standard error using `kernel#warn`, along with instructions for reinstalling the bundle.  if a `loaderror` does not occur, then `with_block` is called.
void	tries to `require 'active_record/railtie'` to define the activerecord rails initializers and rake tasks.
void	tries to `require 'metasploit/credential/creation'` and include it in this `class` or `module`.
void	tries to require gems necessary for using a database with the framework.
string	determines the git hash for this source tree
string	the private credential component (e.g. username)
string	the type of private credential this object represents, e.g. a password or an ntlm hash.
string	the public credential component (e.g. password)
hash	this method takes all of the attributes of the {credential} and spits them out in a hash compatible with the create_credential calls.
void	starts this command.
string	returns the normalized c code (with headers).
void	adds actions to `spec` task so that `rake spec` fails if any of the following:  # `log/leaked-constants.log` exists after printing out the leaked constants. # each.configured! is unnecessary in `spec/spec_helper.rb` and should be removed.
integer	yields each child_constant_name under {parent_constant}.
string	returns the binary of a compiled source.
integer	saves the compiled code as a file. this is basically a wrapper of #self.compile.
string	returns randomized c source code.
string	returns the binary of a randomized and compiled source code.
integer	saves the randomized compiled code as a file. this is basically a wrapper for #self.compile_random_c
hash	this method opens a socket to the target db2 server. it then sends a client probe on that socket to get information back on the server.
string	this method attempts to gather proof that we successfuly logged in.
string	combine the base uri with the target uri in a sane fashion
string	the snmp version to scan
string	the snmp version to scan
integer	the number of logins to try in each batch
integer	the number of logins to try in each batch
array	this method returns an array of versions to scan
void	attempt to login with every {credential credential} in # #cred_details.
void	configures `before(:suite)` and `after(:suite)` callback to detect thread leaks.
void	translates {#options} to the `application`'s config
void	sets the `rails_env` environment variable.  1. if the -e/--environment option is given, then its value is used. 2. the default value, 'production', is used.
void	configures after(:each) callback for rspe to fail example if leaked constants.
void	adds action to `spec` task so that `rake spec` fails if configured! is unnecessary in `spec/spec_helper.rb` and should be removed
boolean	checks if the target is caidao backdoor. the login module should call this.
hash	actually doing the login. called by #attempt_login
boolean	checks if the target is a tenable nessus server.
hash	actually doing the login. called by #attempt_login
hash	this method takes all the data inside the result object and spits out a hash compatible with #create_credential and #create_credential_login.
hash	tries to login to zabbix
void	logs leaked constants to log_pathname and prints `message` to stderr.
void	adds action to `spec` task so that `rake spec` fails if `log/leaked-constants.log` exists after printing out the leaked constants.
string	returns the header source code.
array	additional privates to be combined
array	additional public to be combined
boolean	whether each username should be tried with a blank password
string	path to a file containing passwords, one per line
boolean	whether each username should be tried as a password for that user
string	path to a file containing usernames, one per line
string	path to a file containing usernames and passwords separated by a space, one pair per line
void	adds a string as an addition private credential to be combined in the collection.
void	adds a string as an addition public credential to be combined in the collection.
void	combines all the provided credential sources into a stream of {credential} objects, yielding them one at a time
void	adds action to `spec` tasks so that `rake spec` fails if  `log/untested-payloads.log` exists and prints out untested payloads from that log to stderr.  # @example using `metasploit::framework::spec::untestedpayloads.define_task` with 'payload can be instantiated' shared examples  and 'untested payloads' shared context   # rakefile   require 'metasploit/framework/spec/untested_payloads'    # defined spec task with rspec-rails   my::application.load_tasks   # extends spec task to fail when there are untested payloads   metasploit::framework::spec::untestedpayloads.define_task    # spec/modules/payloads_spec.rb   require 'spec_helper'    describe 'modules/payloads' do      modules_pathname = pathname.new(__file__).parent.parent.parent.join('modules')       include_context 'untested payloads', modules_pathname: modules_pathname       context 'my/staged/payload/handler' do        it_should_behave_like 'payload can be instantiated',                              ancestor_reference_names: [                                'stages/my/payload',                                'stagers/my/payload/handler'                              ],                              modules_pathname: modules_pathname,                              reference_name: 'my/staged/payload/handler'      end   end
hash	adds a valid workspace value to the opts hash before sending on to the data layer.
hash	tries to login to glassfish version 2
hash	tries to login to glassfish version 9
hash	tries to login to glassfish version 3 or 4 (as of now it's the latest)
hash	tries to login to chef webui
boolean	checks if the target is direct admin web control panel. the login module should call this.
string	returns the latest sid from directadmin control panel
hash	actually doing the login. called by #attempt_login
string	this attribute allows the user to specify a cracker binary to use. if not supplied, the cracker will search the path for a suitable john or hashcat binary and finally fall back to the pre-compiled john versions shipped with metasploit.
string	if the cracker type is john, this format will automatically be translated to the hashcat equivalent via jtr_format_to_hashcat_format
string	if the cracker type is john, the amount of forks to specify
string	this method takes a {framework.db.cred.private.jtr_format} (string), and returns the string number associated to the hashcat format  @param[string] a jtr_format string
string	this method follows a decision tree to determine the path to the cracker binary we should use.
void	this method runs the command from {#crack_command} and yields each line of output.
array	this method builds an array for the command to actually run the cracker. it builds the command from all of the attributes on the class.
array	this method builds an array for the command to actually run the cracker. it builds the command from all of the attributes on the class.
array	this runs the show command in john and yields cracked passwords.
string	this method returns the path to a default john.conf file.
string	this method returns the path to a default john.pot file.
array	this method builds the command to show the cracked passwords.
void	this method takes a word, and appends each word from the appenders list and yields the new words.
void	this method checks all the attributes set on the object and calls the appropriate enumerators for each option and yields the results back up the call-chain.
void	this method searches all saved credentials in the database and yields all passwords, usernames, and realm names it finds.
void	this method reads the file provided as custom_wordlist and yields the expanded form of each word in the list.
void	this method searches the notes in the current workspace for db instance names, database names, table names, and column names gathered from live database servers. it yields each one that it finds.
void	this method yields expanded words taken from the default john wordlist that we ship in the data directory.
void	this method yields the expanded words out of all the hostnames found in the current workspace.
void	this method checks to see if the user asked for mutations. if mutations have been enabled, then it creates all the unique mutations and yields each result.
void	this method takes a word, and prepends each word from the prependers list and yields the new words.
void	this method reads the common_roots.txt wordlist expands any words in the list and yields them.
void	this method wraps around all the other enumerators. it processes all of the options and yields each word generated by the options selected.
void	this method takes a string and splits it on non-word characters and the underscore. it does this to find likely distinct words in the string. it then yields each 'word' found this way.
array	this method takes a word and applies various mutation rules to that word and returns an array of all the mutated forms.
void	raise an exception if the attributes are not valid.
string	this method returns the path to the common_roots.txt wordlist
string	this method returns the path to the passwords.lst wordlist
string	path to a file containing passwords, one per line
void	combines all the provided credential sources into a stream of {credential} objects, yielding them one at a time
string	this method generates the xml data for the rpc login request
string	select the correct path for get request based on the options parameters provided. if 'id' is present, the user is requesting a single record and should use api/<version>/<resource>/id path.
string	checks if the target is bavision camera's web server. the login module should call this.
integer	returns a random number.
string	returns a random string.
string	this method takes a {framework.db.cred}, and normalizes it to the string format jtr is expecting.
string	this method takes a {framework.db.cred}, and normalizes it to the string format hashcat is expecting. https://hashcat.net/wiki/doku.php?id=example_hashes
array	returns the xml data that is used for the login.
void	sends an http request to wordpress.
boolean	checks if the target is symantec web gateway. the login module should call this.
string	returns the latest sid from symantec web gateway.
hash	actually doing the login. called by #attempt_login
string	returns function arguments as a string.
string	returns the arguments (in string) for function declaration.
array	returns a random statement from the code factory, excluding: * the base class * fakefunction class * fakefunctioncollection class
array	this function is kind of dangerous, because it could cause an infinitely loop by accident when random functions call each other.
boolean	checks if the target is manageengine dekstop central.
string	returns the latest sid from msp
hash	returns the hidden inputs
hash	returns all the items needed to login
hash	actually doing the login. called by #attempt_login
hash	converts an http response to a hash
string	processes a base64 encoded file included in a json request. saves the file in the location specified in the parameter.
string	returns an encrypted string using aes256-cbc.
string	returns a decrypted string using aes256-cbc.
string	reads a packet into the raw string format
string	convert data to little endian unsigned short
array	convert data from little endian unsigned short
string	convert data to little endian unsigned int
array	convert data from little endian unsigned int
string	convert data to little endian unsigned long
array	convert data from little endian unsigned long
string	convert data to big endian unsigned short
array	convert data from big endian unsigned short
string	convert data to big endian unsigned int
array	convert data from big endian unsigned int
string	convert data to big endian unsigned long
array	convert data from big endian unsigned long
array	find entries in cache, substituting names for '*' in return
void	sends a media text to multiple recipients.
void	begin a pjl job
void	end a pjl job
string	send an info request and read the response
string	get version information
string	get environment variables
string	list volumes
string	get the ready message
void	set the ready message
void	initialize a volume
boolean	query a file
string	list a directory
string	download a file
boolean	upload a file or write string data to remote path
boolean	delete a file
void	sends a text to multiple recipients.
void	processes a resource script file for the console.
void	send an http request to the server
string	converts username and password into the http basic authorization string.
string	more readable inspect that only shows the url and resources
string	get this message as a string
string	provides current proxy setting if configured
hash	returns a parsed json document. instead of using regexes to parse the json body, you should use this.
string	get this pong as a string
string	decodes an on-the-wire representation of a kademlia peer to its 16-character hex equivalent
array	decodes a steam response message.
string	encodes a steam message.
string	builds an a2s_info message
hash	decodes an a2s_info response message
string	reads the message id from the io
string	encodes the message_id field
string	encodes the address field
string	reads the stream id from the io
string	encodes the stream_id field
integer	sends a kerberos request through the connection
integer	sends a kerberos request over a tcp connection
string	get this message as a string
string	encodes the rex::proto::kerberos::pac::type
string	encodes the number of buffers contained in the pac
string	encodes the pac version
string	encodes the pac_info_buffer data
string	calculates the checksum for the pac data
string	returns the raw mms message
string	returns the loaded file in base64 format
string	returns the raw mms message
string	reads the stream id from the io
string	reads the unique identifier from the io
string	encodes the stream_id field
string	encodes the unique_identifier field
array	retrieves the element instance fields
string	encodes the rex::proto::rmi::model::element into an string.
integer	reads a byte from an io
integer	reads a two bytes short from an io
integer	reads a four bytes int from an io
integer	reads a 8 bytes long from an io
string	reads an string from an io
string	returns the raw sms message
string	reads the stream id from the io
string	encodes the stream_id field
string	encodes the rex::proto::rmi::model::calldata into an string.
integer	reads the object number from the io
integer	reads the operation from the io
integer	reads the hash from the io
string	encodes the code field
string	encodes the uid field
string	encodes the operation field
string	encodes the hash field
integer	returns the windows error code in numeric format
string	calls createservicew() to create a system service.  returns a handle to the service on success, or nil.
integer	calls changeserviceconfig2() to change the service description.
integer	calls closehandle() to close a handle.
string	calls openservicew to obtain a handle to an existing service.
integer	calls startservice() on a handle to an existing service in order to start it.  returns true on success, or false.
integer	stops a running service.
integer	controls an existing service.
integer	calls deleteservice() to delete a service.
integer	calls queryservicestatus() to query the status of a service.
array	retrieves the element instance fields
string	encodes the rex::proto::kerberos::model::apreq into an asn.1 string
string	encodes the ticket field
string	encodes the authenticator field
string	encodes the sname field
string	encodes the enc_part field
integer	decodes the tkt_vno from an openssl::asn1::asn1data
string	reads the stream id from the io
string	encodes the stream_id field
string	encodes the return_value field
array	retrieves the element instance fields
integer	reads the end point identifier address length from the io
string	reads the end point address from the io
integer	reads the end point port from the io
string	encodes the length field
string	encodes the address field
string	encodes the port field
string	reads the stream id from the io
integer	reads the end point identifier address length from the io
string	reads the end point address from the io
integer	reads the end point port from the io
string	encodes the stream_id field
string	encodes the length field
string	encodes the address field
string	encodes the port field
string	encodes the rex::proto::rmi::model::returnvalue into an string.
string	the object/exception class of the returned value
string	reads the return code from the io
string	encodes the code field
string	encodes the uid field
string	encodes a rex::proto::kerberos::model::checksum into an asn.1 string
string	encodes the rex::proto::kerberos::pac::logoninfo
string	encodes the netlogon type
string	encodes the logon_time attribute
string	encodes the logoff time (constant)
string	encodes the kickoff time (constant)
string	encodes the password_last_set (constant)
string	encodes the password_can_change (constant)
string	encodes the password_must_change (constant)
string	encodes the effective_name id field
string	encodes the effective_name info field
string	encodes the full_name id
string	encodes the full_name_info (constant)
string	encodes the logon_script id
string	encodes the logon_script info (constant)
string	encodes the profile_path id
string	encodes the profile_path info (constant)
string	encodes the home_directory id
string	encodes the home_directory info (constant)
string	encodes hte home_directory_drive id
string	encodes the home_directory_drive info (constant)
string	encodes the logon_count (constant)
string	encodes the bad_password_count (constant)
string	encodes the user_id field
string	encodes the primary_group_id field
string	encodes the group_count field
string	encodes the group_ids id
string	encodes the group_ids info
string	encodes the user_flags (constant)
string	encodes the user_session_key (constant)
string	encodes the logon_server id
string	encodes the logon_server info (constant)
string	encodes the logon_domain_name id
string	encodes the logon_domain_name info field
string	encodes the logon_domain_id id
string	encodes the logon_domain_id info field
string	encodes the reserved_one (constant)
string	encodes the user_account_control (constant)
string	encodes the reserved_three (constant)
string	encodes the sid_count (constant)
string	encodes the extra_sids (constant)
string	encodes the resource_group_domain_sid (constant)
string	encodes the resource_group_count (constant)
string	encodes the resource_group_ids (constant)
string	reads the signature from the io
integer	reads the version from the io
integer	reads the protocol from the io
string	encodes the signature field
string	encodes the version field
string	encodes the protocol field
string	decrypts the cipher using rc4-hmac schema
string	encrypts the cipher using rc4-hmac schema
integer	decodes the pvno from an openssl::asn1::asn1data
integer	decodes the msg_type from an openssl::asn1::asn1data
integer	decodes the cusec field
integer	decodes the susec field
integer	decodes the error_code field
string	decodes the crealm field
string	decodes the realm field
string	decodes the e_data from an openssl::asn1::asn1data
string	encodes the rex::proto::kerberos::pac::clientinfo
string	encodes the client_id attribute
string	encodes the name attribute
string	encodes the rex::proto::kerberos::model::kdcrequest into an asn.1 string
string	encodes the pa_data field
string	encodes the req_body field
integer	decodes the pvno from an openssl::asn1::asn1data
integer	decodes the msg_type from an openssl::asn1::asn1data
hash	map "random" uris to static strings, allowing us to randomize the uri sent in the first request.
string	create a uri that matches the specified checksum and payload uuid
string	create an arbitrary length uri that matches a given checksum
integer	return the numerical checksum for a given mode symbol
integer	decodes the pvno from an openssl::asn1::asn1data
integer	decodes the msg_type from an openssl::asn1::asn1data
string	decodes the crealm field
integer	decodes the key_type from an openssl::asn1::asn1data
integer	reads the number from the io
integer	reads the time from the io
integer	reads the count from the io
string	encodes the number field
string	encodes the time field
string	encodes the count field
void	send a ping to the server.  our 'ping' is a check for eof on channel id 0. this method has no side effects and always returns an answer (regardless of the existence of chan 0), which is all that's needed for a liveness check. the answer itself is unimportant and is ignored.
string	encodes the rex::proto::kerberos::model::authenticator into an asn.1 string
string	encrypts the rex::proto::kerberos::model::authenticator
string	encodes the cname field
string	encodes the checksum field
string	encodes the subkey field
string	encodes a rex::proto::kerberos::model::preauthdata into an asn.1 string
integer	decodes the type from an openssl::asn1::asn1data
integer	decodes the value from an openssl::asn1::asn1data
string	encodes the rex::proto::kerberos::pac::serverchecksum
string	encodes a rex::proto::kerberos::model::encrypteddata into an asn.1 string
string	decrypts the cipher with etype encryption schema
integer	decodes the etype from an openssl::asn1::asn1data
integer	decodes the kvno from an openssl::asn1::asn1data
string	encodes a rex::proto::kerberos::model::encryptionkey into an asn.1 string
integer	decodes the type from an openssl::asn1::asn1data
string	decodes the value from an openssl::asn1::asn1data
string	encodes a rex::proto::kerberos::model::principalname into an asn.1 string
integer	decodes the name_type from an openssl::asn1::asn1data
array	decodes the name_string from an openssl::asn1::asn1data
string	encodes the rex::proto::kerberos::credentialcache::time into an string
string	encodes the auth_time field
string	encodes the start_time field
string	encodes the end_time field
string	encodes the renew_time field
string	encodes the rex::proto::kerberos::pac::pacprivsvrchecksum
string	list available kerberos tickets.
void	use the given ticket in the current session.
void	purge any kerberos tickets that have been added to the current session.
hash	access and parse a set of wifi profiles using the given interfaces list, which contains the list of profile xml files on the target.
string	encodes the rex::proto::kerberos::credentialcache::cache into an string
string	encodes the version field
string	encodes the headers field
string	encodes the primary_principal field
string	encodes the credentials field
integer	requested when the ticket was issued
integer	decodes the nonce field
integer	decodes the flags field
string	decodes the srealm field
string	encodes the rex::proto::kerberos::model::kdcrequestbody into an asn.1 string
string	makes a checksum from the rex::proto::kerberos::model::kdcrequestbody
string	encodes the cname
string	encodes the sname
string	encodes the enc_auth_data
integer	decodes the options field
string	decodes the realm field
integer	decodes the nonce field
string	retrieves the default zigbee device id
array	gets supported zigbee devices
hash	receives data from transceiver
object	arbitrary argument to {#completion_routine}
object	arbitrary argument to {#completion_routine}
void	notifies the waiter that the supplied response packet has arrived.
array	retrieves the element instance fields
string	encodes a rex::proto::kerberos::model::authorizationdata into an asn.1 string
string	encrypts the rex::proto::kerberos::model::authorizationdata
string	encodes the rex::proto::kerberos::credentialcache::keyblock into an string
string	encodes the key_type field
string	encodes the e_type field
string	encodes the key_value field
string	encodes the rex::proto::kerberos::credentialcache::principal into an string
string	encodes the name_type field
string	encodes the realm field
string	encodes the components field
string	encodes a rex::proto::kerberos::model::preauthpacrequest into an asn.1 string
boolean	decodes the value from an openssl::asn1::asn1data
hash	perform a generic wmi query against the target machine.
string	encodes the rex::proto::kerberos::credentialcache::credential into an string
string	encodes the client field
string	encodes the server field
string	encodes the key field
string	encodes the time field
string	encodes the is_skey field
string	encodes the tkt_flags field
string	encodes the addrs field
string	encodes the auth_data field
string	encodes the ticket field
string	encodes the second_ticket field
hash	perform a generic domain query against adsi.
hash	convert a single adsi result value into a usable   value that also describes its type.
string	encodes a rex::proto::kerberos::model::preauthenctimestamp into an asn.1 string
string	encrypts the rex::proto::kerberos::model::preauthenctimestamp
boolean	decodes the decode_pa_time_stamp from an openssl::asn1::asn1data
integer	decodes the pausec from an openssl::asn1::asn1data
hash	checks for errors in iso-tp responses.  if an error is present document the error with an additional "error" => { "acronymn" => "definition" }
array	pass an array of bytes and return an array of ascii byte representation
array	pad the end of a packet with a set byte until it is 8 bytes long
boolean	checks if a key exists on the target registry
integer	returns the integer value associated with the supplied registry value type (like reg_sz).
string	returns a browser path that supports webrtc
void	migrates the server to the supplied process identifier.
void	invoke the password scraping routine on the target.
string	helper function to convert a potentially blank value to hex and have the outer spaces stripped
array	gets supported usb indexes
array	retrieves a list of supported modulations
hash	receives a packet
array	validates an array of pids against the running processes on target host behavior can be controlled to allow/deny proces 0 and the session's process the pids: - are converted to integers - have had pid 0 removed unless allow_pid_0 - have had current session pid removed unless allow_session_pid (to protect the session) - have redundant entries removed
boolean	suspends or resumes a list of one or more pids  +args+ can optionally be -c to continue on error or -r to resume instead of suspend, followed by a list of one or more valid pids
array	gets the next set of arguments when parsing command options  *note:* this will modify the provided argument list
string	gets the next argument when parsing command options  *note:* this will modify the provided argument list
string	converts a value to a wiki link
array	dynamically determine the types of requests that are supported based on methods prefixed with "parse_args".
hash	return the parent's opts.
string	the box name. this is the logical name used when adding the box.
string	the version of this box.
hash	this is the metadata for the box. this is read from the "metadata.json" file that all boxes require.
string	this is the url to the version info and other metadata for this box.
boolean	this repackages this box and outputs it to the given path.
integer	this is the exit code that should be used when exiting from this exception.
object	configuration for the machine.
object	configuration for the machine.
string	id of the machine. this id comes from the provider and is not guaranteed to be of any particular format except that it is a string.
object	the provider backing this machine.
object	the provider-specific configuration for this machine.
object	the provider-specific configuration for this machine.
hash	the options given to the provider when registering the plugin.
hash	this calls a raw callable in the proper context of the machine using the middleware stack.
object	returns a communication object for executing commands on the remote machine. note that the _exact_ semantics of this are up to the communication provider itself. despite this, the semantics are expected to be consistent across operating systems. for example, all linux-based systems should have similar communication (usually a shell). all windows systems should have similar communication as well. therefore, prior to communicating with the machine, users of this method are expected to check the guest os to determine their behavior.  this method will _always_ return some valid communication object. the `ready?` api can be used on the object to check if communication is actually ready.
string	returns the uuid associated with this machine in the machine index. we only have a uuid if an id has been set.
string	this returns a clean inspect value so that printing the value via a pretty print (`p`) results in a readable value.
hash	this returns the ssh info for accessing this machine. this ssh info is queried from the underlying provider. this method returns `nil` if the machine is not ready for ssh communication.  the structure of the resulting hash is guaranteed to contain the following structure, although it may return other keys as well not documented here:      {       host: "1.2.3.4",       port: "22",       username: "mitchellh",       private_key_path: "/path/to/my/key"     }  note that vagrant makes no guarantee that this info works or is correct. this is simply the data that the provider gives us or that is configured via a vagrantfile. it is still possible after this point when attempting to connect via ssh to get authentication errors.
string	returns the user id that created this machine. this is specific to the host machine that this was created on.
string	reads data from an io object while it can, returning the data it reads. when it encounters a case when it can't read anymore, it returns the data.
array	returns an array populated with the keys of this object.
integer	return the number of elements in this registry.
integer	return the number of elements in this registry.
string	cross-platform way of finding an executable in the path.    which('ruby') #=> /usr/bin/ruby  this code is adapted from the following post by mislav:   http://stackoverflow.com/questions/2108727/which-in-ruby-checking-if-program-exists-in-path-from-ruby
string	return a human-friendly string for pretty printed or inspected instances.
string	the root path is the path where the top-most (loaded last) vagrantfile resides. it can be considered the project root for this environment.
string	attempt to guess the configured provider in use. will fallback to the default provider if an explicit provider name is not provided. this can be pretty error prone, but is used during initial environment setup to allow loading plugins so it doesn't need to be perfect
hash	check for any local plugins defined within the vagrantfile. if found, validate they are available. if they are not available, request to install them, or raise an exception
string	the name that the box should be if it is added.
string	the name that the box should be if it is added.
string	the long-form human-readable description of a box.
string	the long-form human-readable description of a box.
string	the version that this version object represents.
string	the version that this version object represents.
string	the name of the provider.
string	the name of the provider.
string	the url of the box.
string	the url of the box.
string	the checksum value for this box, if any.
string	the checksum value for this box, if any.
string	the type of checksum (if any) associated with this provider.
string	the type of checksum (if any) associated with this provider.
integer	a helper that converts a shortcut string to its bytes representation. the expected format of `str` is essentially: "<number>xx" where `xx` is shorthand for kb, mb, gb, tb, pb, or eb. for example, 50 megabytes:  str = "50mb"
object	this loads the configuration sources in the given order and returns an actual configuration object that is ready to be used.
boolean	deletes a machine by uuid.  the machine being deleted with this uuid must either be locked by this index or must be unlocked.
hash	finds a machine where the uuid is prefixed by the given string.
string	the unique id for this entry. this is _not_ the id for the machine itself (which is provider-specific and in the data directory).
string	the name of the machine.
string	the name of the machine.
string	the name of the provider.
string	the name of the provider.
string	the last known state of this machine.
string	the last known state of this machine.
array	the valid vagrantfile filenames for this environment.
array	the valid vagrantfile filenames for this environment.
hash	extra data to store with the index entry. this can be anything and is treated like a general global state bag.
hash	extra data to store with the index entry. this can be anything and is treated like a general global state bag.
string	short description for this state.
string	long description for this state.
string	this takes any path and converts it from a windows path to a cygwin style path.
string	this takes any path and converts it from a windows path to a msys style path.
string	this takes any path and converts it to a full-length windows path on windows machines in cygwin.
string	converts a given path to unc format by adding a prefix and converting slashes.
string	compute the path to rootfs of currently active wsl.
string	convert a wsl path to the local windows path. this is useful for conversion when calling out to windows executables from the wsl
string	takes a windows path and formats it to the 'unix' style (i.e. `/cygdrive/c` or `/c/`)
string	automatically convert a given path to a windows path. will only be applied if running on a windows host. if running on windows host within the wsl, the actual windows path will be returned.
array	get list of local mount paths that are drvfs file systems
string	fetch the windows username currently in use
string	fetch the windows user home directory
string	fetch the windows user local app data directory
object	returns the presence of the object. if the object is {present?}, it is returned. otherwise `false` is returned.
array	this is the stack of middlewares added. this should not be used directly.
integer	returns the numeric index for the given middleware object.
object	converts the builder stack to a runnable action sequence.
array	this returns an array of all the boxes on the system, given by their name and their provider.
string	returns the directory name for the box of the given name.
object	this is a helper that makes sure that our temporary directories are cleaned up no matter what.
hash	this validates the configuration and returns a hash of error messages by section. if there are no errors, an empty hash is returned.
hash	this merges two error hashes from validate methods.
hash	enable global plugins
hash	enable environment local plugins
hash	this returns the list of plugins that should be enabled.
string	returns the path to the embedded directory of the vagrant installer, if there is one (if we're running in an installer).
string	the current log level for vagrant
string	returns the url prefix to the server.
boolean	this allows control over dependency resolution when installing plugins into vagrant. when true, dependency libraries that vagrant core relies upon will be hard constraints.
boolean	use ruby resolv in place of libc
hash	this allows plugin developers to access the original environment before vagrant even ran. this is useful when shelling out, especially to other ruby processes.
boolean	apply any checksum validations based on provided options content
string	returns the network address of the given ip and subnet.
string	returns the version of powershell that is installed.
boolean	validates that powershell is installed, available, and at or above minimum required version
array	powerup the given command to perform privileged operations.
object	loads the configuration for the given proc and returns a configuration object.
object	loads the configuration for the given proc and returns a configuration object.
array	upgrade a v1 configuration to a v2 configuration. we do this by creating a v2 configuration, and calling "upgrade" on each of the v1 configurations, expecting them to set the right settings on the new root.
object	merge another configuration object into this one. this assumes that the other object is the same class as this one. this should not mutate this object, but instead should return a new, merged object.  the default implementation will simply iterate over the instance variables and merge them together, with this object overriding any conflicting instance variables of the older object. instance variables starting with "__" (double underscores) will be ignored. this lets you set some sort of instance-specific state on your configuration keys without them being merged together later.
string	set the name of the plugin. the moment that this is called, the plugin will be registered and available. before this is called, a plugin does not exist. the name must be unique among all installed plugins.
string	sets a human-friendly description of the plugin.
array	registers a callback to be called when a specific action sequence is run. this allows plugin authors to hook into things like vm bootup, vm provisioning, etc.
hash	returns the internal data associated with this plugin. this should not be called by the general public.
object	helper method that will set a value if a value is given, or otherwise return the already set value.
object	merge another configuration object into this one. this assumes that the other object is the same class as this one. this should not mutate this object, but instead should return a new, merged object.  the default implementation will simply iterate over the instance variables and merge them together, with this object overriding any conflicting instance variables of the older object. instance variables starting with "__" (double underscores) will be ignored. this lets you set some sort of instance-specific state on your configuration keys without them being merged together later.
hash	called after the configuration is finalized and loaded to validate this object.
array	this returns any automatically detected errors.
string	set the name of the plugin. the moment that this is called, the plugin will be registered and available. before this is called, a plugin does not exist. the name must be unique among all installed plugins.
string	sets a human-friendly description of the plugin.
array	registers a callback to be called when a specific action sequence is run. this allows plugin authors to hook into things like vm bootup, vm provisioning, etc.
hash	returns the internal data associated with this plugin. this should not be called by the general public.
object	helper method that will set a value if a value is given, or otherwise return the already set value.
hash	this returns a hash of installed plugins according to the state file. note that this may _not_ directly match over to actually installed gems.
array	returns the list of rubygems sources that will be searched for plugins.
array	this method will split the argv given into three parts: the flags to this command, the subcommand, and the flags to the subcommand. for example:      -v status -h -v  the above would yield 3 parts:      ["-v"]     "status"     ["-h", "-v"]  these parts are useful because the first is a list of arguments given to the current command, the second is a subcommand, and the third are the commands given to the subcommand.
hash	this returns all the registered communicators.
hash	this returns all the registered configuration classes.
hash	this returns all the registered configuration classes that were marked as "upgrade safe."
hash	this returns all the registered guests.
hash	this returns all registered host classes.
hash	this returns all registered providers.
string	this should return a brief (60 characters or less) synopsis of what this command does. it will be used in the output of the help.
array	this method will split the argv given into three parts: the flags to this command, the subcommand, and the flags to the subcommand. for example:      -v status -h -v  the above would yield 3 parts:      ["-v"]     "status"     ["-h", "-v"]  these parts are useful because the first is a list of arguments given to the current command, the second is a subcommand, and the third are the commands given to the subcommand.
array	this returns all the action hooks.
hash	this returns all the registered communicators.
hash	this returns all the registered configuration classes.
hash	this returns all the registered guests.
hash	this returns all the registered guest capabilities.
hash	this returns all the registered guests.
hash	this returns all the registered host capabilities.
hash	this returns all registered providers.
hash	this returns all the registered provider capabilities.
hash	this returns all the config classes for the various providers.
hash	this returns all registered provisioners.
array	filters triggers to be fired based on configured restraints
array	returns the features requested for the experimental flag
object	this should return an action callable for the given name.
hash	this should return a hash of information that explains how to ssh into the machine. if the machine is not at a point where ssh is even possible, then `nil` should be returned.  the general structure of this returned hash should be the following:      {       host: "1.2.3.4",       port: "22",       username: "mitchellh",       private_key_path: "/path/to/my/key"     }  **note:** vagrant only supports private key based authentication, mainly for the reason that there is no easy way to exec into an `ssh` prompt with a password, whereas we can pass a private key via commandline.
object	this should return an action callable for the given name.
hash	this should return a hash of information that explains how to ssh into the machine. if the machine is not at a point where ssh is even possible, then `nil` should be returned.  the general structure of this returned hash should be the following:      {       host: "1.2.3.4",       port: "22",       username: "mitchellh",       private_key_path: "/path/to/my/key"     }  **note:** vagrant only supports private key based authentication, mainly for the reason that there is no easy way to exec into an `ssh` prompt with a password, whereas we can pass a private key via commandline.
string	this calculates the checksum of the file and returns it as a string.
object	returns an empty configuration object. this can be any kind of object, since it is treated as an opaque value on the other side, used only for things like calling into {merge}.
object	loads the configuration for the given proc and returns a configuration object. the return value is treated as an opaque object, so it can be anything you'd like. the return value is the object that is passed into methods like {merge}, so it should be something you expect.
object	merges two configuration objects, returning the merged object. the values of `old` and `new` are the opaque objects returned by {load} or {init}.  once again, the return object is treated as an opaque value by the vagrant configuration loader, so it can be anything you'd like.
array	this is called if a previous version of configuration needs to be upgraded to this version. each version of configuration should know how to upgrade the version immediately prior to it. this should be a best effort upgrade that makes many assumptions. the goal is for this to work in almost every case, but perhaps with some warnings. the return value for this is a 3-tuple: `[object, warnings, errors]`, where `object` is the upgraded configuration object, `warnings` is an array of warning messages, and `errors` is an array of error messages.
hash	returns the download options for the download.
string	the path to the final output file.
integer	execute a command on the remote machine. the exact semantics of this method are up to the implementor, but in general the users of this class will expect this to be a shell.  this method gives you no way to write data back to the remote machine, so only execute commands that don't expect input.
boolean	wait_for_ready waits until the communicator is ready, blocking until then. it will wait up to the given duration or raise an exception if something goes wrong.
integer	execute a command on the remote machine. the exact semantics of this method are up to the implementor, but in general the users of this class will expect this to be a shell.  this method gives you no way to write data back to the remote machine, so only execute commands that don't expect input.
hash	result of check
boolean	display any alerts or version update information
string	renders the template using the class instance as the binding. because the renderer inherits from `openstruct`, additional view variables can be added like normal accessors.
string	renders a template, handling the template as a string, but otherwise acting the same way as {#render}.
string	returns the full path to the template, taking into account the gem directory and adding the `.erb` extension to the end.
string	attempt to remove detected credentials from string
string	detect urls and remove any embedded credentials
string	remove sensitive information from string
string	converts line endings to unix-style line endings in the given string.
string	the current string value. this is the value that is modified by the methods below.
hash	this finds the difference between two lists of synced folder definitions.  this will return a hash with three keys: "added", "removed", and "modified". these will contain a set of ids of folders that were added, removed, or modified, respectively.  the parameters should be results from the {#synced_folders} call.
boolean	returns true if the set is a superset of the given set.
boolean	returns true if the set is a proper superset of the given set.
boolean	returns true if the set is a subset of the given set.
boolean	returns true if the set is a proper subset of the given set.
boolean	returns true if the set contains the given object.  note that <code>include?</code> and <code>member?</code> do not test member equality using <code>==</code> as do other enumerables.  see also enumerable#include? returns true if the given object is a member of the set, and false otherwise.  used in case statements:    require 'set'    case :apple   when set[:potato, :carrot]     "vegetable"   when set[:apple, :banana]     "fruit"   end   # => "fruit"  or by itself:    set[1, 2, 3] === 2   #=> true   set[1, 2, 3] === 4   #=> false
boolean	returns true if the given ipaddr is in the range.  e.g.:   require 'ipaddr'   net1 = ipaddr.new("192.168.2.0/24")   net2 = ipaddr.new("192.168.2.100")   net3 = ipaddr.new("192.168.3.0")   p net1.include?(net2)     #=> true   p net1.include?(net3)     #=> false
string	the message of the exception reports the content of podspec for the line that generated the original exception.
boolean	returns true if uri has a scheme (e.g. http:// or https://) specified.
void	conveys debug information to the user.
boolean	true if +version+ satisfies this requirement.
boolean	true if +version+ satisfies this requirement.
hash	installs the plugin from definition object created by limited parsing of gemfile searching for plugins to be installed
hash	installs the plugin from rubygems source and returns the path where the plugin was installed
hash	installs the plugins and deps from the provided specs and returns map of gems to their paths
array	this is used by the default `spec` method to constructs the specification objects for the gems and versions that can be installed by this source plugin.  note: if the spec method is overridden, this function is not necessary
hash	options to be saved in the lockfile so that the source plugin is able to check out same version of gem later.  there options are passed when the source plugin is created from the lock file.
string	install the gem specified by the spec at appropriate path. `install_path` provides a sufficient default, if the source can only satisfy one gem,  but is not binding.
array	create a delegate used for sorting. this strategy is copied from rubygems 2.23 and ensures that bundler's specifications can be compared and sorted with rubygems' own specifications.
boolean	returns true if bundler::uri has a scheme (e.g. http:// or https://) specified.
void	called roughly every {#progress_rate}, this method should convey progress to the user.
void	called before resolution begins.
void	called after resolution ends (either successfully or with an error). by default, prints a newline.
void	conveys debug information to the user.
integer	we compare unwinddetails when choosing which state to unwind to. if two options have the same state_index we prefer the one most removed from a requirement that caused the conflict. both options would unwind to the same state, but a `grandparent` option will filter out fewer of its possibilities after doing so - where a state is both a `parent` and a `grandparent` to requirements that have caused a conflict this is the correct behaviour.
void	sets up the resolution process
void	ends the resolution process
void	processes the topmost available {requirementstate} on the stack
void	unwinds the states stack because a conflict has been encountered
void	raises a versionconflict error, or any underlying error, if there is no current state
void	filter's a state's possibilities to remove any that would not fix the conflict we've just rewound from
void	filter's a state's possibilities to remove any that would not satisfy the requirements in the conflict we've just rewound from
void	filter's a state's possibilities to remove any that would (eventually) create a requirement in the conflict we've just rewound from
void	indicates progress roughly once every second
void	calls the {#resolver_ui}'s {ui#debug} method
void	attempts to activate the current {#possibility}
void	attempts to update the existing vertex's `possibilityset` with a filtered version
void	add the current {#possibility} to the dependency graph of the current {#state}
void	requires the dependencies that the recently activated spec has
void	pushes a new {dependencystate} that encapsulates both existing and new requirements
array	checks a proposed requirement with any existing locked requirement before generating an array of possibilities for it.
array	build an array of possibilitysets, with each element representing a group of dependency versions that all have the same sub-dependency version constraints and are contiguous.
void	pushes a new {dependencystate}. if the {#specification_provider} says to {specificationprovider#allow_missing?} that particular requirement, and there are no possibilities for that requirement, then `state` is not pushed, and the vertex in {#activated} is removed, and we continue resolving the remaining requirements.
void	called roughly every {#progress_rate}, this method should convey progress to the user.
void	called before resolution begins.
void	called after resolution ends (either successfully or with an error). by default, prints a newline.
void	conveys debug information to the user.
void	sets up the resolution process
void	ends the resolution process
void	processes the topmost available {requirementstate} on the stack
void	unwinds the states stack because a conflict has been encountered
void	indicates progress roughly once every second
void	calls the {#resolver_ui}'s {ui#debug} method
void	attempts to activate the current {#possibility}
void	attempts to activate the current {#possibility} (given that it has already been activated)
boolean	attempts to swp the current {#possibility} with the already-activated spec with the given name
void	ensures there are no orphaned successors to the given {vertex}.
void	attempts to activate the current {#possibility} (given that it hasn't already been activated)
void	add the current {#possibility} to the dependency graph of the current {#state}
void	requires the dependencies that the recently activated spec has
void	pushes a new {dependencystate} that encapsulates both existing and new requirements
void	pushes a new {dependencystate}. if the {#specification_provider} says to {specificationprovider#allow_missing?} that particular requirement, and there are no possibilities for that requirement, then `state` is not pushed, and the node in {#activated} is removed, and we continue resolving the remaining requirements.
void	tags the current state of the dependency as the given tag
void	rewinds the graph to the state tagged as `tag`
void	deletes an {edge} from the dependency graph
void	sets the payload of the vertex with the given name
void	tags the current state of the dependency as the given tag
void	rewinds the graph to the state tagged as `tag`
void	deletes an {edge} from the dependency graph
void	sets the payload of the vertex with the given name
void	{include:dependencygraph#tag}
void	{include:dependencygraph#delete_edge}
void	{include:dependencygraph#set_payload}
void	{include:dependencygraph#rewind_to}
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	{include:dependencygraph#tag}
void	{include:dependencygraph#delete_edge}
void	{include:dependencygraph#set_payload}
void	{include:dependencygraph#rewind_to}
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
string	returns the name for the given `dependency`.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
string	returns the name for the given `dependency`.
string	returns the name for the given `dependency`.
string	returns the name for the given `dependency`.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
boolean	returns true if the stream is at file which means there is no more data to be read.
string	generates the prefill for the publisher
string	the title that will display at the top of the stream's publisher box.
string	constructs a full name by joining #first_name and #last_name
integer	perform a http get request to determine the following information * is the host reachable * is port 80/443 open * is the ssl certificate valid (only on https) * does the server return a successful http status code * is there a reasonable amount of redirects (3 by default) * is there a /.well-known/host-meta (this is needed to work, this can be replaced with a mandatory nodeinfo later) (can't do a head request, since that's not a defined route in the app)
array	remote pods which are known to be subscribed to the post. must include all pods which received the post in the past.
string	takes a message text and returns the text with mentions in (html escaped) plain text or formatted with html markup linking to user profiles. default is html output.
string	takes a message text and converts mentions for people that are not in the given array to simple markdown links, leaving only mentions for people who will actually be able to receive notifications for being mentioned.
string	output a markdown formatted link to the given person with the display name as the link text. if the display name is blank, falls back to the person's name.
void	perform a batch import, given a set of users and a shareable
void	sets the values of the attributes with the given hash.
string	transforms the given string into a valid +identifier+ after c99ext standard, so that it can be used in source code where escaping of ambiguous characters is not applicable.
void	ensure that the master spec repo exists
void	checks that the git version is at least 1.8.5
void	checks that the podfile exists.
void	checks that the lockfile exists.
void	generates a list of new uuids that created objects can be assigned.
string	returns the name to be used for a the variant group for a file at a given path. the path must be localized (within an *.lproj directory).
void	adds a dependency on the given metadata cache.
void	removes the files of the pod with the given name from the sandbox.
void	stores a specification in the `local podspecs` folder.
void	marks a pod as pre-downloaded
void	stores the local path of a pod.
void	removes the checkout source of a pod.
void	removes local podspec a pod.
void	stores the local path of a pod.
void	writes a file if it does not exist or if its contents have changed.
string	returns the name for the given `dependency`.
void	called before resolution starts.  completely silence this, as we show nothing.
void	called after resolution ends.  completely silence this, as we show nothing.
void	called during resolution to indicate progress.  completely silence this, as we show nothing.
void	ensures that a specification is compatible with the platform of a target.
void	handles errors that come out of a {molinillo::resolver}.
boolean	when incremental installation is enabled.
boolean	when incremental installation is enabled.
void	installs the pods.  the installation process is mostly linear with a few minor complications to keep in mind:  - the stored podspecs need to be cleaned before the resolution step   otherwise the sandbox might return an old podspec and not download   the new one from an external source. - the resolver might trigger the download of pods from external sources   necessary to retrieve their podspec (unless it is instructed not to   do it).
void	stages the sandbox after analysis.
void	performs the analysis.
void	downloads, installs the documentation and cleans the sources of the pods which need to be installed.
void	install the pods. if the resolver indicated that a pod should be installed and it exits, it is removed and then reinstalled. in any case if the pod doesn't exits it is installed.
void	runs the registered callbacks for the plugins pre install hooks.
void	performs any post-installation actions
void	run the deintegrator against all projects in the installation root if the current cocoapods major version part is different than the one in the lockfile.
void	ensures that all plugins specified in the {#podfile} are loaded.
void	prints a warning for any pods that are deprecated
void	prints a warning for any pods that included script phases
void	writes the podfile and the lock files.
void	integrates the user projects adding the dependencies on the cocoapods libraries, setting them up to use the xcconfigs and performing other actions. this step is also responsible of creating the workspace if needed.
void	runs the pre install hooks of the installed specs and of the podfile.
boolean	runs the pre install hook of the podfile
void	runs the post install hooks of the installed specs and of the podfile.
boolean	runs the post install hook of the podfile
void	prints the result of the validation to the user.
string	`--swift-version` parameter during validation.
string	`--swift-version` parameter during validation.
void	performs platform specific analysis. it requires to download the source at each iteration
void	builds and runs all test sources associated with the current specification being validated.
void	it checks that every file pattern specified in a spec yields at least one file. it requires the pods to be already present in the current working directory under pods/spec.name.
array	parse the xcode build output to identify the lines which are relevant to the linter.
string	executes the given command in the current working directory.
hash	downloads a pod with the given `params` to `target`.
void	creates the methods for the executable with the given name.
string	executes the given command displaying it if in verbose mode.
string	returns the absolute path to the binary with the given name on the current `path`, or `nil` if none is found.
string	returns the absolute path to the binary with the given name on the current `path`, or raises if none is found.
void	stores a portion of the output and prints it to the {io} instance.
void	in verbose mode it shows the sections and the contents. in normal mode it just prints the title.
void	prints the stored warnings. this method is intended to be called at the end of the execution of the binary.
string	terminal and an option indent. adapted from https://macromates.com/blog/2006/wrapping-text-with-regular-expressions/  terminal is too small a width of 80 is assumed.
void	updates the local clone of the spec-repo with the given name or of all the git repos if the name is omitted.
void	creates the repos directory specified in the configuration by `config.repos_dir`.
void	clones the git spec-repo according to parameters passed to the command.
void	checks out the branch of the git spec-repo if provided.
void	ensures the cache on disk was created with the same cocoapods version as is currently running.
object	performs the given block inside a temporary directory, which is removed at the end of the block's scope.
void	copies the `source` directory to `destination`, cleaning the directory of any files unused by `spec`.
void	writes the given `spec` to the given `path`.
string	generates the contents of the header according to the platform.
void	generates and saves the header to the given path.
string	generates the contents of the header according to the platform.
void	pretty-prints the source at the given path.
void	pretty-prints the given sources.
void	pretty-prints the number of sources.
void	checks that the repo is clean.
void	updates the git repo against the remote.
void	commits the podspecs to the source, which should be a git repo.
void	pushes the git repo against the remote.
array	the expansion provides support for:    - literals        dir_glob_equivalent_patterns('{file1,file2}.{h,m}')       => ["file1.h", "file1.m", "file2.h", "file2.m"]    - matching the direct children of a directory with `**`        dir_glob_equivalent_patterns('classes/**/file.m')       => ["classes/**/file.m", "classes/file.m"]
string	returns the label to use for the given test type. this is used to generate native target names for test specs.
void	clones the template from the remote in the working directory using the name of the pod.
void	runs the template configuration utilities.
void	runs the template configuration utilities.
void	validates that the given request is well-formed.
string	determines the swift version for the given spec within a list of target definitions. if the pod author has provided a set of swift versions supported by their pod then the max swift version is chosen, unless the target definitions specify explicit requirements for supported swift versions. otherwise the swift version is derived by the target definitions that integrate this pod.
void	fetches the podspecs of external sources if modifications to the sandbox are allowed.
void	checks whether the platform is specified if not integrating
string	generates the contents of the file list.
void	generates and saves the file list to the given path.
void	saves the spec-repo url to a '.url' file.
void	generates and saves the info.plist to the given path.
string	generates the contents of the module.modulemap file.
void	removes the entire root directory.
void	removes the directory at the given path relative to the root.
void	adds an header search path to the sandbox.
string	the `pods_build_dir` build setting for the {#target}.  the return value from this method will be: `pods_build_dir, build_setting`.
string	the `pods_configuration_build_dir` build setting for the {#target}.  the return value from this method will be: `pods_configuration_build_dir, build_setting`.
string	the `use_recursive_script_inputs_in_script_phases` build setting for the {#target}.  the return value from this method will be: `use_recursive_script_inputs_in_script_phases, build_setting`.
string	the `code_sign_identity` build setting for the {#target}.  the return value from this method will be: `code_sign_identity, build_setting`.
array	the `frameworks` build setting for the {#target}.  the return value from this method will be: `frameworks`.
array	the `weak_frameworks` build setting for the {#target}.  the return value from this method will be: `weak_frameworks`.
array	the `framework_search_paths` build setting for the {#target}.  the return value from this method will be: `framework_search_paths, build_setting, memoized`.
array	the `libraries` build setting for the {#target}.  the return value from this method will be: `libraries`.
array	the `gcc_preprocessor_definitions` build setting for the {#target}.  the return value from this method will be: `gcc_preprocessor_definitions, build_setting`.
array	the `other_cflags` build setting for the {#target}.  the return value from this method will be: `other_cflags, build_setting, memoized`.
array	the `module_map_files` build setting for the {#target}.  the return value from this method will be: `module_map_files`.
array	the `other_swift_flags` build setting for the {#target}.  the return value from this method will be: `other_swift_flags, build_setting, memoized`.
array	the `other_ldflags` build setting for the {#target}.  the return value from this method will be: `other_ldflags, build_setting, memoized`.
string	the `pods_root` build setting for the {#target}.  the return value from this method will be: `pods_root, build_setting`.
string	the `pods_target_srcroot` build setting for the {#target}.  the return value from this method will be: `pods_target_srcroot, build_setting`.
array	the `consumer_frameworks` build setting for the {#target}.  the return value from this method will be: `consumer_frameworks, memoized`.
array	the `frameworks` build setting for the {#target}.  the return value from this method will be: `frameworks, memoized, sorted, uniqued`.
array	the `static_frameworks_to_import` build setting for the {#target}.  the return value from this method will be: `static_frameworks_to_import, memoized`.
array	the `dynamic_frameworks_to_import` build setting for the {#target}.  the return value from this method will be: `dynamic_frameworks_to_import, memoized`.
array	the `weak_frameworks` build setting for the {#target}.  the return value from this method will be: `weak_frameworks, memoized`.
array	the `frameworks_to_import` build setting for the {#target}.  the return value from this method will be: `frameworks_to_import, memoized, sorted, uniqued`.
array	the `weak_frameworks_to_import` build setting for the {#target}.  the return value from this method will be: `weak_frameworks_to_import, memoized, sorted, uniqued`.
array	the `framework_search_paths` build setting for the {#target}.  the return value from this method will be: `framework_search_paths, build_setting, memoized, sorted, uniqued`.
string	the `framework_header_search_path` build setting for the {#target}.  the return value from this method will be: `framework_header_search_path, memoized`.
array	the `vendored_framework_search_paths` build setting for the {#target}.  the return value from this method will be: `vendored_framework_search_paths, memoized`.
array	the `framework_search_paths_to_import` build setting for the {#target}.  the return value from this method will be: `framework_search_paths_to_import, memoized`.
array	the `vendored_static_frameworks` build setting for the {#target}.  the return value from this method will be: `vendored_static_frameworks, memoized`.
array	the `vendored_dynamic_frameworks` build setting for the {#target}.  the return value from this method will be: `vendored_dynamic_frameworks, memoized`.
array	converts array of library path references to just the names to use link each library, e.g. from '/path/to/libsomething.a' to 'something'
array	the `libraries` build setting for the {#target}.  the return value from this method will be: `libraries, memoized, sorted, uniqued`.
array	the `static_libraries_to_import` build setting for the {#target}.  the return value from this method will be: `static_libraries_to_import, memoized`.
array	the `dynamic_libraries_to_import` build setting for the {#target}.  the return value from this method will be: `dynamic_libraries_to_import, memoized`.
array	the `libraries_to_import` build setting for the {#target}.  the return value from this method will be: `libraries_to_import, memoized, sorted, uniqued`.
array	the `library_search_paths` build setting for the {#target}.  the return value from this method will be: `library_search_paths, build_setting, memoized, sorted, uniqued`.
array	the `vendored_static_libraries` build setting for the {#target}.  the return value from this method will be: `vendored_static_libraries, memoized`.
array	the `vendored_dynamic_libraries` build setting for the {#target}.  the return value from this method will be: `vendored_dynamic_libraries, memoized`.
array	the `vendored_static_library_search_paths` build setting for the {#target}.  the return value from this method will be: `vendored_static_library_search_paths, memoized`.
array	the `vendored_dynamic_library_search_paths` build setting for the {#target}.  the return value from this method will be: `vendored_dynamic_library_search_paths, memoized`.
array	the `library_search_paths_to_import` build setting for the {#target}.  the return value from this method will be: `library_search_paths_to_import, memoized`.
array	the `module_map_files` build setting for the {#target}.  the return value from this method will be: `module_map_files, memoized`.
array	the `module_map_file_to_import` build setting for the {#target}.  the return value from this method will be: `module_map_file_to_import, memoized`.
array	the `header_search_paths` build setting for the {#target}.  the return value from this method will be: `header_search_paths, build_setting, memoized, sorted`.
array	the `public_header_search_paths` build setting for the {#target}.  the return value from this method will be: `public_header_search_paths, memoized, sorted`.
array	the `other_swift_flags` build setting for the {#target}.  the return value from this method will be: `other_swift_flags, build_setting, memoized`.
array	the `swift_include_paths` build setting for the {#target}.  the return value from this method will be: `swift_include_paths, build_setting, memoized, sorted, uniqued`.
array	the `swift_include_paths_to_import` build setting for the {#target}.  the return value from this method will be: `swift_include_paths_to_import, memoized`.
array	the `ld_runpath_search_paths` build setting for the {#target}.  the return value from this method will be: `ld_runpath_search_paths, build_setting, memoized`.
string	the `skip_install` build setting for the {#target}.  the return value from this method will be: `skip_install, build_setting`.
string	the `product_bundle_identifier` build setting for the {#target}.  the return value from this method will be: `product_bundle_identifier, build_setting`.
string	the `configuration_build_dir` build setting for the {#target}.  the return value from this method will be: `configuration_build_dir, build_setting, memoized`.
string	the `application_extension_api_only` build setting for the {#target}.  the return value from this method will be: `application_extension_api_only, build_setting, memoized`.
string	the `pods_podfile_dir_path` build setting for the {#target}.  the return value from this method will be: `pods_podfile_dir_path, build_setting, memoized`.
string	the `pods_root` build setting for the {#target}.  the return value from this method will be: `pods_root, build_setting, memoized`.
array	the `frameworks` build setting for the {#target}.  the return value from this method will be: `frameworks, memoized, sorted, uniqued, from_pod_targets_to_link, from_search_paths_aggregate_targets`.
array	the `weak_frameworks` build setting for the {#target}.  the return value from this method will be: `weak_frameworks, memoized, sorted, uniqued, from_pod_targets_to_link, from_search_paths_aggregate_targets`.
array	the `framework_search_paths` build setting for the {#target}.  the return value from this method will be: `framework_search_paths, build_setting, memoized, sorted, uniqued, from_pod_targets_to_link, from_search_paths_aggregate_targets`.
array	the `libraries` build setting for the {#target}.  the return value from this method will be: `libraries, memoized, sorted, uniqued, from_pod_targets_to_link, from_search_paths_aggregate_targets`.
array	the `library_search_paths` build setting for the {#target}.  the return value from this method will be: `library_search_paths, build_setting, memoized, sorted, uniqued, from_pod_targets_to_link, from_search_paths_aggregate_targets`.
array	the `header_search_paths` build setting for the {#target}.  the return value from this method will be: `header_search_paths, build_setting, memoized, sorted, uniqued`.
array	the `other_cflags` build setting for the {#target}.  the return value from this method will be: `other_cflags, build_setting, memoized`.
array	the `module_map_files` build setting for the {#target}.  the return value from this method will be: `module_map_files, memoized, sorted, uniqued, compacted, from_search_paths_aggregate_targets`.
array	the `swift_include_paths` build setting for the {#target}.  the return value from this method will be: `swift_include_paths, build_setting, memoized, sorted, uniqued, from_pod_targets_to_link, from_search_paths_aggregate_targets`.
string	the `always_embed_swift_standard_libraries` build setting for the {#target}.  the return value from this method will be: `always_embed_swift_standard_libraries, build_setting, memoized`.
string	the `embedded_content_contains_swift` build setting for the {#target}.  the return value from this method will be: `embedded_content_contains_swift, build_setting, memoized`.
array	the `ld_runpath_search_paths` build setting for the {#target}.  the return value from this method will be: `ld_runpath_search_paths, build_setting, memoized, uniqued`.
string	generates the contents of the prefix header according to the platform and the pods.
void	removes all the files not needed for the installation according to the specs by platform.
string	computes the relative path of a sandboxed file from the `$(pods_root)` variable of the pods's project.
void	generates and saves the info.plist to the given path.
string	generates the contents of the info.plist
string	generates the contents of the umbrella header according to the included pods.
void	adds the xctest framework search paths into the given target.
void	adds the provided swift version into the given target.
void	warns the user if the podfile is empty.
void	executes the prepare command if there is one.
void	runs the prepare command bash script of the spec.
void	displays the state of each pod.
void	adds the name of a pod to the give state.
void	defines a new installation option.
boolean	whether to clean the sources of the pods during installation  cleaning removes any files not used by the pod as specified by the podspec and the platforms that the project supports
boolean	whether to deduplicate pod targets  target deduplication adds suffixes to pod targets for the cases where a pod is included in multiple targets that have different requirements. for example, a pod named 'mypod' with a subspec 'suba' that is included in two targets as follows:      target 'mytargeta' do       pod 'mypod/suba'     end      target 'mytargetb' do       pod 'mypod'     end  will result in two pod targets: `mypod` and `mypod-suba`
boolean	whether to generate deterministic uuids when creating the pods project
boolean	whether to integrate the installed pods into the user project  if set to false, pods will be downloaded and installed to the `pods/` directory but they will not be integrated into your project.
boolean	whether to lock the source files of pods. xcode will prompt to unlock the files when attempting to modify their contents
boolean	whether to emit a warning when multiple sources contain a pod with the same name and version
boolean	whether to share xcode schemes for development pods.  schemes for development pods are created automatically but are not shared by default.
boolean	whether to disable the input & output paths of the cocoapods script phases (copy frameworks & copy resources)
boolean	whether to preserve the file structure of all pods, including externally sourced pods.  by default, the file structure of pod sources is preserved only for development pods. setting `:preserve_pod_file_structure` to `true` will _always_ preserve the file structure.
boolean	whether to generate a project per pod target. instead of creating 1 `pods.xcodeproj`, this option will generate a project for every pod target that will be nested under the `pods.xcodeproj`.
boolean	whether to enable only regenerating targets and their associate projects that have changed since the previous installation.
boolean	whether to skip generating the `pods.xcodeproj` and perform only dependency resolution and downloading.
void	creates the target in the pods project and the relative support files.
void	cleans the installations if appropriate.  cleaning the installation will remove any files that are not used during the build process, based on the podspec and platforms of the target that the pod is integrated into.
void	locks the source files if appropriate.
void	unlocks the source files if appropriate.
void	downloads the source of the pod.
void	verify the source of the spec is secure, which is used to show a warning to the user if that isn't the case this method doesn't verify all protocols, but currently only prohibits unencrypted 'http://' and 'git://'' connections.
void	removes all the files not needed for the installation according to the specs by platform.
void	saves the resource script to the given pathname.
string	returns the sanitized text with utf-8 invalid characters eliminated.
void	saves the resource script to the given pathname.
void	integrates the user projects associated with the {targetdefinitions} with the pods project and its products.
void	creates and saved the workspace containing the pods project and the user projects, if needed.
void	integrates the targets of the user projects with the libraries generated from the {podfile}.
void	save all user projects.
void	called just as the investigation has begun. lets the user know that it's looking for an issue.
void	called once the inspector has received a report with more than one issue, showing the top 3 issues, and offering a link to see more.
void	called once the report has been received, but when there are no issues found.
void	called when there have been networking issues in creating the report.
void	saves the resource script to the given pathname.
void	performs the analysis to the detect the state of the sandbox respect to the resolved specifications.
array	computes the architectures relevant for the user's targets.
boolean	checks if any of the targets for the {targetdefinition} computed before by #compute_user_project_targets is recommended to be build as a framework due the presence of swift source code in any of the source build phases.
string	compute the swift version for the target build configurations. if more than one swift version is defined for a given target, then it will raise.
void	configure schemes for the specified project and pod targets. schemes for development pods will be shared if requested by the integration.
void	adds a target dependency for each pod spec to each aggregate target and links the pod targets among each other.
void	fetches the external source from the remote according to the params.
string	return the normalized path for a podspec for a relative declared path.
void	pre-downloads a pod passing the options to the downloader and informing the sandbox.
void	stores the podspec in the sandbox and marks it as from an external source.
void	rewrites the entire cache to the given path.
void	sets the input & output paths for the given script build phase.
void	adds a shell script build phase responsible to copy (embed) the frameworks generated by the targetdefinition to the bundle of the product of the targets.
void	adds a shell script build phase responsible to copy xcframeworks slices generated by the targetdefinition to the build directory.
void	adds a shell script build phase responsible to copy the resources generated by the targetdefinition to the bundle of the product of the targets.
void	creates or update a shell script build phase for the given target.
void	updates all target script phases for the current target, including creating or updating, deleting and re-ordering.
void	script phases can have a limited number of input and output paths due to each one being exported to `env`. a large number can cause a build failure because of limitations in `env`. see issue https://github.com/cocoapods/cocoapods/issues/7362.
string	returns an extension in the target that corresponds to the resource's input extension.
array	returns the resource output paths for all given input paths.
array	returns the framework output paths for the given input paths
void	integrates the user project targets. only the targets that do **not** already have the pods library in their frameworks build phase are processed.
void	adds spec product reference to the frameworks build phase of the {targetdefinition} integration libraries. adds a file reference to the frameworks group of the project and adds it to the frameworks build phase of the targets.
void	find or create a 'copy pods resources' build phase
void	find or create a 'embed pods frameworks' copy files build phase
void	find or create a 'prepare artifacts' copy files build phase
void	updates all target script phases for the current target, including creating or updating, deleting and re-ordering.
void	adds a shell script build phase responsible for checking if the pods locked in the pods/manifest.lock file are in sync with the pods defined in the podfile.lock.
void	creates the info.plist file which sets public framework attributes
void	creates the module map file which ensures that the umbrella header is recognized with a customized path
void	generates a header which ensures that all header files are exported in the module map
void	generates a dummy source file for each target so libraries that contain only categories build.
void	removes overrides of the `pod_target_xcconfig` settings from the target's build configurations.
void	adds the build files of the pods to the target and adds a reference to the frameworks of the pods.
boolean	adds the resources to the compile resources phase of the target.
void	generates the contents of the xcconfig file and saves it to disk.
void	generates the contents of the xcconfig file used for each test target type and saves it to disk.
void	creates a script that copies the resources to the bundle of the test target.
void	creates a script that prepares artifacts for the test target.
void	creates a script that embeds the frameworks to the bundle of the test target.
void	generates the contents of the xcconfig file used for each app target type and saves it to disk.
void	creates a script that copies the resources to the bundle of the app target.
void	creates a script that embeds the frameworks to the bundle of the app target.
void	manually add `libswiftswiftononesupport.dylib` as it seems there is an issue with tests that do not include it for debug configurations. possibly related to swift module optimization.
void	creates a build phase which links the versioned header folders of the os x into the framework bundle's root root directory. this is only necessary because the way how headers are copied via custom copy file build phases in combination with header_mappings_dir interferes with xcodebuild's expectations about the existence of private or public headers.
string	returns the compiler flags for the source files of the given specification.  the following behavior is regarding the `os_object_use_objc` flag. when set to `0`, it will allow code to use `dispatch_release()` on >= ios 6.0 and os x 10.8.  * new libraries that do *not* require arc don’t need to care about this   issue at all.  * new libraries that *do* require arc _and_ have a deployment target of   >= ios 6.0 or os x 10.8:    these no longer use `dispatch_release()` and should *not* have the   `os_object_use_objc` flag set to `0`.    **note:** this means that these libraries *have* to specify the             deployment target in order to function well.  * new libraries that *do* require arc, but have a deployment target of   < ios 6.0 or os x 10.8:    these contain `dispatch_release()` calls and as such need the   `os_object_use_objc` flag set to `1`.    **note:** libraries that do *not* specify a platform version are             assumed to have a deployment target of < ios 6.0 or os x 10.8.   for more information, see: https://opensource.apple.com/source/libdispatch/libdispatch-228.18/os/object.h
void	adds a shell script phase, intended only for library targets that contain swift, to copy the objc compatibility header (the -swift.h file that the swift compiler generates) to the built products directory. additionally, the script phase copies the module map, appending a `.swift` submodule that references the (moved) compatibility header. since the module map has been moved, the umbrella header is _also_ copied, so that it is sitting next to the module map. this is necessary for a successful archive build.
void	integrates the pod target.
void	find or create a 'copy pods resources' build phase
void	find or create a 'embed pods frameworks' run script build phase
void	find or create a 'prepare artifacts' run script build phase
void	creates the info.plist file which sets public framework attributes   @param [hash] additional_entries         any additional entries to include in this info.plist file.
void	creates a prefix header file which imports `uikit` or `cocoa` according to the platform of the target. this file also include any prefix header content reported by the specification of the pods.
void	installs the file references.
void	reads the file accessors contents from the file system.
void	adds the source files of the pods to the pods project.
void	adds the bundled frameworks to the pods project
void	adds the bundled libraries to the pods project
void	adds the resources of the pods to the pods project.
void	creates the link to the headers of the pod in the sandbox.
void	adds file references to the list of the paths returned by the file accessor with the given key to the given group of the pods project.
void	creates the group that holds the references to the support files generated by this installer.
void	generates the contents of the xcconfig file and saves it to disk.
void	generates the bridge support metadata if requested by the {podfile}.
void	creates a script that copies the resources to the bundle of the client target.
void	creates a script that embeds the frameworks to the bundle of the client target.
void	creates a script that prepares artifacts for embedding into a host target.
void	generates the acknowledgement files (markdown and plist) for the target.
boolean	your implementation should check the existence of a cache repository on the deployment target
boolean	your implementation should check if the specified remote-repository is available.
string	execute bundle install and capture any $stdout output. any raised exception in the process will be trapped and returned. logs errors to $stdout.
array	build bundler::cli.start arguments array from the given options hash
hash	take a plugin name and get the latest versions available in the gem repository.
hash	fetch latest version information as in rubygems
hash	retrieve only the latest spec for all locally installed plugins
integer	entry point for the application logic. here we do the command line arguments processing and inspect the target files.  rubocop:disable metrics/methodlength, metrics/abcsize
integer	returns the index of the receiver node in its siblings. (sibling index uses zero based numbering.)
integer	returns `-1`, `0`, or `+1` if this offense is less than, equal to, or greater than `other`.
string	convert a user provided cop name into a properly namespaced name
string	does the actual rewrite and returns string corresponding to the rewritten source.
string	expose the `frozen_string_literal` value coerced to a boolean if possible.
array	individual tokens composing an editor specific comment string.
array	generate a list of target files by expanding globbing patterns (if any). if args is empty, recursively find all ruby source files under the current directory
array	finds all ruby source files under the current or other supplied directory. a ruby source file is defined as a file with the `.rb` extension or a file with no extension that has a ruby shebang line as its first line. it is possible to specify includes and excludes using the config file, so you can include other ruby files like rakefiles and gemspecs.
string	returns the keyword of the `if` statement as a string. returns an empty string for ternary operators.
string	returns the inverse keyword of the `if` node as a string. returns `if` for `unless` nodes and vice versa. returns an empty string for ternary operators.
string	returns the alternate operator of the `or` as a string. returns `or` for `||` and vice versa.
string	returns the inverse keyword of the `or` node as a string. returns `and` for `or` and `&&` for `||`.
string	returns the alternate operator of the `and` as a string. returns `and` for `&&` and vice versa.
string	returns the inverse keyword of the `and` node as a string. returns `||` for `&&` and `or` for `and`.
array	custom destructuring method. this can be used to normalize destructuring for different variations of the node.  in this case, the `def` node destructures into:    `method_name, arguments, body`  while the `defs` node destructures into:    `receiver, method_name, arguments, body`  so we reverse the destructured array to get the optional receiver at the end, where it can be discarded.
string	returns the keyword of the `for` statement as a string.
string	returns the keyword of the `case` statement as a string.
string	returns the delimiter of the `pair` as a string. returns `=>` for a colon delimited `pair` and `:` for a hash rocket delimited `pair`.
string	returns the inverse delimiter of the `pair` as a string.
integer	returns the index of the `when` branch within the `case` statement.
array	the delimiters for this `block` literal.
string	the opening delimiter for this `block` literal.
string	the closing delimiter for this `block` literal.
array	custom destructuring method. this can be used to normalize destructuring for different variations of the node.
string	returns the keyword of the `until` statement as a string.
string	returns the inverse keyword of the `until` node as a string. returns `while` for `until` nodes and vice versa.
string	returns the keyword of the `while` statement as a string.
string	returns the inverse keyword of the `while` node as a string. returns `until` for `while` nodes and vice versa.
array	custom destructuring method. this can be used to normalize destructuring for different variations of the node.
array	returns the arguments of the `return`.
string	construct annotated source string (like what we parse)  reconstruct a deterministic annotated source string. this is useful for eliminating semantically irrelevant annotation ordering differences.
string	return the plain source code without annotations
string	returns the annotated message, based on params passed into initializer
array	returns all duplicates, including the first instance of the duplicated elements.
array	returns the consecutive duplicates, leaving out the first instance of the duplicated elements.
array	returns a hash of grouped duplicates. the key will be the first instance of the element, and  the value an `array` of the initial element and all duplicate instances.
void	invoked once before any files are inspected.
void	invoked at the beginning of inspecting each files.
void	invoked at the end of inspecting each files.
void	invoked after all files are inspected or interrupted by user.
string	categorize a node according to the {expected_order} try to match {categories} values against the node's method_name given also its visibility.
string	returns the operator for the `kwsplat` as a string.
integer	returns the delta between this pair's key and the argument pair's.
integer	returns the delta between this element's value and the argument's.
integer	returns the delta between this element's delimiter and the argument's.
string	returns the operator as a string.
hash	retrieves the requirements from the options hash, if given.
hash	set the content type header for the api format if it is not already present.
string	need for rack::sendfile middleware
hash	coerce the input into a json-like data structure.
void	validates a given request.
void	validates a given parameter hash.
object	object that will be used for parameter coercion and type checking.  see {types.build_coercer}
object	chooses the best coercer for the given type. for example, if the type is integer, it will return a coercer which will be able to coerce a value to the integer.  there are a few very special coercers which might be returned.  +grape::types::multipletypecoercer+ is a coercer which is returned when the given type implies values in an array with different types. for example, +[integer, string]+ allows integer and string values in an array.  +grape::types::customtypecoercer+ is a coercer which is returned when a method is specified by a user with +coerce_with+ option or the user specifies a custom type which implements requirments of +grape::types::customtypecoercer+.  +grape::types::customtypecollectioncoercer+ is a very similar to the previous one, but it expects an array or set of values having a custom type implemented by the user.  there is also a group of custom types implemented by grape, check +grape::validations::types::special+ to get the full list.
object	coerces the given value.
object	coerces the given value.
array	coerces the given value.
string	normalizes whitespace space by stripping leading and trailing whitespace and replacing sequences of whitespace characters with a single space.
string	injects a `<base>` tag into the given html code, pointing to {capybara.configure asset_host}.
integer	returns the current http status code as an integer. not supported by all drivers (e.g. selenium).
object	evaluate the given javascript and return the result. be careful when using this with scripts that return complex objects, such as jquery statements. {#execute_script} might be a better alternative.
object	evaluate the given javascript and obtain the result from a callback function which will be passed as the last argument to the script.
string	execute the block, accepting a alert.  expects a block whose actions will trigger the display modal to appear.
string	execute the block, accepting a confirm.  expects a block whose actions will trigger the display modal to appear.
string	execute the block, dismissing a confirm.  expects a block whose actions will trigger the display modal to appear.
string	execute the block, accepting a prompt, optionally responding to the prompt.  expects a block whose actions will trigger the display modal to appear.
string	execute the block, dismissing a prompt.  expects a block whose actions will trigger the display modal to appear.
string	save a snapshot of the page. if {capybara.configure asset_host} is set it will inject `base` tag pointing to {capybara.configure asset_host}.  if invoked without arguments it will save file to {capybara.configure save_path} and file will be given randomly generated filename. if invoked with a relative path the path will be relative to {capybara.configure save_path}.
string	save a screenshot of page.  if invoked without arguments it will save file to {capybara.configure save_path} and file will be given randomly generated filename. if invoked with a relative path the path will be relative to {capybara.configure save_path}.
object	this method is capybara's primary defence against asynchronicity problems. it works by attempting to run a given block of code until it succeeds. the exact behaviour of this method depends on a number of factors. basically there are certain exceptions which, when raised from the block, instead of bubbling up, are caught, and the block is re-run.  certain drivers, such as racktest, have no support for asynchronous processes, these drivers run the block, and any error raised bubbles up immediately. this allows faster turn around in the case where an expectation fails.  only exceptions that are {capybara::elementnotfound} or any subclass thereof cause the block to be rerun. drivers may specify additional exceptions which also cause reruns. this usually occurs when a node is manipulated which no longer exists on the page. for example, the selenium driver specifies `selenium::webdriver::error::obsoleteelementerror`.  as long as any of these exceptions are thrown, the block is re-run, until a certain amount of time passes. the amount of time defaults to {capybara.default_max_wait_time} and can be overridden through the `seconds` argument. this time is compared with the system time to see how much time has passed. on rubies/platforms which don't support access to a monotonic process clock if the return value of `time.now` is stubbed out, capybara will raise `capybara::frozenintime`.
string	execute the block, and then accept the modal opened.
string	execute the block, and then dismiss the modal opened.
string	retrieve the given attribute      element[:title] # => html title attribute
string	an xpath expression describing where on the page the element can be found
string	retrieve the text of the element. if {capybara.configure ignore_hidden_elements} is `true`, which it is by default, then this will return only text which is visible. the exact semantics of this may differ between drivers, but generally any text within elements with `display:none` is ignored. this behaviour can be overridden by passing `:all` to this method.
string	retrieve the given attribute.      element[:title] # => html title attribute
hash	retrieve the given css styles.      element.style('color', 'font-size') # => computed values of css 'color' and 'font-size' styles
string	an xpath expression describing where on the page the element can be found.
object	evaluate the given js in the context of the element and return the result. be careful when using this with scripts that return complex objects, such as jquery statements. {#execute_script} might be a better alternative. `this` in the script will refer to the element this is called on.
object	evaluate the given javascript in the context of the element and obtain the result from a callback function which will be passed as the last argument to the script. `this` in the script will refer to the element this is called on.
string	a human-readable representation of the element.
string	set/get a descriptive label for the selector
boolean	forward_tcp_heartbeat_data = forward_header + ''.to_msgpack + [].to_msgpack
boolean	display create another checkbox on a new page
void	add a callback to be ran when we build the menu
boolean	display create another checkbox on a new page
array	returns a set of action items to display for a specific controller action
array	flatten a params hash to an array of fields.
hash	returns the filters for this resource. if filters are not enabled, it will always return an empty hash.
boolean	authorize the action and subject. available in the controller as well as all the views. if the action is not allowd, it raises an activeadmin::accessdenied exception.
void	calls all the appropriate callbacks and then creates the new resource.
void	calls all the appropriate callbacks and then saves the new resource.
void	update an object with the given attributes. also calls the appropriate callbacks for update action.
void	destroys an object from the database and calls appropriate callbacks.
array	a ready only of formats to make available in index/paginated collection view. formats
array	adds a mime type to the list of available formats available for data export. you must register the extension prior to adding it here.
string	produces a random book title
string	produces a random book author
string	produces a random book publisher
string	produces a random genre
string	produces the name of a character from dune
string	produces the name of a planet from dune
string	produces a quote from dune
string	produces a saying from dune
string	produces the name of a hero from dota.
string	produces the name of an item from dota.
string	produces the name of a professional dota team.
string	produces the name of a professional dota player.
string	produces the name of a hero from dota.
string	produces the name of a video game.
string	produces the name of a video game genre.
string	produces the name of a video game console or platform.
string	produces the name of a game from the myst series.
string	produces the name of a creature from myst.
string	produces the name of an age from myst.
string	produces the name of a chracter from myst.
string	produces a quote from myst.
string	produces an app name.
string	produces a version string.
string	produces the name of an app's author.
string	produces a string representing a semantic version identifier.
string	produces a random job title.
string	produces a random job position.
string	produces a random job field.
string	produces a random job skill.
string	produces the name of a legend of zelda game.
string	produces the name of a character from the legend of zelda games.
string	produces the name of a character from the legend of zelda games.
string	produces the name of an item from the legend of zelda games.
string	produces the name of a key/note, using letter notation.
string	produces the name of a chord, using letter notation.
string	produces the name of an instrument.
array	produces an array of the letter names of musical notes, without accidentals.
array	produces an array of accidentals (with "natural" denoted as an empty string).
array	produces an array of key types (with "major" denoted as an empty string).
array	produces an array of types of chords.
string	produces the name of a band.
string	produces the name of an album.
string	produces the name of a musical genre.
string	produces the title of an opera by giuseppe verdi.
string	produces the title of an opera by gioacchino rossini.
string	produces the title of an opera by gaetano donizetti.
string	produces the title of an opera by vincenzo bellini.
string	produces the name of a song by phish.
string	produces a random name for a cat
string	produces a random cat breed
string	produces a random cat breed registry
string	produces a random name for a dog
string	produces a random dog breed
string	produces a random sound made by a dog
string	produces a random dog meme phrase
string	produces a random dog age
string	produces a random gender
string	produces a random coat length
string	produces a random size of a dog
string	produces a random beer name.
string	produces a random beer style.
string	produces a random beer hops.
string	produces a random beer yeast.
string	produces a random beer malt.
string	produces a random beer ibu.
string	produces a random beer alcohol percentage.
string	produces a random beer blg level.
string	retrieves a random coin from any country.
string	retrieves a face to a flipped coin
string	retrieves a typical dish from each country.
string	retrieves a description about some dish
string	retrieves an ingredient
string	retrieves a fruit
string	retrieves a vegetable
string	retrieves some random spice
string	retrieves cooking measures
string	retrieves metric mesurements
string	produces the name of a 1990's 'og' k-pop group.
string	produces the name of a 2000's k-pop group.
string	produces the name of a 2010's k-pop group.
string	produces the name of a k-pop girl group.
string	produces the name of a k-pop boy band.
string	produces the name of a solo k-pop artist.
string	produces a team name from a state and a creature.
string	produces a team creature.
string	produces a team state.
string	produces a team sport.
string	produces the name of a team mascot.
string	produces the name of a hero from heroes 3.
string	produces the name of a specialty from heroes 3.
string	produces the name of a class from heroes 3.
string	produces a quote from a movie.
string	produces a hex color code.
string	produces the name of a color.
string	produces the name of a piece of furniture.
string	produces the name of a room in a house.
string	produces a random string of alphanumeric characters
string	produces the name of a planet.
string	produces the name of a moon.
string	produces the name of a galaxy.
string	produces the name of a nebula.
string	produces the name of a star cluster.
string	produces the name of a constellation.
string	produces the name of a star.
string	produces the name of a space agency.
string	produces a space agency abbreviation.
string	produces the name of a nasa spacecraft.
string	produces the name of a space company.
string	produces a distance measurement.
string	produces the name of a meteorite.
string	produces the name of a launch vehicle.
string	produces the name of a character from the fallout games.
string	produces the name of a faction from the fallout games.
string	produces the name of a location from the fallout games.
string	produces a quote from the fallout games.
string	produces the name of a pokemon.
string	produces a location from pokemon.
string	produces a move from pokemon.
string	produces the name of a character from the witcher.
string	produces the name of a witcher from the witcher.
string	produces the name of a school from the witcher.
string	produces the name of a location from the witcher.
string	produces a quote from the witcher.
string	produces the name of a monster from the witcher.
string	produces the name of a character from the hobbit.
string	produces the name of one of the 13 dwarves from the company, or gandalf or bilbo.
string	produces a quote from the hobbit.
string	produces the name of a location from the hobbit.
string	produces a random name for a horse
string	produces a random horse breed
string	produces the name of an artist.
string	produces a url for an avatar from robohash.org
string	produces a random blend name.
string	produces a random coffee origin place.
string	produces a random coffee variety.
string	produces a string containing a random description of a coffee's taste.
string	produces a random coffee taste intensity.
string	produces an md5 hash.
string	produces a sha1 hash.
string	produces a sha256 hash.
integer	produces a build number between 1 and 500.
string	produces the name of a manufacturer for a device.
string	produces a model name for a device.
string	produces the name of a platform for a device.
string	produces a serial code for a device.
integer	produces a version number between 1 and 1000.
string	produces the name of a professional esports player.
string	produces the name of an esports team.
string	produces the name of an esports league.
string	produces the name of an esports event.
string	produces the name of a game played as an esport.
string	produces the name of a gender identity.
string	produces either 'male' or 'female'.
string	produces either 'f' or 'm'.
string	produces something smart.
string	short technical abbreviations.
string	hacker-centric adjectives.
string	only the best hacker-related nouns.
string	actions that hackers take.
string	produces a verb that ends with '-ing'.
string	produces a random nationality.
string	produces a random national flag emoji.
string	produces a random national language.
string	produces a random capital city.
string	produces a random national sport.
integer	produce a random number.
string	produce a random number with a leading zero.
string	produce a number with a number of digits, preserves leading zeroes.
integer	produces a non-zero single-digit integer.
integer	produces a single-digit integer.
string	produces a number in hexadecimal format.
integer	produces a number between two provided values. boundaries are inclusive.
integer	produces a number within two provided values. boundaries are inclusive or exclusive depending on the range passed.
string	produces source code for hello world in a given language.
string	produces source code for printing a string in a given language.
string	produces source code for printing 1 through 10 in a given language.
string	produces a character from buffy the vampire slayer.
string	produces a quote from buffy the vampire slayer.
string	produces a celebrity from buffy the vampire slayer.
string	produces a big bad from buffy the vampire slayer.
string	produces an episode from buffy the vampire slayer.
string	produces the name of a location
string	produces the name of a deity
string	produces the name of a tome
string	produces a random sentence
string	produces a random word
array	produces a array of random words
array	produces a array of random sentences
string	produces a random paragraph
array	produces a array of random paragraphs
string	produces a random animal name
string	produces the name of a city.
string	produces a street name.
string	produces a street address.
string	produces a secondary address.
string	produces a building number.
string	produces the name of a community.
string	produces a mail box number. faker::address.mail_box #=> "po box 123"
string	produces a zip code.
string	produces the name of a time zone.
string	produces a zip code.
string	produces a zip code.
string	produces a street suffix.
string	produces a city suffix.
string	produces a city prefix.
string	produces a state abbreviation.
string	produces the name of a state.
string	produces the name of a country.
string	produces a country by iso country code. see the [list of iso 3166 country codes](https://en.wikipedia.org/wiki/list_of_iso_3166_country_codes) on wikipedia for a full list.
string	produces an iso 3166 country code when given a country name.
string	produces an iso 3166 country code.
string	produces a long (alpha-3) iso 3166 country code.
string	produces a full address.
string	produces a god from ancient mythology.
string	produces a primordial from ancient mythology.
string	produces a titan from ancient mythology.
string	produces a hero from ancient mythology.
boolean	produces a boolean
string	produces the name of a dessert variety.
string	produces the name of a dessert topping.
string	produces the name of a dessert flavor.
string	produces the name of a element.
string	produces the symbol of an element.
string	produces the name of a scientist.
string	produces the name of a character from the half-life games.
string	produces the name of an enemy from the half-life games.
string	produces the name of a location from the half-life games.
string	produces the name of a hero from overwatch.
string	produces the name of a location from overwatch.
string	produces a quote from overwatch.
string	produces an actor from the big lebowski.
string	produces a character from the big lebowski.
string	produces a quote from the big lebowski.
string	produces the name of a rock band.
string	produces the name of a football team.
string	produces the name of a football player.
string	produces the name of a football coach.
string	produces a football competition.
string	produces a position in football.
string	produces a character from doctor who.
string	produces an iteration of the doctor from doctor who.
string	produces an actor from doctor who.
string	produces a catch phrase from doctor who.
string	produces a quote from doctor who.
string	produces a villain from doctor who.
string	produces a villain from doctor who. produces a villain from doctor who.
string	produces a species from doctor who.
string	produces a random tezos account address
string	produces a random tezos contract
string	produces a random tezos operation
string	produces a random tezos block
string	produces a random tezos signature
string	produces a credit card number.
string	produces a type of credit card.
string	produces the name of a currency.
string	produces a currency code.
string	produces a currency symbol.
string	produces a university name.
string	produces a university degree.
string	produces a university degree.
string	produces a university subject.
string	produces a course name.
string	produces a secondary school.
string	produces a campus name.
string	produces a randomized string of characters suitable for passwords
string	produces a rank in the u.s. army.
string	produces a rank in the u.s. marines.
string	produces a rank in the u.s. navy.
string	produces a rank in the u.s. air force.
string	produces a u.s. department of defense paygrade.
hash	generate a mock omniauth response from apple
string	produces a call squadron from star wars.
string	produces a call sign from star wars.
string	produces a call number from star wars.
string	produces a character from star wars.
string	produces a droid from star wars.
string	produces a planet from star wars.
string	produces a species from star wars.
string	produces a vehicle from star wars.
string	produces a wookiee sentence from star wars.
string	produces a quote from star wars.
string	produces a wookiee sentence from star wars.
string	produces a character from friends.
string	produces a location from friends.
string	produces a quote from friends.
string	produces a quote from rupaul's drag race.
string	produces a queen from rupaul's drag race.
string	produces the name of an appliance brand.
string	produces the name of a type of appliance equipment.
string	produces the name of a video game console or platform.
string	produces a superpower.
string	produces a superhero name prefix.
string	produces a superhero name suffix.
string	produces a superhero descriptor.
string	produces a random superhero name.
string	produces a national team name.
string	produces a city name hosting the world cup match.
string	produces the name of a stadium that has hosted a world cup match.
string	produces a random national team name from a group.
string	produces a random name from national team roster.
string	produces the name of a basketball team.
string	produces the name of a basketball player.
string	produces the name of a basketball coach.
string	produces a position in basketball.
string	produces a character from new girl.
string	produces a quote from new girl.
string	produces a business from seinfeld.
string	produces a character from seinfeld.
string	produces a quote from seinfeld.
string	produces a character from the simpsons.
string	produces a location from the simpsons.
string	produces a quote from the simpsons.
string	produces a character from stargate.
string	produces a planet from stargate.
string	produces a quote from stargate.
string	produces a bitcoin wallet address
string	produces a bitcoin testnet address
string	generates a random bitcoin address for the given network
string	produces the name of a bossa nova artist.
string	produces a bossa nova song.
string	produces the url of an image from fill murray, a site which hosts exclusively photographs of actor bill murray.
string	produces the name of a restaurant.
string	produces a type of restaurant.
string	produces a description of a restaurant.
string	produces a review for a restaurant.
string	produces a character from community.
string	produces a quote from community.
string	produces a character from star trek.
string	produces a location from star trek.
string	produces a species from star trek.
string	produces a villain from star trek.
string	produces a random ethereum wallet address
string	produces the name of a race.
string	produces a level of educational attainment.
string	produces a denonym.
string	produces a marital status.
string	produces a sex for demographic purposes.
string	produces a height as a string.
string	produces the name of a race from the elder scrolls universe.
string	produces the name of a city from the elder scrolls universe.
string	produces the name of a creature from the elder scrolls universe.
string	produces the name of a region from the elder scrolls universe.
string	produces the name of a dragon from the elder scrolls universe.
string	produces a randomly generated name from the elder scrolls universe.
string	produces a first name from the elder scrolls universe.
string	produces a last name from the elder scrolls universe.
string	produces an actor from ghostbusters.
string	produces a character from ghostbusters.
string	produces a quote from ghostbusters.
string	produces a character from harry potter.
string	produces a location from harry potter.
string	produces a quote from harry potter.
string	produces a book from harry potter.
string	produces a house from harry potter.
string	produces a spell from harry potter.
string	produces the name of a member of the grateful dead.
string	produces the name of a song by the grateful dead.
string	produces a character from family guy.
string	produces a location from family guy.
string	produces a quote from family guy.
string	produces a character from hey arnold!
string	produces a location from hey arnold!
string	produces a quote from hey arnold!
string	produces a character from south park.
string	produces a quote from south park.
string	produces a character from twin peaks.
string	produces a location from twin peaks.
string	produces a quote from twin peaks.
string	produces a random aeternity wallet address
string	produces a random aeternity transaction
string	produces a random aeternity contract
string	produces a random aeternity oracle
string	produces a random string of alphabetic characters (no digits)
string	produces a random string of alphanumeric characters
string	produces a chuck norris fact. original list of facts: https://github.com/jenkinsci/chucknorris-plugin/blob/master/src/main/java/hudson/plugins/chucknorris/factgenerator.java
string	produces a random family relationship.
string	produces a random in-law relationship.
string	produces a random spouse relationship.
string	produces a random parent relationship.
string	produces a random sibling relationship.
string	produces the name of a subscription plan.
string	produces a subscription status.
string	produces the name of a payment method.
string	produces the name of a subscription term.
string	produces the name of a payment term.
string	produces the name of a song by umphrey's mcgee.
string	produces a character from the expanse.
string	produces a quote from the expanse.
string	produces a location from the expanse.
string	produces a ship from the expanse.
string	produces a character from the princess bride.
string	produces a quote from the princess bride.
string	produces a character from v for vendetta.
string	produces a speech from v for vendetta.
string	produces a quote from v for vendetta.
string	produces the name of a character from breaking bad.
string	produces the name of an episode from breaking bad.
string	produces an actor from the it crowd.
string	produces a character from the it crowd.
string	produces an email from the it crowd.
string	produces a quote from the it crowd.
string	produces a character from the venture bros.
string	produces an organization from the venture bros.
string	produces a vehicle from the venture bros.
string	produces a quote from the venture bros.
string	produces the name of a fighter from the smash bros games.
string	produces the name of a stage from the smash bros games.
string	produces a quote from michael scott.
string	produces a character from parks and recreation.
string	produces a city from parks and recreation.
string	produces the name of a champion from league of legends.
string	produces a location from league of legends.
string	produces a quote from league of legends.
string	produces a summoner spell from league of legends.
string	produces a mastery from league of legends.
string	produces a rank from league of legends.
string	produces the name of a hero from world of warcraft.
string	produces a quote from world of warcraft.
string	produces a character from rick and morty.
string	produces a location from rick and morty.
string	produces a quote from rick and morty.
string	produces a character from silicon valley.
string	produces a company from silicon valley.
string	produces a quote from silicon valley.
string	produces an app from silicon valley.
string	produces an invention from silicon valley.
string	produces a motto from silicon valley.
string	produces a url from silicon valley.
string	produces an email address from silicon valley.
string	produces the name of a character from sonic the hedgehog.
string	produces the name of a zone from sonic the hedgehog.
string	produces the name of a game from the sonic the hedgehog series.
string	produces a character from one piece.
string	produces a sea from one piece.
string	produces an island from one piece.
string	produces a location from one piece.
string	produces a quote from one piece.
string	produces an akuma no mi from one piece.
string	produces a character from lord of the rings.
string	produces a location from lord of the rings.
string	produces a quote from lord of the rings.
string	produces a character from bojack horseman.
string	produces a tongue twister from bojack horseman.
string	produces a quote from bojack horseman.
string	produces an actor from dumb and dumber.
string	produces a character from dumb and dumber.
string	produces a quote from dumb and dumber.
string	produces a character from game of thrones.
string	produces a house from game of thrones.
string	produces a city from game of thrones.
string	produces a quote from game of thrones.
string	produces a dragon from game of thrones.
string	produces a character from stranger things.
string	produces a quote from stranger things.
string	produces a character from the thick of it.
string	produces a department from the thick of it.
string	produces a position from the thick of it.
string	produces the name of an industry.
string	produces the name of a super-sector of an industry.
string	produces the name of a sector of an industry.
string	produces the name of a subsector of an industry.
string	produces a battleground from heroes of the storm.
string	produces a class from heroes of the storm.
string	produces a hero from heroes of the storm.
string	produces a quote from heroes of the storm.
string	produces a character from back to the future.
string	produces a date from back to the future.
string	produces a quote from back to the future.
string	produces the name of a greek philosopher.
string	produces a quote from a greek philosopher.
string	produces the name of a character from dragon ball.
string	produces the name of a programming language.
string	produces the name of a programming language's creator.
string	produces an active electrical component.
string	produces a passive electrical component.
string	produces an electromechanical electrical component.
string	produces a code word from the nato phonetic alphabet.
string	produces a character from how i met your mother.
string	produces a catch phrase from how i met your mother.
string	produces a high five from how i met your mother.
string	produces a quote from how i met your mother.
string	produces the real name of a character from sword art online.
string	produces the in-game name of a character from sword art online.
string	produces the name of a location from sword art online.
string	produces the name of an item from sword art online.
string	produces a character from aqua teen hunger force.
string	produces a character from the fresh prince of bel-air.
string	produces a celebrity from the fresh prince of bel-air.
string	produces a quote from the fresh prince of bel-air.
string	produces a character from the hitchhiker's guide to the galaxy.
string	produces a location from the hitchhiker's guide to the galaxy.
string	produces a marvin quote from the hitchhiker's guide to the galaxy.
string	produces a planet from the hitchhiker's guide to the galaxy.
string	produces a quote from the hitchhiker's guide to the galaxy.
string	produces a species from the hitchhiker's guide to the galaxy.
string	produces a starship from the hitchhiker's guide to the galaxy.
object	retrieves the policy for the given record, initializing it with the record and current user and finally throwing an error if the user is not authorized to perform the given action.
object	retrieves the policy for the given record.
object	retrieves the policy for the given record.
void	raises an error if authorization has not been performed, usually used as an `after_action` filter to prevent programmer error in forgetting to call {#authorize} or {#skip_authorization}.
void	raises an error if policy scoping has not been performed, usually used as an `after_action` filter to prevent programmer error in forgetting to call {#policy_scope} or {#skip_policy_scope} in index actions.
void	allow this action not to perform authorization.
void	allow this action not to perform policy scoping.
object	hook method which allows customizing which user is passed to policies and scopes initialized by {#authorize}, {#policy} and {#policy_scope}.
object	(see #strategy_method) builds a registered factory by name.
object	(see #strategy_method) creates a registered factory by name.
object	(see #strategy_method) builds a stubbed registered factory by name.
hash	(see #strategy_method) generates a hash of attributes for a registered factory by name.
array	(see #strategy_method_list)
array	(see #strategy_method_list)
array	(see #strategy_method_list)
array	(see #strategy_method_pair)
array	(see #strategy_method_pair)
array	(see #strategy_method_pair)
void	core build thor command
void	handles incoming events from the builder.
boolean	find empty directories in the build folder and remove them.
void	start an interactive console in the context of the provided object.
string	template files are relative to this file
boolean	run the build phase.
void	actually export the file.
void	get a list of all the paths in the destination folder and save them for comparison against the files we build in this cycle
void	add a proc to ignore paths with either a regex or block.
void	disconnect a specific watcher.
void	increment the internal counter for changes.
boolean	whether a validator matches a file.
boolean	by default extensions can only be activated once in a project. this is an advanced option.
boolean	by default extensions can only be activated once in a project. this is an advanced option.
void	declare helpers to be added the global middleman application. this accepts either a list of modules to add on behalf of this extension, or a block whose contents will all be used as helpers in a new module.
void	takes a method within this extension and exposes it globally on the main `app` instance. used for very low-level extensions which many other extensions depend upon. such as data and file watching.
void	takes a method within this extension and exposes it inside the scope of the config.rb sandbox.
void	takes a method within this extension and exposes it inside the scope of the templating engine. like `helpers`, but scoped.
void	reset all {extension.after_extension_activated} callbacks.
void	register to run a block after a named extension is activated.
void	notify that a particular extension has been activated and run all registered {extension.after_extension_activated} callbacks.
hash	parse json frontmatter out of a string
string	extract the text of a rack response as a string. useful for extensions implemented as rack middleware.
array	glob a directory and try to keep path encoding consistent.
array	get the pwd and try to keep path encoding consistent.
string	expand a path to include the index file if it's a directory
boolean	takes a matcher, which can be a literal string or a string containing glob expressions, or a regexp, or a proc, or anything else that responds to #match or #call, and returns whether or not the given path matches that matcher.
void	register a new extension. choose a name which will be used to activate the extension in `config.rb`, like this:      activate :my_extension  provide your extension class either as the second parameter:      middleman::extensions.register(:my_extension, myextension)  or better, return it from a block, which allows you to lazily require the implementation:      middleman::extensions.register :my_extension do       require 'my_extension'       myextension     end
string	root project directory (overwritten in middleman build/server)
boolean	whether to serve the preview server over https.
string	the (optional) path to the ssl cert to use for the preview server.
string	the (optional) private key for the certificate in :ssl_certificate.
string	name of the source directory
boolean	if we should not run the sitemap.
boolean	if we should exit before ready event.
string	middleman mode. defaults to :server, set to :build by the build process
string	middleman environment. defaults to :development
string	which file should be used for directory indexes
boolean	whether to strip the index file name off links to directory indexes
boolean	whether to include a trailing slash when stripping the index file
string	location of javascripts within source.
string	location of stylesheets within source.
string	location of images within source. used by html helpers.
string	location of fonts within source.
string	location of layouts within source. used by renderers.
string	where to build output files
string	default prefix for building paths. used by html helpers.
string	default layout name
string	default string encoding for templates and output.
boolean	should padrino include crsf tag
boolean	backwards compatible helper. whether we're in production mode.
void	use rack middleware  contract any, args[any], maybe[proc] => any
void	add rack app mapped to specific path
void	set attributes (global variables)
object	get the value of a setting by key. returns nil if there is no such setting.
string	render an on-disk file. used for everything, including layouts.
string	get the template data from a path
void	register an object which can transform the sitemap resource list. best to register these in a `before_configuration` or `after_configuration` hook.
void	add a new mime-type for a specific extension
void	start an instance of middleman::application
void	detach the current middleman::application instance
void	simply stop, then start the server
void	stop the current instance, exit webrick
void	trap some interrupt signals and shut down smoothly
void	initialize webrick
void	attach a new middleman::application instance
void	detach the current middleman::application instance
string	add exception messaging
hash	change sass path, for url functions, to the build folder if we're building
string	get one placeholder word
string	get some number of placeholder words
string	get one placeholder sentence
string	get some number of placeholder sentences
string	get one placeholder paragraph
string	get some number of placeholder paragraphs
string	get a placeholder date
string	get a placeholder name
string	get a placeholder first name
string	get a placeholder last name
string	get a placeholder 140 character tweet about philip the purple otter via http://www.kevadamson.com/talking-of-design/article/140-alternative-characters-to-lorem-ipsum
string	get a placeholder email address
string	get a placeholder image, using placehold.it by default
object	pick a random item from a given range
string	the source path of this resource (relative to the source directory, without template extensions)
string	the output path in the build directory for this resource
string	the output path in the build directory for this resource
string	the output path in the build directory for this resource the path to use when requesting this resource. normally it's the same as {#destination_path} but it can be overridden in subclasses.
boolean	whether the resource is ignored
string	render this resource without content filters
string	a path without the directory index - so foo/index.html becomes just foo. best for linking.
void	ignore a resource directly, without going through the whole ignore filter stuff.
string	the normalized source path of this resource (relative to the source directory, without template extensions)
string	return the current buffer to the caller and clear the value internally. used when moving between templates when rendering layouts or partials.
void	restore a previously saved buffer.
void	allow layouts to be wrapped in the contents of other layouts.
string	sinatra/padrino compatible render method signature referenced by some view helpers. especially partials.
string	locate a partial relative to the current path or the source dir, given a partial's path.
string	render a path with locs, opts and contents block.  contract isa['middleman::sourcefile'], hash, hash, maybe[proc] => string
void	activate an extension, optionally passing in options. this method is typically used from a project's `config.rb`.
string	render a template, with layout, given a path
string	find a layout for a given engine
string	apply a uri template with the given data, producing a normalized middleman path.
hash	convert a date into a hash of components to strings suitable for using in a url template.
string	detect and minify inline content
void	stop the listener.
void	the `listen` gem callback.
string	add exception messaging
array	return bind addresses
array	return server urls
array	return server config urls
void	import an external glob into `source`
array	get names for ip
array	get ips for name
array	path to hosts file  this looks for mm_hostsrc in your environment
void	after we config, find new files since config can change paths.
void	setup a move from one path to another
string	the path for this resource if it were a directory, and not a file (e.g., for 'gallery.html' this would return 'gallery/')
hash	hosts + ports for mdns resolver  this looks for mm_mdnsrc in your environment. if you are going to use ipv6-addresses: make sure you do not forget to add the port at the end.  mm_mdnsrc=ip:port ip:port
integer	check for port
hash	"magically" find namespaces of data if they exist
hash	convert all the data into a static hash
hash	hosts + ports for mdns resolver  this looks for mm_mdnsrc in your environment. if you are going to use ipv6-addresses: make sure you do not forget to add the port at the end.  mm_mdnsrc=ip:port ip:port
string	make information of internal server class avaible to make debugging easier. this can be used to log the class which was used to determine the preview server settings
string	the reason why the information is not valid
string	the server name
string	the bind address of server
integer	the port on which the server should listen
array	a list of site addresses
array	a list of listeners
array	get names for ip
array	get ips for name
hash	store static data hash
string	the path to the root of the application. better errors uses this property to determine if a file in a backtrace should be considered an application frame. if you are using better errors with rails, you do not need to set this attribute manually.
string	the path to the root of the application. better errors uses this property to determine if a file in a backtrace should be considered an application frame. if you are using better errors with rails, you do not need to set this attribute manually.
array	the ignored instance variables.
array	the ignored instance variables.
array	calls the better errors middleware
array	generate doc structure to be used in sidebar navigation
hash	rubocop:disable metrics/methodlength generate doc url by prepending its parents urls
hash	parse sourcekitten stdout output as json
string	get the location of the caller (from the recipe). grabs the first caller that is *not* in the chef gem proper (allowing us to weed out internal calls and give the user a more useful perspective).
string	the `policy_name` for this node. setting this to a non-nil value will enable policyfile mode when `chef-client` is run. if set in the config file or in node json, running `chef-client` will update this value.
string	the `policy_group` for this node. setting this to a non-nil value will enable policyfile mode when `chef-client` is run. if set in the config file or in node json, running `chef-client` will update this value.
string	returns a uuid that uniquely identifies this node for reporting reasons.  the node is read in from disk if it exists, or it's generated if it does does not exist.
hash	extra node attributes that were applied to the node.
object	get a value from the nodemap via applying the node to the filters that were set on the key.
object	list all matches for the given node and key from the nodemap, from most-recently added to oldest.
hash	remove a class from all its matchers in the node_map, will remove mappings completely if its the last matcher left  note that this leaks the internal structure out a bit, but the main consumer of this (poise/halite) cares only about the keys in the returned hash.
void	set this map to locked mode. this is used to prevent future overwriting of existing names.
string	the name of this property.
string	a description of this property.
string	when this property was introduced
string	a desciption of the default value of this property.
void	defines an action method on the provider, running the block to compile the resources, converging them, and then checking if any were updated (and updating new-resource if so)
void	deprecation stub for the old use_inline_resources mode.
boolean	handle patchy convergence safely.  - does *not* call the block if the current_resource's properties match   the properties the user specified on the resource. - calls the block if current_resource does not exist - calls the block if the user has specified any properties in the resource   whose values are *different* from current_resource. - does *not* call the block if why-run is enabled (just prints out text). - prints out automatic green text saying what properties have changed.
string	the name of this particular resource.  this special resource attribute is set automatically from the declaration of the resource, e.g.    execute 'vitruvius' do     command 'ls'   end  will set the name to "vitruvius".  this is also used in to_s to show the resource name, e.g. `execute[vitruvius]`.  this is also used for resource notifications and subscribes in the same manner.  this will coerce any object into a string via #to_s.  arrays are a special case so that `package ["foo", "bar"]` becomes package[foo, bar] instead of the more awkward `package[["foo", "bar"]]` that #to_s would produce.
integer	the number of times to retry this resource if it fails by throwing an exception while running an action.  default: 0  when the retries have run out, the resource will throw the last exception.
integer	the number of seconds to wait between retries.  default: 2.
boolean	whether to treat this resource's data as sensitive.  if set, no resource data will be displayed in log output.
integer	the time it took (in seconds) to run the most recently-run action.  not cumulative across actions.  this is set to 0 as soon as a new action starts running, and set to the elapsed time at the end of the action.  action.  not cumulative.
object	the value of the identity of this resource.  - if there are no identity properties on the resource, `name` is returned. - if there is exactly one identity property on the resource, it is returned. - if there are more than one, they are returned in a hash.
boolean	whether or not this resource was updated during an action.  if multiple actions are set on the resource, this will be `true` if *any* action caused an update to happen.
boolean	whether or not this resource was updated during the most recent action. this is set to `false` at the beginning of each action.
boolean	if the resource's action should run in separated compile/converge mode.
boolean	set or return if this resource is in preview mode.  this only has value in the resource_inspector to mark a resource as being new-to-chef-core. its meaning is probably more equivalent to "experimental" in that the api might change even in minor versions due to bugfixing and is not considered "stable" yet.
string	preface an exception message with generic resource information.
string	gets or sets the client name.
string	gets or sets the public key.
boolean	gets or sets whether this client is a validator.
string	gets or sets the private key.
hash	the hash representation of the object. includes the name and public_key. private key is included if available.
hash	the hash representation of the object. includes the name and public_key. private key is included if available.
string	the json representation of the object.
void	emit a deprecation message.
string	render the url for the deprecation documentation page.
string	render the user-visible message for this deprecation.
string	return the deprecation key as would be used with {chef::deprecated.create}.
void	set the id and documentation page path for this deprecation.  used in subclasses to set the data for each type of deprecation.
hash	hash of factoids for a reboot request.
hash	hash of factoids for a reboot request.
string	look up an attribute filename.
string	returns a message for sensitive repository url if sensitive is true otherwise repository url is returned
string	gets or sets the client name.
string	gets or sets the public key.
boolean	gets or sets whether this client is a validator.
string	private key. the server will return it as a string. set to true under api v0 to have the server regenerate the default key.
hash	the hash representation of the object. includes the name and public_key. private key is included if available.
hash	the hash representation of the object. includes the name and public_key. private key is included if available.
string	the json representation of the object.
string	concatenates various information and formulates a complete string that could be written in the crontab
string	the checksum of the rendered file.  this has to be saved on the new_resource for the 'after' state for reporting but we cannot mutate the new_resource.checksum which would change the user intent in the new_resource if the resource is reused.
string	the checksum of the rendered file.  this has to be saved on the new_resource for the 'after' state for reporting but we cannot mutate the new_resource.checksum which would change the user intent in the new_resource if the resource is reused.
string	default config prefix paths based on platform
string	name of the cookbook containing the template resource, e.g.:   test
string	name of the recipe containing the template resource, e.g.:   default
string	string representation of the line in the recipe containing the template resource, e.g.:   /users/lamont/solo/cookbooks/test/recipes/default.rb:2:in `from_file'
string	path to the recipe containing the template resource, e.g.:   /users/lamont/solo/cookbooks/test/recipes/default.rb
string	line in the recipe containing the template resource, e.g.:   2
string	name of the template source itself, e.g.:   foo.erb
string	path to the template source itself, e.g.:   /users/lamont/solo/cookbooks/test/templates/default/foo.erb
string	the default bootstrap template to use to bootstrap a server. this is a public api hook which knife plugins use or inherit and override.
string	the server_name is the dns or ip we are going to connect to, it is not necessarily the node name, the fqdn, or the hostname of the server.  this is a public api hook which knife plugins use or inherit and override.
void	perform any teardown or cleanup necessary by the plugin  plugins that subclass bootstrap, e.g. knife-ec2, can use this method to display a message or perform any cleanup
array	helper for subclasses to reject nil out of an array.  it allows using the array form of shell_out (which avoids the need to surround arguments with quote marks to deal with shells).  usage:   shell_out!(*clean_array("useradd", universal_options, useradd_options, new_resource.username))  universal_options and useradd_options can be nil, empty array, empty string, strings or arrays and the result makes sense.  keeping this separate from shell_out!() makes it a bit easier to write expectations against the shell_out args and be able to omit nils and such in the tests (and to test that the nils are being rejected correctly).
boolean	validate a provided value is between two other provided values we also allow * as a valid input
boolean	validate the provided month value to be jan - dec, 1 - 12, or *
boolean	validate the provided day of the week is sun-sat, 0-7, or *
string	the description of the property
array	hook that subclasses use to populate the candidate_version(s)
array	hook that subclasses use to populate the candidate_version(s)
string	returns the package names which need to be modified.  if the resource was called with an array of packages then this will return an array of packages to update (may have 0 or 1 entries).  if the resource was called with a non-array package_name to manage then this will return a string rather than an array.  the output of this is meant to be fed into subclass interfaces to install/upgrade packages and not all of them are array-aware.
string	returns the package versions which need to be modified.  if the resource was called with an array of packages then this will return an array of versions to update (may have 0 or 1 entries).  if the resource was called with a non-array package_name to manage then this will return a string rather than an array.  the output of this is meant to be fed into subclass interfaces to install/upgrade packages and not all of them are array-aware.
array	returns array of all packages which are missing candidate versions.
array	returns an array of all forced packages which are missing candidate versions
array	tip: less error prone to simply always call resolved_source_array, even if you don't think that you need to.
array	helper to handle use_package_name_for_source to convert names into local packages to install.
void	post resource creation validation
integer	the "nesting" level.  outer resources in recipe context are 0 here, while for every sub-resource_collection inside of a custom resource this number is incremented by 1. resources that are fired via build-resource or manually creating and firing
integer	the "nesting" level.  outer resources in recipe context are 0 here, while for every sub-resource_collection inside of a custom resource this number is incremented by 1. resources that are fired via build-resource or manually creating and firing
void	force the resource to compile time if the compile time property has been set
void	this resource forces itself to run at compile_time
void	this resource forces itself to run at compile_time
string	if we're given no resources, dump all of chef's built ins otherwise, if we have a path then extract all the resources from the cookbook or else do a list of built in resources
integer	this tries to find the user to execute brew as.  if a user is provided, that overrides the brew executable user.  it is an error condition if the brew executable owner is root or we cannot find the brew executable.
string	use find_homebrew_uid to return the uid and then lookup the name from that uid because sometimes you want the name not the uid
string	determine the key filename from the cert filename
string	generate pem format of the public key given a private key
string	generate a pem file given a cipher, key, an optional key_password
string	generate pem format of the public key given a private key
string	generate a pem file given a cipher, key, an optional key_password
array	generate an array of x509 extensions given a hash of extensions
integer	generate a random serial
integer	generate the next crl number available for a x509 crl given
string	helper to build a powershell command around the script to run.
integer	compare 2 versions to each other to see which is newer. this differs from the standard package method because we need to be able to parse debian version strings which contain tildes which gem cannot properly parse
boolean	check to see if value needs any changes  ==== returns <true>:: if a change is required <false>:: if a change is not required
array	list of things values must be equal to.  uses ruby's `==` to evaluate (equal_to == value).  at least one must match for the value to be valid.  `nil` passes this validation automatically.
integer	compare 2 versions to each other to see which is newer. this differs from the standard package method because we need to be able to parse debian version strings which contain tildes which gem cannot properly parse
array	helper to return all the nanes of the missing sources for error messages.
hash	helper to construct hash of names-to-sources.
hash	helper to construct hash of names-to-package-information.
array	return candidate version array from pkg-deb -w against the source file(s).
array	return package names from the candidate source file(s).
array	find all objects in the given location if the object type is file it will look for all *.{json,rb} files, otherwise it will lookup for folders only (useful for data_bags)
array	this package provider does not support package arrays however, there may be multiple versions for a single package so the first element may be a nested array  fixme: this breaks the semantics of the superclass and needs to get unwound.  since these package providers don't support multipackage they can't put multiple versions into this array.  the windows package managers need this in order to uninstall multiple installed version, and they should track that in something like an `uninstall_version_array` of their own.  the superclass does not implement this kind of feature.  doing this here breaks lsp and will create bugs since the superclass will not expect it at all.  the `current_resource.version` also must not be an array if the package provider is not multipackage.  the existing implementation of package_provider.installed_version should probably be what `uninstall_version_array` is, and then that list should be sorted and last/first'd into the current_resource.version.  the current_version_array method was not intended to be overwritten by sublasses (but ruby provides no feature to block doing so -- it is already marked as private).
boolean	queries the delayed auto-start setting of the auto-start service. if the service is not auto-start, this will return nil.
void	this resource forces itself to run at compile_time
void	make sure we assign the appropriate underlying providers based on what package managers exist on this freebsd system or the source of the package
array	get the files to tranfer.  this returns files in lexicographical sort order.  fixme: it should do breadth-first, see chef-5080 (please use a performant sort)
string	either the explicit cookbook that the user sets on the resource, or the implicit cookbook_name that the resource was declared in.
string	zypper repos are allowed to have spaces in the names
string	return the specified cookbook name or the cookbook containing the resource.
string	extract the gpg key fingerprint from a local file
array	lazy initializer for candidate_version.  a nil value means that there is no candidate version and the package is not installable (generally an error).
string	magic to find where chocolatey is installed in the system, and to return the full path of choco.exe
array	use the available_packages hash helper to create an array suitable for using in candidate_version
array	use the installed_packages hash helper to create an array suitable for using in current_resource.version
hash	helper to construct hash of names-to-versions, requested on the new_resource. if new_resource.version is nil, then all values will be nil.
string	helper to construct optional args out of new_resource
hash	available packages in chocolatey as a hash of names mapped to versions if pinning a package to a specific version, filter out all non matching versions (names are downcased for case-insensitive matching)
hash	installed packages in chocolatey as a hash of names mapped to versions (names are downcased for case-insensitive matching)
hash	helper to convert choco.exe list output to a hash (names are downcased for case-insenstive matching)
array	helper to downcase all names in an array
string	returns the version of chef to install (as recognized by the omnitruck api)
array	the positional arguments from the argument list provided by the users. used to search for subcommands and categories.
string	the organization name the node is associated with. for chef solo runs the default is "chef_solo" which can be overridden by the user.
hash	construct the message payload that is sent to the datacollector server at the end of a chef run.
string	if the identity property of a resource has been lazied (via a lazy name resource) evaluating it for an unprocessed resource (where the preconditions have not been met) may cause the lazy evaluator to throw -- and would otherwise crash the data collector.
hash	fixme: this is likely necessary due to the same lazy issue with properties and failing resources?
string	helper to convert action record status (symbols) to strings for the data collector server. does a bit of necessary underscores-to-dashes conversion to comply with the data collector api.
string	tempfile to use to write newly created client credentials to.  this method is public so that the knife bootstrapper can read then and pass the value into the handler for chef vault which needs the client cert we create here.  we hang onto the tmpdir as an ivar as well so that it will not get gc'd and removed
array	accesses the run_list and coerces it into an array, changing nils into the empty array, and splitting strings representations of run_lists into arrays.
void	if resource and/or notifying_resource is not a resource object, this will look them up in the resource collection and fix the references from strings to actual resource objects.
void	this will look up the resource if it is not a resource object.  it will complain if it finds multiple resources, can't find a resource, or gets invalid syntax.
void	this will look up the notifying_resource if it is not a resource object.  it will complain if it finds multiple resources, can't find a resource, or gets invalid syntax.
array	get an array of strings of the fully-qualified recipe names (with ::default appended) and with the versions in "name@version" format.
array	for "foo::default" also include "foo", for "foo" also include "foo::default", for "foo::bar" just return "foo::bar".  this makes it easier for people to search on default recipe names.
string	creates a temporary directory on the remote host if it hasn't already. caches directory location. for *nix, it will ensure that the directory is owned by the logged-in user
string	normalizes path across os's - always use forward slashes, which windows and *nix understand.
hash	construct the message payload that is sent to the datacollector server at the start of a chef run.
hash	helper to return a ruby object represeting all the data bags and items to update via chef-vault.
array	converts strings of features into an array. array objects are lowercased
string	an inspector that clips the output to `max_length` chars. in case of > `max_length` chars the `#<object...> notation is used.
void	sets the pry prompt.
array	generate completions.
object	injects a local variable into the provided binding.
boolean	pass a line of input to pry.  this is the equivalent of `binding#eval` but with extra pry!  in particular: 1. pry commands will be executed immediately if the line matches. 2. partial lines of input will be queued up until a complete expression has    been accepted. 3. output is written to `#output` in pretty colours, not returned.  once this method has raised an exception or returned false, this instance is no longer usable. {#exit_value} will return the session's breakout value if applicable.
boolean	if the given line is a valid command, process it in the context of the current `eval_string` and binding.
boolean	same as process_command, but outputs exceptions to `#output` instead of raising.
object	execute the specified hook. if executing a hook raises an exception, we log that and then continue sucessfully. to debug such errors, use the global variable $pry_hook_error, which is set as a result.
string	returns the appropriate prompt to use.
void	append the given line. +lineno+ is one more than the last existing line, unless specified otherwise.
void	append the given line. +lineno+ is one more than the last existing line, unless specified otherwise.
string	get the comment that describes the expression on the given line number.
string	get the multiline expression that starts on the given line number.
string	return an unformatted string of the code.
integer	return the number of lines stored.
void	set up the repl session.
void	clean up after the repl session.
integer	calculates correct overhang for current line. supports vi readline mode and its indicators such as "(ins)" or "(cmd)".
object	read the value stored at `index`.
void	clear the buffer and reset count.
object	execute the list of hooks for the `event_name` event.
hash	`add_hook`/`delete_hook` for that.
void	clear all hooks functions for a given event.
string	if it is a string, then that string is used as the shell command to invoke the editor.  if it responds to #call is callable then `file`, `line`, and `reloading` are passed to it. `reloading` indicates whether pry will be reloading code after the shell command returns. all parameters are optional.
string	a string that must precede all commands. for example, if is is set to "%", the "cd" command must be invoked as "%cd").
boolean	whether pry should trap sigint and cause it to raise an interrupt exception. this is only useful on jruby, mri does this for us.
string	indents a string and returns it. this string can either be a single line or multiple ones.
array	get the module nesting at the given point in the given string.  note if the line specified contains a method definition, then the nesting at the start of the method definition is used. otherwise the nesting from the end of the line is used.
array	given a string of ruby code, use coderay to export the tokens.
string	all the open delimiters, in the order that they first appeared.
array	return a list of strings which can be used to re-construct the module.nesting at the current point in the file.  returns nil if the syntax of the file was not recognizable.
string	return a string which, when printed, will rewrite the previous line with the correct indentation. mostly useful for fixing 'end'.
string	get the name of the method as a string, regardless of the underlying method#name type.
string	get the name of the method including the class on which it was defined.
integer	load the input history using `history.loader`.
string	add a line to the input history, ignoring blank and duplicate lines.
string	add a line to the input history, ignoring blank and duplicate lines.
array	return an array containing all stored history.
array	filter the history with the histignore options
void	prints a warning message with exact file and line location, similar to how ruby's -w prints warnings.
void	paints the `line` of code.
void	prepends the line number `lineno` to the `line`.
void	prepends a marker "=>" or an empty marker to the +line+.
void	indents the `line` with +distance+ spaces.
void	when {pry::testable} is included into another module or class, the following modules are also included: {pry::testable::mockable}, {pry::testable::evalable}, {pry::testable::variables}, and {pry::testable::utility}.
void	sets various configuration options that make pry optimal for a test environment, see source code for complete details.
void	reset the pry configuration to their default values.
array	generate completions for the user's search.
string	remove any color codes from _text_.
string	returns _text_ as bold text for use on a terminal.
string	returns `text` in the default foreground colour. use this instead of "black" or "white" when you mean absence of colour.
string	returns _text_ in a numbered list, beginning at _offset_.
object	call the block that was registered with this command.
object	set up `opts` and `args`, and then call `process`.  this method will display help if necessary.
array	generate shell completions
string	given a group name and an array of commands, return the help string for those commands.
string	clean search terms to make it easier to search group names
boolean	checks +replay_sequence+ for the presence of neighboring replay calls.
string	update the definition line so that it can be eval'd directly on the method's owner instead of from the original context.  in particular this takes `def self.foo` and turns it into `def foo` so that we don't end up creating the method on the singleton class of the singleton class by accident.  this is necessarily done by string manipulation because we can't find out what syntax is needed for the argument list by ruby-level introspection.
string	apply wrap_for_owner and wrap_for_nesting successively to `source`
string	update the source code so that when it has the right owner when eval'd.  this (combined with definition_for_owner) is backup for the case that wrap_for_nesting fails, to ensure that the method will stil be defined in the correct place.
string	update the new source code to have the correct module.nesting.  this method uses syntactic analysis of the original source file to determine the new nesting, so that we can tell the difference between:    class a; def self.b; end; end   class << a; def b; end; end  the resulting code should be evaluated in the toplevel_binding.
string	the name of the module if it has one, otherwise #<class:0xf00>.
object	get the instance associated with this singleton class.
string	returns documentation for the module. this documentation is for the primary candidate, if you would like documentation for other candidates use `wrappedmodule#candidate` to select the candidate you're interested in.
string	returns the source for the module. this source is for the primary candidate, if you would like source for other candidates use `wrappedmodule#candidate` to select the candidate you're interested in.
void	if `end_line` is equal to `nil`, then calculate it from the first parameter, `start_line`. otherwise, leave it as it is.
void	for example, if the range is 4..10, then `start_line` would be equal to 4 and `end_line` to 10.
object	get the hypothesized owner of the method.
void	creates a tempfile then unlinks it after the block has yielded.
string	the content (i.e code/docs) for the selected object. if the user provided a bare code object, it returns the source. if the user provided the `-i` or `-o` switches, it returns the selected input/output lines joined as a string. if the user used `-d code_object` it returns the docs for that code object.
string	given a string and a range, return the `range` lines of that string.
string	the selected `pry_instance.output_ring` as a string, as specified by the `-o` switch.
string	the selected `pry_instance.input_ring` as a string, as specified by the `-i` switch.
string	open a temp file and yield it to the block, closing it after
string	remove any common leading whitespace from every line in `text`. this can be used to make a heredoc line up with the left margin, without sacrificing the indentation level of the source code.
string	restrict a string to the given range of lines (1-indexed)
array	this method is used by `candidate#source_location` as a starting point for the search for the candidate's definition.
integer	return the number of lines between the start of the class definition and the start of the last method. we use this value so we can quickly grab these lines from the file (without having to check each intervening line for validity, which is expensive) speeding up source extraction.
string	given a string that makes up a comment in a source-code file parse out the content that the user is intended to read. (i.e. without leading indentation, #-characters or shebangs)
string	revaluate the string (str) and perform interpolation.
array	extract necessary information from a line that command.matches? this command.  returns an array of four elements:  ```  [string] the portion of the line that matched with the command match  [string] a string of all the arguments (i.e. everything but the match)  [array]  the captures caught by the command_regex  [array]  the arguments obtained by splitting the arg_string ```
object	process a line that command.matches? this command.
array	generate completions for this command
object	run the command with the given `args`.  this is a public wrapper around `#call` which ensures all preconditions are met.
object	run the `#call` method and all the registered hooks.
array	normalize method arguments according to its arity.
hash	get the logger options
string	tries to extract the calling guard plugin name from the call stack.
string	returns the group title.
string	string representation of the group.
string	returns the non-namespaced class name of the plugin
string	returns the non-namespaced name of the plugin
object	called once when guard starts. please override initialize method to init stuff.
object	called when `stop|quit|exit|s|q|e + enter` is pressed (when guard quits).
object	called when `reload|r|z + enter` is pressed. this method should be mainly used for "reload" (really!) actions like reloading passenger/spork/bundler/...
object	called when just `enter` is pressed this method should be principally used for long action like running all specs/tests/...
object	default behaviour on file(s) changes that the guard plugin watches.
object	called on file(s) additions that the guard plugin watches.
object	called on file(s) modifications that the guard plugin watches.
object	called on file(s) removals that the guard plugin watches.
string	returns the plugin's name (without "guard-").
string	returns the plugin's class name without the guard:: namespace.
string	string representation of the plugin.
string	executes a watcher action.
boolean	todo: allow custom user idle jobs, e.g. [:pry, :sleep, :exit, ...]
array	returns a list of guard plugin gem names installed locally.
string	locates a path to a guard plugin gem.
hash	parse a single heading and return a hash  the following heading structures are currently valid: - ## [v1.0.2](https://github.com/zanui/chef-thumbor/tree/v1.0.1) (2015-03-24) - ## [v1.0.2](https://github.com/zanui/chef-thumbor/tree/v1.0.1) - ## v1.0.2 (2015-03-24) - ## v1.0.2
hash	returns a censored options hash.
integer	returns the number of pages for a api call
void	fetch event for all issues and add them to 'events'
void	fetch comments for prs and add them to "comments"
hash	fetch and cache comparison between two github refs
hash	fetch commit for specified event
array	fetch all commits
hash	return the oldest commit in a repo
void	iterates through all pages until there are no more :next pages to follow yields the result per page
object	this is wrapper with rescue block
string	returns github token. first try to use variable, provided by --token option, otherwise try to fetch it from changelog_github_token env variable.
hash	returns hash of all querystring variables in given uri.
string	generates log entry with header and body
array	turns the argument from the commandline of --configure-sections or --add-sections into an array of section objects.
string	generates header text for an entry.
string	generates complete body text for a tag (without a header)
array	default sections to used when --configure-sections is not set.
array	iterates through sections and sorts labeled issues into them based on the label mapping. returns any unmapped or unlabeled issues.
string	returns the content of a section.
string	parse issue and generate single line formatted issue line.  example output: - add coveralls integration [\#223](https://github.com/github-changelog-generator/github-changelog-generator/pull/223) (@github-changelog-generator)
string	encapsulate characters to make markdown look as expected.
string	main function to start changelog generation
array	filters issues and pull requests based on, respectively, `actual_date` and `merged_at` timestamp fields. `actual_date` is the detected form of `closed_at` based on merge event sha commit times.
string	the full cycle of generation for whole project
hash	prs to include in this section will be >= [left tag date] and <= [right tag date] rubocop:disable style/for - for allows us to be more concise
array	detect link, name and time for specified tag.
array	return tags after filtering tags in lists provided by option: --exclude-tags
array	fetch event for issues and pull requests
array	associate merged prs by the merge sha contained in each tag. if the merge_commit_sha is not found in any tag's history, skip association.
array	associate merged prs by the head of the release branch. if no --release-branch was specified, then the github default branch is used.
array	associate merged prs by the sha detected in github comments of the form "rebased commit: <sha>". for use when the merge_commit_sha is not in the actual git history due to rebase.
boolean	detect if a sha occurs in the --release-branch. uses the github repo default branch if not specified.
array	delete all issues with labels from options[:exclude_labels] array
array	only include issues without labels if options[:add_issues_wo_labels]
array	add all issues, that should be in that tag, according milestone
array	method filter issues, that belong only specified tag range
array	method filter issues, that belong only specified tag range
array	include issues with labels, specified in :include_labels
array	general filtered function
array	filter issues according labels
array	this method fetches missing params for pr and filter them by specified options it include add all pr's with labels from options[:include_labels] array and exclude all from :exclude_labels array.
array	returns all the attribute names of the type in the appropriate order. the {key_attributes} come first, then the {provider}, then the {properties}, and finally the {parameters} and {metaparams}, all in the order they were specified in the respective files.
void	provides iteration over meta-parameters.
void	creates a new `ensure` property with configured default values or with configuration by an optional block. this method is a convenience method for creating a property `ensure` with default accepted values. if no block is specified, the new `ensure` property will accept the default symbolic values `:present`, and `:absent` - see {puppet::property::ensure}. if something else is wanted, pass a block and make calls to {puppet::property.newvalue} from this block to define each possible value. if a block is passed, the defaults are not automatically added to the set of valid values.
boolean	returns true if this type is applicable to the given target.
void	processes the options for a named parameter.
array	returns all meta-parameter names.
string	returns the documentation for a given meta-parameter of this type.
array	returns cached {key_attribute_parameters} names. key attributes are properties and parameters that comprise a composite key or "uniqueness key".
object	produces a resource's _uniqueness_key_ (or composite key). this key is an array of all key attributes' values. each distinct tuple must be unique for each resource type.
boolean	creates a new property value holder for the resource if it is valid and does not already exist
object	gets the 'should' (wanted state) value of a parameter or property by name. to explicitly get the 'is' (current state) value use `o.is(:name)`, and to explicitly get the 'should' value use `o.should(:name)`
void	iterates over the properties that were set on this resource.
void	iterates over all parameters with value currently set.
object	registers an attribute to this resource type instance. requires either the attribute name or class as its argument. this is a noop if the named property/parameter is not supported by this resource. otherwise, an attribute instance is created and kept in this resource's parameters hash.
string	returns a string representation of the resource's containment path in the catalog.
object	returns the value of this object's parameter given by name
void	removes this object (from where?)
void	lifecycle method for a resource. this is called during graph creation. it should perform any consistency checking of the catalog and raise a puppet::error if the transaction should be aborted.  it differs from the validate method, since it is called later during initialization and can rely on self.catalog to have references to all resources that comprise the catalog.
boolean	returns the `noop` run mode status of this.
array	returns a list of loaded providers by name. this method will not load/search for available providers.
void	ensures there is a `:provider` parameter defined. should only be called if there are providers.
object	removes the implementation class of a given provider.
void	adds a block producing a single name (or list of names) of the given resource type name to autorelate.  the four relationship types require, before, notify, and subscribe are all supported.  be *careful* with notify and subscribe as they may have unintended consequences.  resources in the catalog that have the named type and a title that is included in the result will be linked to the calling resource as a requirement.
void	provides iteration over added auto-requirements (see {autorequire}).
void	provides iteration over added auto-requirements (see {autobefore}).
void	provides iteration over added auto-requirements (see {autosubscribe}).
void	provides iteration over added auto-requirements (see {autonotify}).
void	sets the initial list of tags to associate to this resource.
string	the title attribute of what ???
string	returns the resource's name
void	initializes all of the variables that must be initialized for each subclass.
string	returns the name of this type (if specified) or the parent type #to_s. the returned name is on the form "puppet::type::<name>", where the first letter of name is capitalized.
void	creates a `validate` method that is used to validate a resource before it is operated on. the validation should raise exceptions if the validation finds errors. (it is not recommended to issue warnings as this typically just ends up in a logfile - you should fail if a validation fails). the easiest way to raise an appropriate exception is to call the method {puppet::util::errors.fail} with the message as an argument.
void	creates a log entry with the given message at the log level specified by the parameter `loglevel`
void	mark parameters associated with this type as sensitive, based on the associated resource.  currently, only instances of `puppet::property` can be easily marked for sensitive data handling and information redaction is limited to redacting events generated while synchronizing properties. while support for redaction will be broadened in the future we can't automatically deduce how to redact arbitrary parameters, so if a parameter is marked for redaction the best we can do is warn that we can't handle treating that parameter as sensitive and move on.  in some unusual cases a given parameter will be marked as sensitive but that sensitive context needs to be transferred to another parameter. in this case resource types may need to override this method in order to copy the sensitive context from one parameter to another (and in the process force the early generation of a parameter that might otherwise be lazily generated.) see `puppet::type.type(:file)#set_sensitive_parameters` for an example of this.
void	sets the name of the resource from a hash containing a mapping of `name_var` to value. sets the value of the property/parameter appointed by the `name_var` (if it is defined). the value set is given by the corresponding entry in the given hash - e.g. if name_var appoints the name `:path` the value of `:path` is set to the value at the key `:path` in the given hash. as a side effect this key/value is then removed from the given hash.
void	sets parameters from the given hash. values are set in _attribute order_ i.e. higher priority attributes before others, otherwise in the order they were specified (as opposed to just setting them in the order they happen to appear in when iterating over the given hash).  attributes that are not included in the given hash are set to their default value.
string	returns a reference to this as a string in "type[name]" format.
string	returns the title of this object, or its name if title was not explicitly set. if the title is not already set, it will be computed by looking up the {#name_var} and using that value as the title.
void	checks each reference to assert that what it references exists in the catalog.
string	resolve a path for an executable to the absolute path. this tries to behave in the same manner as the unix `which` command and uses the `path` environment variable.
string	percent-encodes a uri query parameter per rfc3986 - https://tools.ietf.org/html/rfc3986  the output will correctly round-trip through uri.unescape
string	percent-encodes a uri string per rfc3986 - https://tools.ietf.org/html/rfc3986  properly handles escaping rules for paths, query strings and fragments independently  the output is safe to pass to uri.parse or uri::generic.build and will correctly round-trip through uri.unescape
array	return a list of module metadata hashes that match the search query. this return value is used by the module_tool face install search, and displayed to on the console.  example return value:  [   {     "author"      => "puppetlabs",     "name"        => "bacula",     "tag_list"    => ["backup", "bacula"],     "releases"    => [{"version"=>"0.0.1"}, {"version"=>"0.0.2"}],     "full_name"   => "puppetlabs/bacula",     "version"     => "0.0.2",     "project_url" => "https://github.com/puppetlabs/puppetlabs-bacula",     "desc"        => "bacula"   } ]
string	version is a public api method intended to always provide a fast and lightweight way to determine the version of puppet.  the intent is that software external to puppet be able to determine the puppet version with no side-effects.  the expected use is:      require 'puppet/version'     version = puppet.version  this function has the following ordering precedence.  this precedence list is designed to facilitate automated packaging tasks by simply writing to the version file in the same directory as this source file.   1. if a version has been explicitly assigned using the puppet.version=     method, return that version.  2. if there is a version file, read the contents, trim any     trailing whitespace, and return that version string.  3. return the value of the puppet::puppetversion constant hard-coded into     the source code.  if there is no version file, the method must return the version string of the nearest parent version that is an officially released version.  that is to say, if a branch named 3.1.x contains 25 patches on top of the most recent official release of 3.1.1, then the version method must return the string "3.1.1" if no "version" file is present.  by design the version identifier is _not_ intended to vary during the life a process.  there is no guarantee provided that writing to the version file while a puppet process is running will cause the version string to be updated.  on the contrary, the contents of the version are cached to reduce filesystem accesses.  the version file is intended to be used by package maintainers who may be applying patches or otherwise changing the software version in a manner that warrants a different software version identifier.  the version file is intended to be managed and owned by the release process and packaging related tasks, and as such should not reside in version control.  the puppetversion constant is intended to be version controlled in history.  ideally, this behavior will allow package maintainers to precisely specify the version of the software they're packaging as in the following example:      $ git describe --match "3.0.*" > lib/puppet/version     $ ruby -r puppet -e 'puts puppet.version'     3.0.1-260-g9ca4e54
string	read_version_file reads the content of the "version" file that lives in the same directory as this source code file.
void	initialize puppet's settings. this is intended only for use by external tools that are not  built off of the faces api or the puppet::util::application class. it may also be used  to initialize state so that a face may be used programatically, rather than as a stand-alone  command-line tool.
boolean	try to coerce various input values into boolean true/false  only a very limited subset of values are allowed. this method does not try to provide a generic "truthiness" system.
array	return the list of acceptable boolean values.  this is limited to lower-case, even though boolean() is case-insensitive.
void	confines a provider to be suitable only under the given conditions. the hash describes a confine using mapping from symbols to values or predicate code.  * _fact_name_ => value of fact (or array of facts) * `:exists` => the path to an existing file * `:true` => a predicate code block returning true * `:false` => a predicate code block returning false * `:feature` => name of system feature that must be present * `:any` => an array of expressions that will be ored together
boolean	used to mark a type property as having or lacking idempotency (on purpose generally). this is used to avoid marking the property as a corrective_change when there is known idempotency issues with the property rendering a corrective_change flag as useless.
object	returns the value of the given option (set when a valid value with the given "name" was defined).
object	calls the provider setter method for this property with the given value as argument.
string	formats a message for a property change from the given `current_value` to the given `newvalue`.
string	produces the name of the event to use to describe a change of this property's value. the produced event name is either the event name configured for this property, or a generic event based on the name of the property with suffix `_changed`, or if the property is `:ensure`, the name of the resource type and one of the suffixes `_created`, `_removed`, or `_changed`.
string	produces a pretty printing string for the given value. this default implementation calls {#format_value_for_display} on the class. a derived implementation may perform property specific pretty printing when the _is_ values are not already in suitable form.
void	emits a log message at the log level specified for the associated resource. the log entry is associated with this property.
boolean	returns whether this property is in noop mode or not; if a difference between the _is_ and _should_ values should be acted on or not. the noop mode is a transitive setting. the mode is checked in this property, then in the _associated resource_ and finally in puppet[:noop].
object	retrieves the current value _(is)_ of this property from the provider. this implementation performs this operation by calling a provider method with the same name as this property (i.e. if the property name is 'gid', a call to the 'provider.gid' is expected to return the current value.
object	sets the current _(is)_ value of this property. the _name_ associated with the value is first obtained by calling {value_name}. a dynamically created setter method associated with this _name_ is called if it exists, otherwise the value is set using using the provider's setter method for this property by calling ({#call_provider}).
string	produces a pretty printing string for the given value. this default implementation calls {#format_value_for_display} on the class. a derived implementation may perform property specific pretty printing when the _should_ values are not already in suitable form.
void	asserts that the given value is valid. if the developer uses a 'validate' hook, this method will get overridden.
void	asserts that all required provider features are present for the given property value.
string	returns the name of the resource this provider is operating on.
string	the (full) documentation for this provider class. the documentation for the provider class itself should be set with the dsl method {desc=}. setting the documentation with with {doc=} has the same effect as setting it with {desc=} (only the class documentation part is set). in essence this means that there is no getter for the class documentation part (since the getter returns the full documentation when there are additional contributors).
string	the command can be a simple string, which is executed as-is, or an array, which is treated as a set of command arguments to pass through.  in either case, the command is passed directly to the shell, stdout and stderr are connected together, and stdout will be streamed to the yielded pipe.
string	returns the absolute path to the executable for the command referenced by the given name.
void	confines this provider to be suitable only on hosts where the given commands are present. also see {puppet::confiner#confine} for other types of confinement of a provider by use of other types of predicates.
boolean	compare a fact value against one or more supplied value
void	sets a facts filter that determine which of several suitable providers should be picked by default. this selection only kicks in if there is more than one suitable provider. to filter on multiple facts the given hash may contain more than one fact name/value entry. the filter picks the provider if all the fact/value entries match the current set of facts. (in case there are still more than one provider after this filtering, the first found is picked).
integer	the number of requirements is based on the hash size of the matching {provider.defaultfor}.  the _ancestors_ is the ruby module::ancestors method and the number of classes returned is used to boost the score. the intent is that if two providers are equal, but one is more "derived" than the other (i.e. includes more classes), it should win because it is more specific).
void	initializes defaults and commands (i.e. clears them).
void	creates getter- and setter- methods for each property supported by the resource type. call this method to generate simple accessors for all properties supported by the resource type. these simple accessors lookup and sets values in the property hash. the generated methods may be overridden by more advanced implementations if something else than a straight forward getter/setter pair of methods is required. (i.e. define such overriding methods after this method has been called)  an implementor of a provider that makes use of `prefetch` and `flush` can use this method since it uses the internal `@property_hash` variable to store values. an implementation would then update the system state on a call to `flush` based on the current values in the `@property_hash`.
void	this method is used to generate a method for a command.
object	returns the value of a parameter value, or `:absent` if it is not defined.
void	sets the given parameters values as the current values for those parameters. other parameters are unchanged.
void	this method may be implemented by a provider in order to pre-fetch resource properties. if implemented it should set the provider instance of the managed resources to a provider with the fetched state (i.e. what is returned from the {instances} method).
void	this method may be implemented by a provider in order to perform any cleanup actions needed.  it will be called at the end of the transaction if any resources in the catalog make use of the provider, regardless of whether the resources are changed or not and even if resource failures occur.
void	this method may be implemented by a provider in order to flush properties that has not been individually applied to the managed entity's current state.
integer	this method, together with #file and #line, makes it possible for a resource to be a 'source_pos' in a reported issue.
object	retrieve a config value
object	find the correct value using our search path.
object	find the correct value using symbols and our search path.
object	lookup the uninterpolated value.
object	lookup the interpolated value. all instances of `$name` in the value will be replaced by performing a lookup of `name` and substituting the text for `$name` in the original value. this interpolation is only performed if the looked up value is a string.
string	name_from_subject extracts the common name attribute from the subject of an x.509 certificate certificate
string	returns the file path for the named certificate, based on this host's configuration.
string	returns the file path for the named csr, based on this host's configuration.
string	cn_from_subject extracts the cn from the given openssl certificate subject.
void	dispatch any calls that match the signature to the provided method name.
void	like `dispatch` but used for a specific type of argument mismatch. will not be include in the list of valid parameter overloads for the function.
void	defines a required positional parameter with _type_ and _name_.
void	defines a required positional parameter with _type_ and _name_.
void	defines an optional positional parameter with _type_ and _name_. may not be followed by a required parameter.
void	defines a repeated positional parameter with _type_ and _name_ that may occur 0 to "infinite" number of times. it may only appear last or just before a block parameter.
void	defines a repeated positional parameter with _type_ and _name_ that may occur 0 to "infinite" number of times. it may only appear last or just before a block parameter.
void	defines a repeated positional parameter with _type_ and _name_ that may occur 1 to "infinite" number of times. it may only appear last or just before a block parameter.
object	allows the implementation of a function to call other functions by name and pass the caller scope. the callable functions are those visible to the same loader that loaded this function (the calling function).
void	register a face
string	returns the synopsis for the face. this shows basic usage and global options.
void	loads all actions defined in other files.
string	returns a string representation with the face's name and version
string	returns a string representation with the face's name and version
void	defines how the `default` value of a parameter is computed. the computation of the parameter's default value is defined by providing a value or a block. a default of `nil` can not be used.
string	produces a documentation string. if an enumeration of _valid values_ has been defined, it is appended to the documentation for this parameter specified with the {desc} method.
void	removes the `default` method if defined. has no effect if the default method is not defined. this method is intended to be used in a dsl scenario where a parameter inherits from a parameter with a default value that is not wanted in the derived parameter (otherwise, simply do not define a default value method).
string	sets the documentation for this parameter.
void	initializes the instance variables. clears the internal value collection (set of allowed values).
void	sets a marker indicating that this parameter is the _namevar_ (unique identifier) of the type where the parameter is contained. this also makes the parameter a required value. the marker can not be unset once it has been set.
void	sets a marker indicating that this parameter is required. once set, it is not possible to make a parameter optional.
void	performs validation of the given value against the rules defined by this parameter. a protected validation method that only ever raises useful exceptions.
void	defines valid values for the parameter (enumeration or regular expressions). the set of valid values for the parameter can be limited to a (mix of) literal values and regular expression patterns.
string	returns a string representation of the resource's containment path in the catalog.
void	writes the given `msg` to the log with the loglevel indicated by the associated resource's `loglevel` parameter.
object	unmunges the value by transforming it from internal form to dsl form. this is the default implementation of `unmunge` that simply returns the value without processing. the dsl method {unmunge} should be used to define an overriding method if required.
object	munges the value to internal form. this implementation of `munge` provides exception handling around the specified munging of this parameter.
void	this is the default implementation of `validate` that may be overridden by the dsl method {validate}. if no valid values have been defined, the given value is accepted, else it is validated against the literal values (enumerator) and/or patterns defined by calling {newvalues}.
object	sets the given value as the value of this parameter. the given value is validated and then munged (if munging has been specified). the result is store as the value of this parameter.
string	formats the given string and conditionally redacts the provided interpolation variables, depending on if this property is sensitive.
string	produces a string with the value formatted for display to a human.  the output is created using the stringconverter with format '%#p' to produce human readable code that is understood by puppet.
void	execute the application.
void	output basic information about the runtime environment for debugging purposes.
void	opens the given path with given mode, and options and optionally yields it to the given block.
void	allows exclusive updates to a file to be made by excluding concurrent access using flock. this means that if the file is on a filesystem that does not support flock, this method will provide no protection.  while polling to acquire the lock the process will wait ever increasing amounts of time in order to prevent multiple processes from wasting resources.
string	read a file keeping the original line endings intact. this attempts to open files using binary mode using some encoding overrides and falling back to io.read when none of the encodings are valid.
integer	creates a symbolic link dest which points to the current file. if dest already exists:  * and is a file, will raise errno::eexist * and is a directory, will return 0 but perform no action * and is a symlink referencing a file, will raise errno::eexist * and is a symlink referencing a directory, will return 0 but perform no action  with the :force option set to true, when dest already exists:  * and is a file, will replace the existing file with a symlink (dangerous) * and is a directory, will return 0 but perform no action * and is a symlink referencing a file, will modify the existing symlink * and is a symlink referencing a directory, will return 0 but perform no action
integer	deletes the given paths, returning the number of names passed as arguments. see also dir::rmdir.
boolean	compares the contents of this file against the contents of a stream.
object	produces an opaque pathname "handle" object representing the given path. different implementations of the underlying file system may use different runtime objects. the produced "handle" should be used in all other operations that take a "path". no operation should be directly invoked on the returned opaque object
string	produces a string representation of the opaque path handle, with expansions performed on ~.  for windows, this means that c:\users\admini~1\appdata will be expanded to c:\users\administrator\appdata.  on posix filesystems, the value ~ will be expanded to something like /users/foo  this method exists primarlily to resolve a ruby deficiency where file.expand_path doesn't handle ~ in each segment on a windows path
string	produces a string representation of the opaque path handle.
string	mask credentials in given uri or address as string. resulting string will contain '***' in place of password. it will only be replaced if actual password is given.
object	performs a lookup in the configured scopes and optionally merges the default.  this is a backing function and all parameters are assumed to have been type checked. see puppet/functions/lookup.rb for full documentation and all parameter combinations.
string	make an http request to fetch the named certificate.
string	make an http request to fetch the named crl.
string	make an http request to get the named csr.
void	invoke the pre_run_check hook in every resource in the catalog. this should (only) be called by transaction#evaluate before applying the catalog.
string	return a human-readable string of this object's file, line, and pos attributes, if set.
string	return a human-readable string of this object's file, line, and pos attributes, with a proceeding space in the output if set.
string	return a human-readable string of this object's file and line where unknown entries are listed as 'unknown'
string	return a human-readable string of this object's file and line attributes, if set.
array	a list of indicators of where the loader is getting its environments from.
array	a list of indicators of where the loader is getting its environments from.
array	a list of indicators of where the loader is getting its environments from.
array	a list of indicators of where the loader is getting its environments from.
string	this is normally set by the child class, but if it is not this will fall back to displaying the message as a multiline.
string	return a multiline version of the error message
string	return a multiline version of the error message
string	return a multiline version of the error message
object	calls a function given by name with arguments specified in an `array`, and optionally accepts a code block.
object	evaluates a string of puppet language code in top scope. a "source_file" reference to a source can be given - if not an actual file name, by convention the name should be bracketed with < > to indicate it is something symbolic; for example `<commandline>` if the string was given on the command line.  if the given `puppet_code` is `nil` or an empty string, `nil` is returned, otherwise the result of evaluating the puppet language string. the given string must form a complete and valid expression/statement as an error is raised otherwise. that is, it is not possible to divide a compound expression by line and evaluate each line individually.
object	evaluates a puppet language file in top scope. the file must exist and contain valid puppet language code or an error is raised.
object	creates a new instance of a given data type.
object	defines a context in which multiple operations in an env with a script compiler can be performed in a given block. the calls that takes place to pal inside of the given block are all with the same instance of the compiler. the parameter `configured_by_env` makes it possible to either use the configuration in the environment, or specify `manifest_file` or `code_string` manually. if neither is given, an empty `code_string` is used.
object	evaluates a puppet language script string.
object	evaluates a puppet language script (.pp) file.
object	defines a context in which multiple operations in an env with a catalog producing compiler can be performed in a given block. the calls that takes place to pal inside of the given block are all with the same instance of the compiler. the parameter `configured_by_env` makes it possible to either use the configuration in the environment, or specify `manifest_file` or `code_string` manually. if neither is given, an empty `code_string` is used.
object	defines the context in which to perform puppet operations (evaluation, etc) the code to evaluate in this context is given in a block.
object	defines the context in which to perform puppet operations (evaluation, etc) the code to evaluate in this context is given in a block.  the name of an environment (env_name) is always given. the location of that environment on disk is then either constructed by: * searching a given envpath where name is a child of a directory on that path, or * it is the directory given in env_dir (which must exist).  the env_dir and envpath options are mutually exclusive.
string	find the path to the given file selector. files can be selected in one of two ways:   * absolute path: the path is simply returned   * modulename/filename selector: a file is found in the file directory     of the named module.  in the second case a nil is returned if there isn't a file found. in the first case (absolute path), there is no existence check done and so the path will be returned even if there isn't a file available.
string	find the path to the given template selector. templates can be selected in a couple of ways:   * absolute path: the path is simply returned   * modulename/filename selector: a file is found in the template directory     of the named module.  in the last two cases a nil is returned if there isn't a file found. in the first case (absolute path), there is no existence check done and so the path will be returned even if there isn't a file available.
object	a parameter default must be evaluated using a special scope. the scope that is given to this method must have a `parameterscope` as its last ephemeral scope. this method will then push a `matchscope` while the given `expression` is evaluated. the method will catch any throw of `:unevaluated_parameter` and produce an error saying that the evaluated parameter x tries to access the unevaluated parameter y.
object	retrieves the variable value assigned to the name given as an argument. the name must be a string, and namespace can be qualified with '::'. the value is looked up in this scope, its parent scopes, or in a specific visible named scope.
array	pop ephemeral scopes up to level and return them
object	execute given block in global scope with no ephemerals present
object	execute given block and ensure that ephemeral level is restored
array	transforms references to classes to the form suitable for lookup in the compiler.  makes names passed in the names array absolute if they are relative.  transforms class[] and resource[] type references to class name or raises an error if a class[] is unspecific, if a resource is not a 'class' resource, or if unspecific (no title).
object	calls a 3.x or 4.x function by name with arguments given in an array using the 4.x calling convention and returns the result. note that it is the caller's responsibility to rescue the given argumenterror and provide location information to aid the user find the problem. the problem is otherwise reported against the source location that invoked the function that ultimately called this method.
boolean	openssl will call this method with the verification result for each cert in the server's chain, working from the root ca to the server's cert. if preverify_ok is `true`, then that cert passed verification. if it's `false` then the current verification error is contained in `store_context.error`. and the current cert is in `store_context.current_cert`.  if this method returns `false`, then verification stops and ruby will raise an `openssl::ssl::error` with "certificate verification failed". if this method returns `true`, then verification continues.  if this method ignores a verification error, such as the cert's crl will be valid within the next 5 minutes, then this method may be called with a different verification error for the same cert.  warning: if `store_context.error` returns `openssl::x509::v_ok`, don't assume verification passed. ruby 2.4+ implements certificate hostname checking by default, and if the cert doesn't match the hostname, then the error will be v_ok. always use `preverify_ok` to determine if verification succeeded or not.
string	selinux_category_to_label is an internal method that converts all selinux categories to their internal representation, avoiding potential issues when mcstransd is not functional.  it is not marked private because it is needed by file's selcontext.rb, but it is not intended for use outside of puppet's code.
string	gets the filename of the output file.
string	gets the path to the output file.
string	sets the path to the output file.
string	gets the path to the template to use for this input.
string	gets the string representation of the input.
void	generates files for the given inputs. if a file is up to date (newer than input) it is kept. if a file is out of date it is regenerated. if there is a file for a non existing output in a given output directory it is removed. if using input specific output removal must be made by hand if input is removed.
string	attempts to find the module that `instance` originates from by looking at it's {sourceposadapter} and compare the `locator.file` found there with the module paths given in the environment found in the given `scope`. if the file is found to be relative to a path, then the first segment of the relative path is interpreted as the name of a module. the object that the {sourceposadapter} is adapted to will then be adapted to the private loader for that module and that adapter is returned.  the method returns `nil` when no module could be found.
array	contains the result of validation
void	registers the connection to validate.
boolean	removes an existing class.
string	retrieve the (optional) lock data that was specified at the time the file  was locked.
string	returns the currently selected locale from fastgettext, or 'en' of gettext has not been loaded
string	search for puppet gettext config files
array	performs validation of the given paths. if the concrete parameter defines a validation method, it may call this method to perform path validation.
void	this is the default implementation of the `validate` method. it will be overridden if the validate option is used when defining the parameter.
string	this is the default implementation  of `munge`. if the concrete parameter defines a `munge` method, this default implementation will be overridden. this default implementation does not perform any munging, it just checks the one/many paths constraints. a derived implementation can perform this check as: `paths.is_a?(array) and ! self.class.arrays?` and raise a {puppet::error}.
string	returns a suitable instance variable name given a class name. the returned string is the fully qualified name of a class with '::' replaced by '_' since '::' is not allowed in an instance variable name.
string	returns the name of the class, or the name of the type if the class represents an object type
string	returns a suitable instance variable name for the _name_ of this instance. the name is created by calling adapter#instance_var_name and then cached.
string	the command can be a simple string, which is executed as-is, or an array, which is treated as a set of command arguments to pass through.  in either case, the command is passed directly to the shell, stdout and stderr are connected together, and stdout will be streamed to the yielded pipe.
string	returns the path to the ruby executable (available via config object, even if it's not in the path... so this is slightly safer than just using puppet::util.which)
string	load a pem encoded object.
boolean	delete a pem encoded object, if it exists.
string	determines which server to use based on the specified setting, taking into account ha fallback from server_list.
integer	determines which port to use based on the specified setting, taking into account ha fallback from server_list. for port there's a little bit of an extra snag: setting a specific server setting and relying on the default port for that server is common, so we also want to check if the assocaited server setting has been set by the user. if either of those are set we ignore the failover-selected port.
boolean	whether this is the default action for the face
boolean	whether this is the default action for the face
integer	the arity of the action
object	iterates over all already loaded type subclasses.
void	loads all types.
integer	returns ttl for the cached records for this service.
array	checks the environment and settings for any conflicts
object	return an environment-specific puppet setting.
string	return the name of the environment as a string interpretation of the object
hash	create a new puppet dsl function.  **the {newfunction} method provides a public api.**  this method is used both internally inside of puppet to define parser functions.  for example, template() is defined in {file:lib/puppet/parser/functions/template.rb template.rb} using the {newfunction} method.  third party puppet modules such as [stdlib](https://forge.puppetlabs.com/puppetlabs/stdlib) use this method to extend the behavior and functionality of puppet.  see also [docs: custom functions](https://puppet.com/docs/puppet/5.5/lang_write_functions_in_puppet.html)
integer	return the number of arguments a function expects.
string	strips the class name from all module prefixes, the leading 'p' and the ending 'type'. i.e. an instance of pvarianttype will return 'variant'
string	returns the name of the type, without parameters
object	applies a transformation by sending the given _method_ and _method_args_ to each of the types of the given array and collecting the results in a new array. if all transformation calls returned the type instance itself (i.e. no transformation took place), then this method will return `self`. if a transformation did occur, then this method will either return the transformed array or in case a block was given, the result of calling a given block with the transformed array.
string	returns the expanded string the form of the alias, e.g. <alias name> = <resolved type>
hash	retrieves the key-hash from the provider by invoking its method named the same as this property.
void	run the puppet subcommand. if the subcommand is determined to be an external executable, this method will never return and the current process will be replaced via {kernel#exec}.
object	produces the value associated with the given name if already loaded, or available for loading by this loader, one of its parents, or other loaders visible to this loader. this is the method an external party should use to "get" the named element.  an implementor of this method should first check if the given name is already loaded by self, or a parent loader, and if so return that result. if not, it should call `find` to perform the loading.
string	formats this timestamp into a string according to the given `format`
string	formats this timestamp into a string according to {format::defaults[0]}
string	an agent generated transaction uuid, useful for connecting catalog and report
string	an agent generated transaction uuid, useful for connecting catalog and report
string	whether a cached catalog was used in the run, and if so, the reason that it was used. or 'on_failure'
string	whether a cached catalog was used in the run, and if so, the reason that it was used. or 'on_failure'
string	contains the name and port of the master that was successfully contacted
string	contains the name and port of the master that was successfully contacted
string	the host name for which the report is generated
string	the host name for which the report is generated
string	the name of the environment the host is in
string	the name of the environment the host is in
boolean	whether there are changes that we decided not to apply because of noop
boolean	whether there are changes that we decided not to apply because of noop
string	the status of the client run is an enumeration: 'failed', 'changed' or 'unchanged'
boolean	whether the puppet run was started in noop mode
string	provide a human readable textual summary of this report.
integer	computes a single number that represents the report's status. the computation is based on the contents of this report's metrics. the resulting number is a bitmask where individual bits represent the presence of different metrics.  * 0x2 set if there are changes * 0x4 set if there are resource failures or resources that failed to restart
boolean	lock the lockfile.  you may optionally pass a data object, which will be retrievable for the duration of time during which the file is locked.
object	retrieve the (optional) lock data that was specified at the time the file  was locked.
string	load the private key password.
boolean	delete a named certificate signing request (csr) from the configured `requestdir`.
void	pushes a puppet context configured with a remote environment for an agent (one that exists at the master end), and a regular environment for other modes. the configuration is overridden with options from the command line before being set in a pushed puppet context.
void	reads the routes yaml settings from the file specified by puppet[:route_file] and resets indirector termini for the current application class if listed.  for instance, pe uses this to set the master facts terminus to 'puppetdb' and its cache terminus to 'yaml'.
object	loads the contents of the file given by _path_. the content is then yielded to the provided block in case a block is given, and the returned value from that block is cached and returned by this method. if no block is given, the content is stored instead.  the cache is retained as long as the inode, mtime, and size of the file remains unchanged.
object	resolve interpolation expressions in the given value
object	merges the elements of _e1_ and _e2_ according to the rules of this strategy and options given when this instance was created
object	merges the result of yielding the given _lookup_variants_ to a given block.  merges the result of yielding the given _lookup_variants_ to a given block.
object	converts a single value to the type expected when merging two elements
object	applies the merge strategy on a single element. only applicable for `unique`
object	returns the first value found
object	if _value_ is an array, then return the result of calling `uniq` on that array. otherwise, the argument is returned.
string	converts a timezone that strptime can parse using '%z' into '-hh:mm' or '+hh:mm'
integer	returns the zone offset from utc for the given `timezone`
void	compiles the result of additional evaluation taking place in a pal catalog compilation. this will evaluate all lazy constructs until all have been evaluated, and will the validate the result.  this should be called if evaluating string or files of puppet logic after the initial compilation taking place by giving pal a manifest or code-string. this method should be called when a series of evaluation should have reached a valid state (there should be no dangling relationships (to resources that does not exist).  as an alternative the methods `evaluate_additions` can be called without any requirements on consistency and then calling `validate` at the end.  can be called multiple times.
string	query the state of a service using queryservicestatusex
hash	enumerate over all services in all states and return them as a hash
integer	create a usable wait time to wait between querying the service.
integer	process the wait hint listed by a service to something usable by ruby sleep
string	uses name of type instead of name of the class (the class is likely dynamically generated and as such, has no name)
void	close this instance's event log handle
void	report an event to this instance's event log handle. accepts a string to   report (:data => <string>) and event type (:event_type => fixnum) and id (:event_id => fixnum) as returned by #to_native. the additional arguments to reporteventw seen in this method aren't exposed - though reporteventw technically can accept multiple strings as well as raw binary data to log, we accept a single string from puppet::util::log
array	query event identifier info for a given log level
hash	this method may be implemented to return a hash object that is used for serializing. the object returned by this method should contain all the info needed to instantiate it again. if the method exists it will be called from to_msgpack and other serialization methods.
string	find which line in the template (if any) we were called from.
integer	returns the number of parameters (required and optional)
object	report the result of a merge or fully resolved interpolated string
object	create a structure that can be dug into using the subkeys of this key in order to find the given _value_. if this key has no subkeys, the _value_ is returned.
array	split key into segments. a segment may be a quoted string (both single and double quotes can be used) and the segment separator is the '.' character. whitespace will be trimmed off on both sides of each segment. whitespace within quotes are not trimmed.  if the key cannot be parsed, this method will yield a string describing the problem to a one parameter block. the block must return an exception instance.
object	perform a sub-lookup using the given _segments_ to access the given _value_. each segment must be a string. a string consisting entirely of digits will be treated as an indexed lookup which means that the value that it is applied to must be an array. other types of segments will expect that the given value is something other than a string that implements the '#[]' method.
void	initializes the epp parser support by creating a new instance of {puppet::pops::parser::lexer} configured to start in epp lexing mode.
string	returns the expanded string the form of the alias, e.g. <alias name> = <resolved type>
string	returns a list of authors. see {author}.
string	sets the copyright owner and year. this returns the copyright string, so it can be called with no arguments retrieve that string without side effects.
string	sets the copyright owner
string	sets the copyright owner
string	sets the copyright year
string	sets the copyright year
boolean	checks the text for syntax issues and reports them to the given acceptor. this implementation is abstract, it raises {notimplementederror} since a subclass should have implemented the method.
object	allows the implementation of a function to call other functions by name. the callable functions are those visible to the same loader that loaded this function (the calling function). the referenced function is called with the calling functions closure scope as the caller's scope.
object	allows the implementation of a function to call other functions by name and pass the caller scope. the callable functions are those visible to the same loader that loaded this function (the calling function).
string	here for backwards compatibility.
string	scans from the current position in the configured scanner, advances this scanner's position until the end of the input, or to the first position after a mode switching token (`<%`, `<%-` or `<%=`). number of processed lines and continuation mode can be obtained via {#lines}, and {#mode}.
hash	obtain the full raw data from the persistence store.
object	retrieve the system value using the resource and parameter name
string	given a string, attempts to convert a copy of the string to utf-8. conversion uses encode - the string's internal byte representation is modifed to utf-8.  this method is intended for situations where we generally trust that the string's bytes are a faithful representation of the current encoding associated with it, and can use it as a starting point for transcoding (conversion) to utf-8.
string	given a string, tests if that string's bytes represent valid utf-8, and if so return a copy of the string with external encoding set to utf-8. does not modify the byte representation of the string. if the string does not represent valid utf-8, does not set the external encoding.  this method is intended for situations where we do not believe that the encoding associated with a string is an accurate reflection of its actual bytes, i.e., effectively when we believe ruby is incorrect in its assertion of the encoding of the string.  a copy of the original string if override would result in invalid encoding.
void	deprecates the action
void	sets what the action does when it is invoked. this takes a block which will be called when the action is invoked. the action will accept arguments based on the arity of the block. it should always take at least one argument for options. options will be the last argument.
void	set this as the default action for the face.
void	defines a new action. this takes a block to build the action using the methods on {puppet::interface::actionbuilder}.
string	returns one particular resource as a json string, or returns nil if resource was not found.
object	performs type checking of arguments and invokes the method that corresponds to this method. the result of the invocation is returned
object	returns the value of this attribute, or raises an error if no value has been defined. raising an error is necessary since a defined value may be `nil`.
object	read an instance of this type from a deserializer
string	obtain a suitable temporary path for unpacking tarballs
object	dispatches the call to the first found signature (entry with matching type).
object	performs a lookup with the assumption that a recursive check has been made.
object	asserts that _data_value_ is of valid type. will yield to obtain origin of value in case an error is produced
string	produces a string representation of the given type.
string	capitalizes each segment in a name separated with the {name_separator} conditionally. the name will not be subject to capitalization if it already starts with a capital letter. this to avoid that existing camel casing is lost.
void	queues events for other resources to respond to.  all of these events have to be from the same resource.
void	aliases the given existing _other_ value with the additional given _name_.
string	returns a doc string (enumerating the acceptable values) for all of the values in this parameter/property.
object	munges the value if it is valid, else produces the same value.
void	defines one or more valid values (literal or regexp) for a parameter or property.
void	validates the given value against the set of valid literal values and regular expressions.
string	abstract method that subclasses override to answer if the given relative path exists, and if so returns that path
array	abstract method that subclasses override to return an array of paths that may be associated with the resolved path.
string	abstract method that subclasses override to produce the content of the effective path. it should either succeed and return a string or fail with an exception.
string	abstract method that subclasses override to produce a source reference string used to identify the system resource (resource in the uri sense).
array	return all paths that matches the given smart path. the returned paths are relative to the `#generic_path` of the given smart path.
array	find an existing path or paths for the given `typed_name`. return `nil` if no path is found
array	return all paths that matches the given smart path. the returned paths are relative to the `#generic_path` of the given smart path.  this method relies on the cache and does not perform any file system access
object	performs a lookup using global, environment, and module data providers. merge the result using the given _merge_ strategy. if the merge strategy is nil, then an attempt is made to find merge options in the `lookup_options` hash for an entry associated with the key. if no options are found, the no merge is performed and the first found entry is returned.
object	performs a possible conversion of the result of calling `the_lookup` lambda the conversion takes place if there is a 'convert_to' key in the lookup_options if there is no conversion, the result of calling `the_lookup` is returned otherwise the successfully converted value. errors are raised if the convert_to is faulty (bad type string, or if a call to new(t, <args>) fails.
string	retrieve the merge options that match the given `name`.
string	retrieve the lookup options that match the given `name`.
string	returns the name by which the given type is referenced from within this type set
object	add the given argument as 'this' invoke the given block with the resulting state
object	add the given argument as 'that' invoke the given block with the resulting state
integer	add the given argument as 'this' and return the resulting state
integer	add the given argument as 'that' and return the resulting state
boolean	checks if the expression has side effect ('idem' is latin for 'the same', here meaning that the evaluation state is known to be unchanged after the expression has been evaluated). the result is not 100% authoritative for negative answers since analysis of function behavior is not possible.
string	one of 'remote', 'local', or false, where 'remote' is authenticated via cert, 'local' is trusted by virtue of running on the same machine (not a remote request), and false is an unauthenticated remote request.
string	the validated certificate name used for the request
string	the domain name derived from the validated certificate name
string	the hostname derived from the validated certificate name
hash	additional external facts loaded through `trusted_external_command`.
array	produces the heredoc text string given the individual (unprocessed) lines as an array and array with margin sizes per line
string	performs a '%p' formatting of the given _str_ such that the output conforms to puppet syntax. an ascii string without control characters, dollar, single-qoute, or backslash, will be quoted using single quotes. all other strings will be quoted using double quotes.
string	creates a _json_path_ reference from the given `path` argument
object	resolve the given _path_ in the given _context_.
object	performs type checking of arguments and invokes the method that corresponds to this method. the result of the invocation is returned
object	given an event and its property, calculate the system_value to persist for future calculations.
string	gets the puppet type for a property.
object	evaluates the given _target_ object in the given scope.
boolean	evaluates matching expressions with type, string or regexp rhs expression. if rhs is a type, the =~ matches compatible (instance? of) type.  note that a string is not instance? of regexp, only regular expressions are. the pattern type should instead be used as it is specified as subtype of string.
array	evaluates each entry of the literal list and creates a new array supports unfolding of entries
hash	evaluates each entry of the literal hash and creates a new hash.
object	performs optimized search over case option values, lazily evaluating each until there is a match. if no match is found, the case expression's default expression is evaluated (it may be nil or nop if there is no default, thus producing nil). if an option matches, the result of evaluating that option is returned.
string	if the wrapped expression is a qualifiedname, it is taken as the name of a variable in scope. note that this is different from the 3.x implementation, where an initial qualified name is accepted. (e.g. `"---${var + 1}---"` is legal. this implementation requires such concrete syntax to be expressed in a model as `(textexpression (+ (variable var) 1)` - i.e. moving the decision to the parser.  semantics; the result of an expression is turned into a string, nil is silently transformed to empty string.
array	maps the expression in the given array to their product except for unfoldexpressions which are first unfolded. the result is added to the given result array.
string	translates an already parsed string that contains control characters, quotes and backslashes into a quoted string where all such constructs have been escaped. parsing the return value of this method using the puppet parser should yield exactly the same string as the argument passed to this method  the method makes an exception for the two character sequences \$ and \s. they will not be escaped since they have a special meaning in puppet syntax.  todo: handle \uxxxx characters ??
object	read the next value from the reader.
object	remember that a value has been read. this means that the value is given an index and that subsequent reads of a tabulation with that index should return the value.
boolean	performs verification of the ssl connection and collection of the certificates for use in constructing the error message if the verification failed.  this callback will be executed once for each certificate in a chain being verified.  from the [openssl documentation](https://www.openssl.org/docs/ssl/ssl_ctx_set_verify.html): the `verify_callback` function is used to control the behaviour when the ssl_verify_peer flag is set. it must be supplied by the application and receives two arguments: preverify_ok indicates, whether the verification of the certificate in question was passed (preverify_ok=1) or not (preverify_ok=0). x509_store_ctx is a pointer to the complete context used for the certificate chain verification.  see {puppet::network::http::connection} for more information and where this class is intended to be used.
void	registers the instance's call method with the connection.
boolean	checks if the set of peer_certs contains at least one certificate issued by a certificate listed in authz_certs
object	resolves a value such that a direct deferred, or any nested deferred values are resolved and used instead of the deferred value. a direct deferred value, or nested deferred values inside of array, hash or sensitive values are resolved and replaced inside of freshly created containers.  the resolution takes place in the topscope of the given compiler. variable values are supposed to already have been set.
hash	asserts that all keys in the given _data_hash_ are prefixed with the configured _module_name_. removes entries that does not follow the convention and logs a warning.
string	obtain a suitable temporary path for unpacking tarballs
array	returns the names of the parameters as an array of strings. this does not include the name of an optional block parameter.  all implementations are not required to supply names for parameters. they may be used if present, to provide user feedback in errors etc. but they are not authoritative about the number of required arguments, optional arguments, etc.  a derived class must implement this method.
string	returns the name of the block parameter if the callable accepts a block. a derived class must implement this method.
array	converts 4x supported values to a 3x values.
object	converts a 4x supported value to a 3x value.
object	read an object from the underlying unpacker
string	find the name for the module that corresponds to the given type or type name
string	find the type name and loader that corresponds to the given runtime module or module name
array	return the parameter values as positional arguments with unset values as :default. the array is stripped from trailing :default values
boolean	answers the question if `e` is a specialized type of `a`
string	returns a string that either represents the generalized type _a_ or the type _a_ verbatim. the latter form is used when at least one of the following conditions are met:  - #always_fully_detailed returns `true` for the resolved type of _e_ and _a_ - #any_assignable? returns `true` for the resolved type of _e_ and the generalized type of _a_.
object	performs a lookup by searching all configured locations for the given _key_. a merge will be performed if the value is found in more than one location.
object	pushes `key` to the end of the path and yields to the given block. the `key` is popped when the yield returns.
object	performs a lookup with the assumption that a recursive check has been made.
object	performs a lookup with the assumption that a recursive check has been made.
object	performs a lookup with the assumption that a recursive check has been made.
object	pushes `key` to the end of the path and yields to the given block. the `key` is popped when the yield returns.
array	collects resources and marks collected objects as non-virtual. also handles overrides.
array	this should only return an empty array unless we have an fixedsetcollector, in which case it will return the resources that have not yet been realized
array	collect the specified resources. the way this is done depends on which type of collector we are dealing with. this method is implemented differently in each of the three child classes
string	get environment-expanded command for a +process+
string	return the current environment
array	implements rack spec
string	return a value, if found
hash	returns options from hanamirc file
hash	read hanamirc file and parse it's values
string	generates a default project name based on the application directory
string	hanami application name
array	process a request. this method makes hanami applications compatible with the rack protocol.
string	the current environment  in order to decide the value, it looks up to the following `env` vars:    * hanami_env   * rack_env  if those are missing it falls back to the default one: `"development"`.  rack environment `"deployment"` is translated to hanami `"production"`.
array	a set of bundler groups
string	project name
string	the http host name  in order to decide the value, it looks up the following sources:    * cli option `host`   * hanami_host env var  if those are missing it falls back to the following defaults:    * `"localhost"` for development   * `"0.0.0.0"` for all the other environments
integer	the http port  in order to decide the value, it looks up the following sources:    * cli option `port`   * hanami_port env var  if those are missing it falls back to the default one: `2300`.
hash	return the routes for this application
array	returns the rack middleware and the options
string	returns the cleaned application name.
string	returns the cleaned application name.
string	returns the application name uppercased with non-alphanumeric characters as underscores.
array	process a request. this method makes the middleware stack compatible with the rack protocol.
array	append a middleware to the stack.
array	prepend a middleware to the stack.
string	component name
array	component requirements
boolean	force ssl redirection if http scheme is set
string	returns a printable version of the project routes
string	the response body of the request
array	returns the children of this node. the returned value is frozen.
string	converts `self` to a concise s-expression, omitting any children.
array	returns {#children}. this is very useful in order to decompose nodes concisely. for example:      node = s(:gasgn, :$foo, s(:integer, 1))     s     var_name, value = *node     p var_name # => :$foo     p value    # => (integer 1)
string	converts `self` to a pretty-printed s-expression.
string	converts `self` to a pretty-printed s-expression.
string	returns `@type` with all underscores replaced by dashes. this allows to write symbol literals without quotes in ruby sources and yet have nicely looking s-expressions.
hash	get the symbol map.
hash	get the symbol map.
hash	get the symbol map.
string	transform a generic library name to a platform library name
array	get array of values from struct fields.
array	this function returns a list of possible names to lookup.
string	read pointer's contents as a string, or the first +len+ bytes of the  equivalent string if +len+ is not +nil+.
string	read the first +len+ bytes of pointer's contents as a string.  same as:  ptr.read_string(len)  # with len not nil
string	read pointer's contents as a string.  same as:  ptr.read_string  # with no len
array	read an array of +type+ of length +length+.
object	read pointer's contents as +type+  same as:  ptr.get(type, 0)
boolean	checks if the given pattern matches at the current input position.
boolean	test if current os is +os+.
hash	decides if the given subtree matches this pattern. returns the bindings made on a successful match or nil if the match fails. if you specify  bindings to be a hash, the mappings in it will be treated like bindings made during an attempted match.     pattern.new('a').match('a', :foo => 'bar') # => { :foo => 'bar' }
string	formats each {poentry} to the format of po files and returns joined them.
integer	return the number of items in this `set`.
integer	return the number of items in this `set`.
object	return a member of this `set`. the member chosen will be the first one which would be yielded by {#each}. if the set is empty, return `nil`.
boolean	return `true` if all items in this `set` are also in `other`.
boolean	return `true` if all items in `other` are also in this `set`.
boolean	returns `true` if `other` contains all the items in this `set`, plus at least one item which is not in this set.
boolean	returns `true` if this `set` contains all the items in `other`, plus at least one item which is not in `other`.
object	return a randomly chosen item from this `set`. if the set is empty, return `nil`.
integer	see `object#hash`.
object	listen for any exceptions raised.  the listener block that you pass in will be executed as though inside kernel#raise, so your entire program is still actively running. if you have a gem like pry-stack_explorer you can access the stack frames that lead to the exception occurring.  note: be careful when writing a listener, if your listener raises an exception it will mask the original exception (though it will not recursively call your listener).
boolean	set +autorelease+ property. see {pointer autorelease section at pointer}.
object	retrieve the value corresponding to the provided key object. if not found, and this `hash` has a default block, the default block is called to provide the value. otherwise, return `nil`.
hash	return an empty `hash`. if used on a subclass, returns an empty instance of that class.
hash	"raw" allocation of a new `hash`. used internally to create a new instance quickly after obtaining a modified {trie}.
integer	return the number of key/value pairs in this `hash`.
integer	return the number of key/value pairs in this `hash`.
object	retrieve the value corresponding to the provided key object. if not found, and this `hash` has a default block, the default block is called to provide the value. otherwise, return `nil`.
object	retrieve the value corresponding to the given key object, or use the provided default value or block, or otherwise raise a `keyerror`.
hash	return a new `hash` with the existing key/value associations, plus an association between the provided key and value. if an equivalent key is already present, its associated value will be replaced with the provided one.  if the `value` argument is missing, but an optional code block is provided, it will be passed the existing value (or `nil` if there is none) and what it returns will replace the existing value. this is useful for "transforming" the value associated with a certain key.  avoid mutating objects which are used as keys. `string`s are an exception: unfrozen `string`s which are used as keys are internally duplicated and frozen. this matches rubyhash's behaviour.
hash	an alias for {#put} to match rubyhash's api. does not support {#put}'s block form.
hash	return a new `hash` with `key` removed. if `key` is not present, return `self`.
hash	call the block once for each key/value pair in this `hash`, passing the key/value pair as parameters. the block should return a `[key, value]` array each time. all the returned `[key, value]` arrays will be gathered into a new `hash`.
hash	call the block once for each key/value pair in this `hash`, passing the key/value pair as parameters. the block should return a `[key, value]` array each time. all the returned `[key, value]` arrays will be gathered into a new `hash`.
hash	return a new `hash` with all the key/value pairs for which the block returns true.
hash	return a new `hash` with all the key/value pairs for which the block returns true.
hash	return a new `hash` with all the key/value pairs for which the block returns true.
array	yield `[key, value]` pairs until one is found for which the block returns true. return that `[key, value]` pair. if the block never returns true, return `nil`.
array	yield `[key, value]` pairs until one is found for which the block returns true. return that `[key, value]` pair. if the block never returns true, return `nil`.
hash	return a new `hash` containing all the key/value pairs from this `hash` and `other`. if no block is provided, the value for entries with colliding keys will be that from `other`. otherwise, the value for each duplicate key is determined by calling the block.  `other` can be a `hamster::hash`, a built-in ruby `hash`, or any `enumerable` object which yields `[key, value]` pairs.
hash	return a new `hash` with the associations for all of the given `keys` removed.
hash	return a new `hash` with only the associations for the `wanted` keys retained.
hash	return a new `hash` created by using keys as values and values as keys. if there are multiple values which are equivalent (as determined by `#hash` and `#eql?`), only one out of each group of equivalent values will be retained. which one specifically is undefined.
array	searches through the `hash`, comparing `obj` with each key (using `#==`). when a matching key is found, return the `[key, value]` pair as an array. return `nil` if no match is found.
array	searches through the `hash`, comparing `obj` with each value (using `#==`). when a matching value is found, return the `[key, value]` pair as an array. return `nil` if no match is found.
object	searches through the `hash`, comparing `value` with each value (using `#==`). when a matching value is found, return its associated key object. return `nil` if no match is found.
array	return a randomly chosen `[key, value]` pair from this `hash`. if the hash is empty, return `nil`.
hash	return an empty `hash` instance, of the same class as this one. useful if you have multiple subclasses of `hash` and want to treat them polymorphically. maintains the default block, if there is one.
boolean	return true if this `hash` is a proper superset of `other`, which means all `other`'s keys are contained in this `hash` with the identical values, and the two hashes are not identical.
boolean	return true if this `hash` is a superset of `other`, which means all `other`'s keys are contained in this `hash` with the identical values.
boolean	return true if this `hash` is a proper subset of `other`, which means all its keys are contained in `other` with the identical values, and the two hashes are not identical.
boolean	return true if this `hash` is a subset of `other`, which means all its keys are contained in `other` with the identical values, and the two hashes are not identical.
integer	see `object#hash`.
string	return the contents of this `hash` as a programmer-readable `string`. if all the keys and values are serializable as ruby literal strings, the returned string can be passed to `eval` to reconstitute an equivalent `hash`. the default block (if there is one) will be lost when doing this, however.
hash	create a hamster immutable data structure with nested hamster data structure from a nested ruby object `obj`.  this method recursively "walks" the ruby object, converting ruby `hash` to {hamster::hash}, ruby `array` to {hamster::vector}, ruby `set` to {hamster::set}, and ruby `sortedset` to {hamster::sortedset}.  other objects are left as-is.
integer	return the number of items in this `list`.
integer	return the number of items in this `list`.
array	return two `list`s, one of the first `number` items, and another with the remaining.
array	return two `list`s, one up to (but not including) the first item for which the block returns `nil` or `false`, and another of all the remaining items.
array	return two `list`s, one up to (but not including) the first item for which the block returns true, and another of all the remaining items.
object	return the last item in this list.
hash	passes each item to the block, and gathers them into a {hash} where the keys are return values from the block, and the values are `list`s of items for which the block returned that value.
hash	passes each item to the block, and gathers them into a {hash} where the keys are return values from the block, and the values are `list`s of items for which the block returned that value.
object	retrieve the item at `index`. negative indices count back from the end of the list (-1 is the last item). if `index` is invalid (either too high or too low), return `nil`.
object	return a randomly chosen element from this list.
integer	see `object#hash`
string	return the contents of this `list` as a programmer-readable `string`. if all the items in the list are serializable as ruby literal strings, the returned string can be passed to `eval` to reconstitute an equivalent `list`.
object	perform compositions of `car` and `cdr` operations (traditional shorthand for `head` and `tail` respectively). their names consist of a `c`, followed by at least one `a` or `d`, and finally an `r`. the series of `a`s and `d`s in the method name identify the series of `car` and `cdr` operations performed, in inverse order.
array	parses a source buffer and returns the ast along with the comments of the ruby source code.
array	parses ruby source code by reading it from a file and returns the ast and comments. if the source cannot be parsed, {syntaxerror} is raised and a diagnostic is printed to `stderr`.
array	currently, token stream format returned by #tokenize is not documented, but is considered part of a public api and only changed according to semantic versioning.  however, note that the exact token composition of various constructs might vary. for example, a string `"foo"` is represented equally well by `:tstring_beg " :tstring_content foo :tstring_end "` and `:tstring "foo"`; such details must not be relied upon.
hash	given a string or an io object, this will attempt a parse of its contents and return a result. if the parse fails, a parslet::parsefailed exception will be thrown.
integer	return the number of items in this `deque`.
integer	return the number of items in this `deque`.
object	return the first item in the `deque`. if the deque is empty, return `nil`.
object	return the last item in the `deque`. if the deque is empty, return `nil`.
array	return an `array` with the same elements, in the same order.
array	return an `array` with the same elements, in the same order.
array	return an `array` with the same elements, in the same order.
string	return the contents of this `deque` as a programmer-readable `string`. if all the items in the deque are serializable as ruby literal strings, the returned string can be passed to `eval` to reconstitute an equivalent `deque`.
object	get an object of type {#type} from memory pointed by +ptr+.
integer	return the number of items in this `vector`
integer	return the number of items in this `vector`
object	return the first item in the `vector`. if the vector is empty, return `nil`.
object	return the last item in the `vector`. if the vector is empty, return `nil`.
object	retrieve the item at `index`. if there is none (either the provided index is too high or too low), return `nil`.
object	retrieve the item at `index`. if there is none (either the provided index is too high or too low), return `nil`.
object	retrieve the value at `index` with optional default.
object	finds a value from this `vector` which meets the condition defined by the provided block, using a binary search. the vector must already be sorted with respect to the block.  see ruby's `array#bsearch` for details, behaviour is equivalent.
object	return a randomly chosen item from this `vector`. if the vector is empty, return `nil`.
integer	find the index of an element, starting from the end of the vector. returns `nil` if no element is found.
object	assumes all elements are nested, indexable collections, and searches through them, comparing `obj` with the first element of each nested collection. return the first nested collection which matches, or `nil` if none is found. behaviour is undefined when elements do not meet assumptions (i.e. are not indexable collections).
object	assumes all elements are nested, indexable collections, and searches through them, comparing `obj` with the second element of each nested collection. return the first nested collection which matches, or `nil` if none is found. behaviour is undefined when elements do not meet assumptions (i.e. are not indexable collections).
array	return an `array` with the same elements, in the same order. the returned `array` may or may not be frozen.
array	return an `array` with the same elements, in the same order. the returned `array` may or may not be frozen.
integer	see `object#hash`.
void	support for extracted comments. explanation s. http://www.gnu.org/software/gettext/manual/gettext.html#names
string	rewrites the ast/source buffer and returns a string containing the new version.
void	define gettext related rake tasks. normally, use this method to define tasks because this method is a convenient api.  see accessor apis how to configure this task.  see {#define} for what task is defined.
array	it is a required parameter.
array	it is a required parameter.
array	it is a required parameter.
array	it is a required parameter.
string	it is a required parameter.
string	it is a required parameter.
string	it is useful when you have multiple domains. you can define tasks for each domains by using different namespace prefix.  it is `nil` by default. it means that tasks are defined at top level.  todo: example
string	it is useful when you have multiple domains. you can define tasks for each domains by using different namespace prefix.  it is `nil` by default. it means that tasks are defined at top level.  todo: example
object	return the value of successively indexing into a collection. if any of the keys is not present in the collection, return `nil`. keys that the hamster type doesn't understand, raises an argument error
integer	return the number of items in this `sortedset`.
integer	return the number of items in this `sortedset`.
object	retrieve the item at `index`. if there is none (either the provided index is too high or too low), return `nil`.
object	retrieve the value at `index` with optional default.
object	return the "lowest" element in this set, as determined by its sort order. or, if a block is provided, use the block as a comparator to find the "lowest" element. (see `enumerable#min`.)
object	return the "lowest" element in this set, as determined by its sort order.
object	return the "highest" element in this set, as determined by its sort order. or, if a block is provided, use the block as a comparator to find the "highest" element. (see `enumerable#max`.)
object	return the "highest" element in this set, as determined by its sort order.
integer	find the index of a given object or an element that satisfies the given block.
integer	find the index of a given object or an element that satisfies the given block.
object	return a randomly chosen item from this set. if the set is empty, return `nil`.
integer	see `object#hash`.
array	renders the diagnostic message as a clang-like diagnostic.
integer	a shortcut for `self.expression.line`.
integer	a shortcut for `self.expression.column`.
void	concatenates po-files.
integer	line number of the beginning of this range. by default, the first line of a buffer is 1; as such, line numbers are most commonly one-based.
string	composes a gnu/clang-style string representation of the beginning of this range.  for example, for the following range in file `foo.rb`,      def foo         ^^^  `to_s` will return `foo.rb:1:5`. note that the column index is one-based.
void	create .po file from .pot file, user's inputs and metadata.
string	buffer name. if the buffer was created from a file, the name corresponds to relative path to the file.
integer	first line of the buffer, 1 by default.
string	recognize encoding of `input` and process it so it could be lexed.   * if `input` does not contain bom or magic encoding comment, it is    kept in the original encoding.  * if the detected encoding is binary, `input` is kept in binary.  * otherwise, `input` is re-encoded into utf-8 and returned as a    new string.  this method mutates the encoding of `input`, but not its content.
string	source code contained in this buffer.
string	populate this buffer from a string with encoding autodetection. `input` is mutated if not frozen.
string	populate this buffer from a string without encoding autodetection.
string	extract line `lineno` from source, taking `first_line` into account.
array	resample mean of given samples.
hash	set class options these options are merged with {#initialize} options when it is called with a block.
hash	get class options.
string	outputs values for discovered constants.  if the constant's value was not discovered it is not omitted.
array	add additional c include file(s) to calculate constants from.
string	get constant ruby name
string	get an evaluable string from constant.
void	merge a po-file inluding translated messages and a new pot-file.
void	the parser object requires to have target?(path) and parse(path) method.
string	the benchmarking action.
string	add padding to label's right if label's length < 20, otherwise add a new line and 20 whitespaces.
integer	call action by given times, return if +@call_loop+ is present.
boolean	determining whether to run comparison utility.
hash	storing iterations in time period.
integer	warmup time setter and getter (in seconds).
integer	warmup time setter and getter (in seconds).
integer	calculation time setter and getter (in seconds).
integer	calculation time setter and getter (in seconds).
integer	calculate the cycles needed to run for approx 100ms, given the number of iterations to run the given time.
string	applies all scheduled changes to the `source_buffer` and returns modified source as a new string.
boolean	if set to true, `__file__` and `__line__` are transformed to literal nodes. for example, `s(:str, "lib/foo.rb")` and `s(:int, 10)`.  if set to false, `__file__` and `__line__` are emitted as-is, i.e. as `s(:__file__)` and `s(:__line__)` nodes.  source maps are identical in both cases.
boolean	if set to true, `__file__` and `__line__` are transformed to literal nodes. for example, `s(:str, "lib/foo.rb")` and `s(:int, 10)`.  if set to false, `__file__` and `__line__` are emitted as-is, i.e. as `s(:__file__)` and `s(:__line__)` nodes.  source maps are identical in both cases.
boolean	when set to `true` any error that is encountered will result in {parser::syntaxerror} being raised.
boolean	when set to `true` any error that is encountered will result in {parser::syntaxerror} being raised.
boolean	when set to `true` warnings will be ignored.
boolean	when set to `true` warnings will be ignored.
string	label of entry.
integer	measured time in microsecond.
integer	number of iterations.
integer	number of cycles.
string	return entry body text with left padding. body text contains information of iteration per second with percentage of standard deviation, iterations in runtime.
string	return header with padding if +@label+ is < length of 20.
string	return string repesentation of entry object.
array	entries data in array for generate json. each entry is a hash, consists of:   name:   entry#label   ips:    entry#ips   stddev: entry#ips_sd
boolean	include set of methods for selected protocol version
boolean	returns true if the current time is within daylight savings time for the specified time zone.    time.zone = 'eastern time (us & canada)'    # => 'eastern time (us & canada)'   time.zone.parse("2012-5-30").dst?           # => true   time.zone.parse("2012-11-30").dst?          # => false
string	if decoded then this will return frame content. otherwise it will return raw frame.
string	return textual representation of handshake request or response
string	data left from parsing. sometimes data that doesn't belong to handshake are added - use this method to retrieve them.
string	uri of request.
integer	number of lines after header that should be handled as belonging to handshake. any data after those lines will be handled as leftovers.
boolean	parse data imported to handshake and sets state to finished if necessary.
boolean	skip file processing directives disguised as comments. namely:    * shebang line,   * magic encoding comment.
boolean	skip file processing directives disguised as comments. namely:    * shebang line,   * magic encoding comment.
boolean	include set of methods for selected protocol version
boolean	parse first line of server response.
string	host of server according to client header
string	port of server according to client header
boolean	include set of methods for selected protocol version
boolean	parse first line of client response.
string	convert data to raw frame ready to send to client
object	returns the receiver if it's present otherwise returns +nil+. <tt>object.presence</tt> is equivalent to     object.present? ? object : nil  for example, something like    state   = params[:state]   if params[:state].present?   country = params[:country] if params[:country].present?   region  = state || country || 'us'  becomes    region = params[:state].presence || params[:country].presence || 'us'
object	returns the receiver if it's included in the argument otherwise returns +nil+. argument must be any object which responds to +#include?+. usage:    params[:bucket_type].presence_in %w( project calendar )  this will throw an argumenterror if the argument doesn't respond to +#include?+.
string	set first line of text representation according to specification.
array	set handshake headers. provided as array because some protocol version require specific order of fields.
string	set data to send after headers. in most cases it will be blank data.
integer	convert frame type name to opcode
integer	convert frame type name to opcode
boolean	verify if received header matches with one of the sent ones
string	sec-websocket-key value
boolean	verify if received header sec-websocket-accept matches generated one.
string	sec-websocket-key1 value
string	sec-websocket-key2 value
string	value of third key, sent in body
string	expected challenge that should be sent by server
string	generate sec-websocket-key1 and sec-websocket-key2
string	signature of response, created from client request sec-websocket-key
string	response to client challenge from request sec-websocket-key1, sec-websocket-key2 and leftovers
integer	calculate numbers over spaces, according to spec 5.2
array	compile string to temple expression
array	handle control expression `[:slim, :control, code, content]`
array	handle output expression `[:slim, :output, escape, code, content]`
array	handle text expression `[:slim, :text, type, content]`
array	handle control expression `[:slim, :control, code, content]`
array	handle output expression `[:slim, :output, escape, code, content]`
array	handle multi expression `[:multi, *exps]`
array	handle tag expression `[:html, :tag, name, attrs, content]`
array	handle attributes expression `[:html, :attrs, *attrs]`
array	handle interpolate expression `[:slim, :interpolate, string]`
array	handle attributes expression `[:html, :attrs, *attrs]`
array	handle attribute expression `[:html, :attr, name, value]`
array	handle attribute expression `[:slim, :attrvalue, escape, code]`
string	return encoding from an http header hash.  we use the rfc 7231 specification and do not impose a default encoding on text. this differs from the older rfc 2616 behavior, which specifies using iso-8859-1 for text/* content types without a charset.  strings will use the default encoding when this method returns nil. this default is likely to be utf-8 for ruby >= 2.0
string	serialize a ruby object into http query string parameters.  there is no standard for doing this, so we choose our own slightly idiosyncratic format. the output closely matches the format understood by rails, rack, and php.  if you don't want handling of complex objects and only want to handle simple flat hashes, you may want to use `uri.encode_www_form` instead, which implements html5-compliant url encoded form data.  notable differences from the activesupport implementation:  - empty hash and empty array are treated the same as nil instead of being   omitted entirely from the output. rather than disappearing, they will   appear to be nil instead.  it's most common to pass a hash as the object to serialize, but you can also use a paramsarray if you want to be able to pass the same key with multiple values and not use the rack/rails array convention.
string	extract the query parameters and append them to the url  look through the headers hash for a :params option (case-insensitive, may be string or symbol). if present and the value is a hash or restclient::paramsarray, *delete* the key/value pair from the headers hash and encode the value into a query string. append this query string to the url and return the resulting url.
hash	render a hash of key => value pairs for cookies in the request#cookie_jar that are valid for the request#uri. this will not necessarily include all cookies if there are duplicate keys. it's safer to use the cookie_jar directly if that's a concern.
string	render a cookie http request header from the contents of the @cookie_jar, or nil if the jar is empty.
string	normalize a url by adding a protocol if none is present.  if the string has no http-like scheme (i.e. scheme followed by '//'), a scheme of 'http' will be added. this mimics the behavior of browsers and user agents like curl.
string	parse a method and return a normalized string version.  raise argumenterror if the method is falsy, but otherwise do no validation.
string	given a mime type or file extension, return either a mime type or, if none is found, the input unchanged.      >> maybe_convert_extension('json')     => 'application/json'      >> maybe_convert_extension('unknown')     => 'unknown'      >> maybe_convert_extension('application/xml')     => 'application/xml'
string	return the http response body.  future versions of restclient will deprecate treating response objects directly as strings, so it will be necessary to call `.body`.
string	convert the http response body to a pure string object.
string	convert the http response body to a pure string object.
hash	hash of cookies extracted from response headers.  nb: this will return only cookies whose domain matches this request, and may not even return all of those cookies if there are duplicate names. use the full cookie_jar for more nuanced access.
hash	convert headers hash into canonical form.  header names will be converted to lowercase symbols with underscores instead of hyphens.  headers specified multiple times will be joined by comma and space, except for set-cookie, which will always be an array.  per rfc 2616, if a server sends multiple headers with the same key, they must be able to be joined into a single header by a comma. however, set-cookie (rfc 6265) cannot because commas are valid within cookie definitions. the newer rfc 7230 notes (3.2.2) that set-cookie should be handled as a special case.  http://tools.ietf.org/html/rfc2616#section-4.2 http://tools.ietf.org/html/rfc7230#section-3.2.2 http://tools.ietf.org/html/rfc6265
string	the message of the exception reports the content of podspec for the line that generated the original exception.
void	conveys debug information to the user.
hash	installs the plugin from definition object created by limited parsing of gemfile searching for plugins to be installed
hash	installs the plugin from rubygems source and returns the path where the plugin was installed
hash	installs the plugins and deps from the provided specs and returns map of gems to their paths
array	this is used by the default `spec` method to constructs the specification objects for the gems and versions that can be installed by this source plugin.  note: if the spec method is overridden, this function is not necessary
hash	options to be saved in the lockfile so that the source plugin is able to check out same version of gem later.  there options are passed when the source plugin is created from the lock file.
string	install the gem specified by the spec at appropriate path. `install_path` provides a sufficient default, if the source can only satisfy one gem,  but is not binding.
array	create a delegate used for sorting. this strategy is copied from rubygems 2.23 and ensures that bundler's specifications can be compared and sorted with rubygems' own specifications.
boolean	returns true if bundler::uri has a scheme (e.g. http:// or https://) specified.
void	called roughly every {#progress_rate}, this method should convey progress to the user.
void	called before resolution begins.
void	called after resolution ends (either successfully or with an error). by default, prints a newline.
void	conveys debug information to the user.
integer	we compare unwinddetails when choosing which state to unwind to. if two options have the same state_index we prefer the one most removed from a requirement that caused the conflict. both options would unwind to the same state, but a `grandparent` option will filter out fewer of its possibilities after doing so - where a state is both a `parent` and a `grandparent` to requirements that have caused a conflict this is the correct behaviour.
void	sets up the resolution process
void	ends the resolution process
void	processes the topmost available {requirementstate} on the stack
void	unwinds the states stack because a conflict has been encountered
void	raises a versionconflict error, or any underlying error, if there is no current state
void	filter's a state's possibilities to remove any that would not fix the conflict we've just rewound from
void	filter's a state's possibilities to remove any that would not satisfy the requirements in the conflict we've just rewound from
void	filter's a state's possibilities to remove any that would (eventually) create a requirement in the conflict we've just rewound from
void	indicates progress roughly once every second
void	calls the {#resolver_ui}'s {ui#debug} method
void	attempts to activate the current {#possibility}
void	attempts to update the existing vertex's `possibilityset` with a filtered version
void	add the current {#possibility} to the dependency graph of the current {#state}
void	requires the dependencies that the recently activated spec has
void	pushes a new {dependencystate} that encapsulates both existing and new requirements
array	checks a proposed requirement with any existing locked requirement before generating an array of possibilities for it.
array	build an array of possibilitysets, with each element representing a group of dependency versions that all have the same sub-dependency version constraints and are contiguous.
void	pushes a new {dependencystate}. if the {#specification_provider} says to {specificationprovider#allow_missing?} that particular requirement, and there are no possibilities for that requirement, then `state` is not pushed, and the vertex in {#activated} is removed, and we continue resolving the remaining requirements.
void	tags the current state of the dependency as the given tag
void	rewinds the graph to the state tagged as `tag`
void	deletes an {edge} from the dependency graph
void	sets the payload of the vertex with the given name
void	{include:dependencygraph#tag}
void	{include:dependencygraph#delete_edge}
void	{include:dependencygraph#set_payload}
void	{include:dependencygraph#rewind_to}
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
string	returns the name for the given `dependency`.
string	returns the name for the given `dependency`.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	performs the action on the given graph.
void	reverses the action on the given graph.
void	automatically delegates instance methods to the source object. class methods will be delegated to the {object_class}, if it is set.
void	sets the source class corresponding to the decorator class.
void	automatically decorates activerecord finder methods, so that you can use `productdecorator.find(id)` instead of `productdecorator.decorate(product.find(id))`.  finder methods are applied to the {object_class}.
void	automatically decorate an association.
hash	implemented by the decorator.
boolean	compares with possibly-decorated objects.
boolean	compares an object to a possibly-decorated object.
